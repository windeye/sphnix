!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
A	sphinxstemru.cpp	/^		A	= 0xB0D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
A	sphinxstemru.cpp	/^		A	= 0xD0B0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
A	sphinxstemru.cpp	/^		A	= 0xE0,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
AAA	tests.cpp	699;"	d	file:
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/xuliwei\/mycode\/sphinx\/config\/missing --run aclocal-1.11$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ADD	sphinxmetaphone.cpp	119;"	d	file:
ADD_DISTR	searchd.cpp	/^	ADD_DISTR	= 2,$/;"	e	enum:ESphAddIndex	file:
ADD_ERROR	searchd.cpp	/^	ADD_ERROR	= 0,$/;"	e	enum:ESphAddIndex	file:
ADD_LOCAL	searchd.cpp	/^	ADD_LOCAL	= 1,$/;"	e	enum:ESphAddIndex	file:
ADD_RET	sphinxmetaphone.cpp	113;"	d	file:
ADD_RT	searchd.cpp	/^	ADD_RT		= 3$/;"	e	enum:ESphAddIndex	file:
AFFIX_FORMAT_ISPELL	spelldump.cpp	/^	AFFIX_FORMAT_ISPELL		= 0,$/;"	e	enum:AffixFormat_e	file:
AFFIX_FORMAT_MYSPELL	spelldump.cpp	/^	AFFIX_FORMAT_MYSPELL	= 1,$/;"	e	enum:AffixFormat_e	file:
AFFIX_FORMAT_UNKNOWN	spelldump.cpp	/^	AFFIX_FORMAT_UNKNOWN$/;"	e	enum:AffixFormat_e	file:
AGENT_CONNECT	searchd.cpp	/^	AGENT_CONNECT,					\/\/\/< connecting to agent$/;"	e	enum:AgentState_e	file:
AGENT_HELLO	searchd.cpp	/^	AGENT_HELLO,					\/\/\/< waiting for "VER x" hello$/;"	e	enum:AgentState_e	file:
AGENT_PREREPLY	searchd.cpp	/^	AGENT_PREREPLY,					\/\/\/< query sent, activity detected, need to read reply$/;"	e	enum:AgentState_e	file:
AGENT_QUERY	searchd.cpp	/^	AGENT_QUERY,					\/\/\/< query sent, waiting for reply$/;"	e	enum:AgentState_e	file:
AGENT_REPLY	searchd.cpp	/^	AGENT_REPLY,					\/\/\/< reading reply$/;"	e	enum:AgentState_e	file:
AGENT_RETRY	searchd.cpp	/^	AGENT_RETRY						\/\/\/< should retry$/;"	e	enum:AgentState_e	file:
AGENT_STATS_INC	searchd.cpp	3083;"	d	file:
AGENT_UNUSED	searchd.cpp	/^	AGENT_UNUSED,					\/\/\/< agent is unused for this request$/;"	e	enum:AgentState_e	file:
AMTAR	Makefile	/^AMTAR = ${SHELL} \/home\/xuliwei\/mycode\/sphinx\/config\/missing --run tar$/;"	m
AM_CPPFLAGS	Makefile	/^AM_CPPFLAGS = -DSYSCONFDIR="\\"$(sysconfdir)\\"" -DDATADIR="\\"$(localstatedir)\/data\\""$/;"	m
AR	Makefile	/^AR = ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS = cru$/;"	m
ARRAY_ALL	sphinxstd.h	983;"	d
ARRAY_ANY	sphinxstd.h	978;"	d
ARRAY_FOREACH	sphinxstd.h	972;"	d
ARRAY_FOREACH_COND	sphinxstd.h	975;"	d
ATTRS_MVA_UPDATED	sphinx.h	/^		ATTRS_MVA_UPDATED		= ( 1UL<<1 )$/;"	e	enum:CSphIndex::__anon11
ATTRS_UPDATED	sphinx.h	/^		ATTRS_UPDATED			= ( 1UL<<0 ),$/;"	e	enum:CSphIndex::__anon11
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/xuliwei\/mycode\/sphinx\/config\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/xuliwei\/mycode\/sphinx\/config\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/xuliwei\/mycode\/sphinx\/config\/missing --run automake-1.11$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
AccumCodepoint	sphinx.cpp	/^	inline void AccumCodepoint ( int iCode )$/;"	f	class:CSphTokenizerTraits
AcquireDict	sphinx.cpp	/^const BYTE * CWordlist::AcquireDict ( const CSphWordlistCheckpoint * pCheckpoint, int iFD, BYTE * pDictBuf ) const$/;"	f	class:CWordlist
Add	indexer.cpp	/^	T & Add ( const char * sKey, int iKeyLen, T & tValue )$/;"	f	class:CSphMTFHash
Add	searchd.cpp	/^bool IndexHash_c::Add ( const ServedDesc_t & tDesc, const CSphString & tKey )$/;"	f	class:IndexHash_c
Add	sphinx.cpp	/^	DWORD * Add ( DWORD * p, int i ) const$/;"	f	struct:DocinfoSort_fn
Add	sphinx.cpp	/^void CSphIOStats::Add ( const CSphIOStats & b )$/;"	f	class:CSphIOStats
Add	sphinxexcerpt.cpp	/^		void Add ( int i, bool bQword )$/;"	f	struct:ExcerptGen_c::TokenSpan_t
Add	sphinxexpr.cpp	/^	void Add ( float fValue )$/;"	f	class:ConstList_c
Add	sphinxexpr.cpp	/^	void Add ( int64_t iValue )$/;"	f	class:ConstList_c
Add	sphinxfilter.cpp	/^	void Add ( ISphFilter * pFilter )$/;"	f	struct:Filter_And
Add	sphinxsort.cpp	/^	T * Add ( const T & tValue, const KEY & tKey )$/;"	f	class:CSphFixedHash
Add	sphinxsort.cpp	/^	void			Add ( const SphGroupedValue_t & tValue )	{ CSphVector<SphGroupedValue_t>::Add ( tValue ); m_bSorted = false; }$/;"	f	class:CSphUniqounter
Add	sphinxstd.h	/^	T & Add ()$/;"	f	class:CSphVector
Add	sphinxstd.h	/^	T * Add ( T * p, int i ) const$/;"	f	struct:SphAccessor_T
Add	sphinxstd.h	/^	bool Add ( const T & tValue, const KEY & tKey )$/;"	f	class:CSphOrderedHash
Add	sphinxstd.h	/^	void Add ( const T & tValue )$/;"	f	class:CSphVector
Add	tests.cpp	/^	DWORD * Add ( DWORD * p, int i ) const$/;"	f	struct:TestAccCmp_fn
Add2Ring	sphinxsearch.cpp	/^	inline void Add2Ring ( const ExtHit_t* pHit )$/;"	f	class:FSMmultinear	file:
AddArgs	sphinxexpr.cpp	/^	void AddArgs ( ISphExpr * pExpr )$/;"	f	struct:Expr_Arglist_c
AddAttr	sphinx.cpp	/^void CSphSchema::AddAttr ( const CSphColumnInfo & tCol, bool bDynamic )$/;"	f	class:CSphSchema
AddAutofile	sphinx.cpp	/^	inline void AddAutofile ( CSphAutofile* pAf )$/;"	f	class:DeleteOnFail
AddBoundary	sphinxexcerpt.cpp	/^void ExcerptGen_c::AddBoundary()$/;"	f	class:ExcerptGen_c
AddCaseFolding	sphinx.cpp	/^	virtual void					AddCaseFolding ( CSphRemapRange & tRange )						{ m_pTokenizer->AddCaseFolding ( tRange ); }$/;"	f	class:CSphTokenizer_Filter
AddCaseFolding	sphinx.cpp	/^void ISphTokenizer::AddCaseFolding ( CSphRemapRange & tRange )$/;"	f	class:ISphTokenizer
AddCharPair	spelldump.cpp	/^void CISpellAffix::AddCharPair ( BYTE uCharL, BYTE uCharU )$/;"	f	class:CISpellAffix
AddConst	searchd.cpp	/^void SqlParser_c::AddConst ( int iList, const YYSTYPE& tValue )$/;"	f	class:SqlParser_c
AddDistinct	searchd.cpp	/^bool SqlParser_c::AddDistinct ( SqlNode_t * pNewExpr, SqlNode_t * pStart, SqlNode_t * pEnd )$/;"	f	class:SqlParser_c
AddField	sphinxquery.cpp	/^bool XQParser_t::AddField ( CSphSmallBitvec & dFields, const char * szField, int iLen )$/;"	f	class:XQParser_t
AddFieldToSchema	sphinx.cpp	/^void CSphSource_XMLPipe2::AddFieldToSchema ( const char * szName )$/;"	f	class:CSphSource_XMLPipe2
AddFilter	searchd.cpp	/^CSphFilterSettings * SqlParser_c::AddFilter ( const CSphString & sCol, ESphFilter eType )$/;"	f	class:SqlParser_c
AddFloatRangeFilter	searchd.cpp	/^bool SqlParser_c::AddFloatRangeFilter ( const CSphString & sAttr, float fMin, float fMax )$/;"	f	class:SqlParser_c
AddHit	sphinx.h	/^	void AddHit ( SphDocID_t uDocid, SphWordID_t uWordid, Hitpos_t uPos )$/;"	f	class:ISphHits
AddHits	sphinxexcerpt.cpp	/^void SnippetsDocIndex_c::AddHits ( SphWordID_t iWordID, const BYTE * sWord, int iWordLen, DWORD uPosition )$/;"	f	class:SnippetsDocIndex_c
AddIDAttribute	searchd.cpp	/^void AddIDAttribute ( CVirtualSchema * pSchema )$/;"	f
AddIndex	searchd.cpp	/^ESphAddIndex AddIndex ( const char * szIndexName, const CSphConfigSection & hIndex )$/;"	f
AddInsval	searchd.cpp	/^static void AddInsval ( CSphVector<SqlInsert_t> & dVec, const SqlNode_t & tNode )$/;"	f	file:
AddIntFilterGTE	searchd.cpp	/^bool SqlParser_c::AddIntFilterGTE ( const CSphString & sAttr, int64_t iVal )$/;"	f	class:SqlParser_c
AddIntFilterLTE	searchd.cpp	/^bool SqlParser_c::AddIntFilterLTE ( const CSphString & sAttr, int64_t iVal )$/;"	f	class:SqlParser_c
AddIntRangeFilter	searchd.cpp	/^bool SqlParser_c::AddIntRangeFilter ( const CSphString & sAttr, int64_t iMin, int64_t iMax )$/;"	f	class:SqlParser_c
AddItem	searchd.cpp	/^bool SqlParser_c::AddItem ( const char * pToken, SqlNode_t * pStart, SqlNode_t * pEnd )$/;"	f	class:SqlParser_c
AddItem	searchd.cpp	/^void SqlParser_c::AddItem ( SqlNode_t * pExpr, ESphAggrFunc eAggrFunc, SqlNode_t * pStart, SqlNode_t * pEnd )$/;"	f	class:SqlParser_c
AddItem	sphinx.cpp	/^void SelectParser_t::AddItem ( YYSTYPE * pExpr, ESphAggrFunc eAggrFunc, YYSTYPE * pStart, YYSTYPE * pEnd )$/;"	f	class:SelectParser_t
AddItem	sphinx.cpp	/^void SelectParser_t::AddItem ( const char * pToken, YYSTYPE * pStart, YYSTYPE * pEnd )$/;"	f	class:SelectParser_t
AddJunk	sphinxexcerpt.cpp	/^void ExcerptGen_c::AddJunk ( int iStart, int iLength, int iBoundary )$/;"	f	class:ExcerptGen_c
AddKey	sphinxutils.cpp	/^void CSphConfigParser::AddKey ( const char * sKey, char * sValue )$/;"	f	class:CSphConfigParser
AddKeyword	sphinx.cpp	/^	SphWordID_t AddKeyword ( const BYTE * pWord )$/;"	f	class:CRtDictKeywords
AddKeyword	sphinxquery.cpp	/^XQNode_t * XQParser_t::AddKeyword ( XQNode_t * pLeft, XQNode_t * pRight )$/;"	f	class:XQParser_t
AddKeyword	sphinxquery.cpp	/^XQNode_t * XQParser_t::AddKeyword ( const char * sKeyword, DWORD uStarPosition )$/;"	f	class:XQParser_t
AddListener	searchd.cpp	/^void AddListener ( const CSphString & sListen )$/;"	f
AddMorph	sphinx.cpp	/^bool CSphDictCRCTraits::AddMorph ( int iMorph )$/;"	f	class:CSphDictCRCTraits
AddNodeAttr	sphinxexpr.cpp	/^int ExprParser_t::AddNodeAttr ( int iTokenType, uint64_t uAttrLocator )$/;"	f	class:ExprParser_t
AddNodeConstlist	sphinxexpr.cpp	/^int ExprParser_t::AddNodeConstlist ( float iValue )$/;"	f	class:ExprParser_t
AddNodeConstlist	sphinxexpr.cpp	/^int ExprParser_t::AddNodeConstlist ( int64_t iValue )$/;"	f	class:ExprParser_t
AddNodeFloat	sphinxexpr.cpp	/^int ExprParser_t::AddNodeFloat ( float fValue )$/;"	f	class:ExprParser_t
AddNodeFunc	sphinxexpr.cpp	/^int ExprParser_t::AddNodeFunc ( int iFunc, int iLeft, int iRight )$/;"	f	class:ExprParser_t
AddNodeHookFunc	sphinxexpr.cpp	/^int ExprParser_t::AddNodeHookFunc ( int iID, int iLeft )$/;"	f	class:ExprParser_t
AddNodeHookIdent	sphinxexpr.cpp	/^int ExprParser_t::AddNodeHookIdent ( int iID )$/;"	f	class:ExprParser_t
AddNodeID	sphinxexpr.cpp	/^int ExprParser_t::AddNodeID ()$/;"	f	class:ExprParser_t
AddNodeInt	sphinxexpr.cpp	/^int ExprParser_t::AddNodeInt ( int64_t iValue )$/;"	f	class:ExprParser_t
AddNodeOp	sphinxexpr.cpp	/^int ExprParser_t::AddNodeOp ( int iOp, int iLeft, int iRight )$/;"	f	class:ExprParser_t
AddNodeString	sphinxexpr.cpp	/^int ExprParser_t::AddNodeString ( int64_t iValue )$/;"	f	class:ExprParser_t
AddNodeUdf	sphinxexpr.cpp	/^int ExprParser_t::AddNodeUdf ( int iCall, int iArg )$/;"	f	class:ExprParser_t
AddNodeUservar	sphinxexpr.cpp	/^int ExprParser_t::AddNodeUservar ( int iUservar )$/;"	f	class:ExprParser_t
AddNodeWeight	sphinxexpr.cpp	/^int ExprParser_t::AddNodeWeight ()$/;"	f	class:ExprParser_t
AddOp	sphinxquery.cpp	/^XQNode_t * XQParser_t::AddOp ( XQOperator_e eOp, XQNode_t * pLeft, XQNode_t * pRight, int iOpArg )$/;"	f	class:XQParser_t
AddOption	searchd.cpp	/^bool SqlParser_c::AddOption ( const SqlNode_t & tIdent, CSphVector<CSphNamedInt> & dNamed )$/;"	f	class:SqlParser_c
AddOption	searchd.cpp	/^bool SqlParser_c::AddOption ( const SqlNode_t & tIdent, const SqlNode_t & tValue, const CSphString & sArg )$/;"	f	class:SqlParser_c
AddOption	searchd.cpp	/^bool SqlParser_c::AddOption ( const SqlNode_t& tIdent, const SqlNode_t& tValue )$/;"	f	class:SqlParser_c
AddPos	sphinx.h	/^	static void AddPos ( Hitpos_t * pHitpos, int iAdd )$/;"	f	class:Hitman_c
AddQuery	sphinxquery.cpp	/^void XQParser_t::AddQuery ( XQNode_t * pNode )$/;"	f	class:XQParser_t
AddRange	sphinx.cpp	/^bool CSphCharsetDefinitionParser::AddRange ( const CSphRemapRange & tRange, CSphVector<CSphRemapRange> & dRanges )$/;"	f	class:CSphCharsetDefinitionParser
AddRef	sphinxstd.h	/^	void			AddRef () const		{ m_iRefCount++; }$/;"	f	struct:ISphRefcounted
AddRef	sphinxstd.h	/^	void AddRef () const$/;"	f	struct:ISphRefcountedMT
AddRemaps	sphinx.cpp	/^void CSphLowercaser::AddRemaps ( const CSphVector<CSphRemapRange> & dRemaps, DWORD uFlags )$/;"	f	class:CSphLowercaser
AddSchemaItem	searchd.cpp	/^	bool AddSchemaItem ( const char * psName )$/;"	f	struct:SqlStmt_t
AddSchemaItem	searchd.cpp	/^bool SqlParser_c::AddSchemaItem ( YYSTYPE * pNode )$/;"	f	class:SqlParser_c
AddSection	sphinxutils.cpp	/^bool CSphConfigParser::AddSection ( const char * sType, const char * sName )$/;"	f	class:CSphConfigParser
AddSpecials	sphinx.cpp	/^	virtual void					AddSpecials ( const char * sSpecials )							{ m_pTokenizer->AddSpecials ( sSpecials ); }$/;"	f	class:CSphTokenizer_Filter
AddSpecials	sphinx.cpp	/^void CSphLowercaser::AddSpecials ( const char * sSpecials )$/;"	f	class:CSphLowercaser
AddSpecials	sphinx.cpp	/^void ISphTokenizer::AddSpecials ( const char * sSpecials )$/;"	f	class:ISphTokenizer
AddSpecialsSPZ	sphinx.cpp	/^bool ISphTokenizer::AddSpecialsSPZ ( const char * sSpecials, const char * sDirective, CSphString & sError )$/;"	f	class:ISphTokenizer
AddStat	sphinx.cpp	/^void CSphQueryResultMeta::AddStat ( const CSphString & sWord, int64_t iDocs, int64_t iHits, bool bExpanded )$/;"	f	class:CSphQueryResultMeta
AddToCharset	spelldump.cpp	/^bool CISpellAffix::AddToCharset ( char * szRangeL, char * szRangeU )$/;"	f	class:CISpellAffix
AddUnique	sphinxstd.h	/^	T & AddUnique ( const KEY & tKey )$/;"	f	class:CSphOrderedHash
AddUnique	sphinxstd.h	/^	void AddUnique ( const T & tValue )$/;"	f	class:CSphVector
AddUpdatedAttr	searchd.cpp	/^void SqlParser_c::AddUpdatedAttr ( const CSphString& sName, ESphAttr eType )$/;"	f	class:SqlParser_c
AddUservarFilter	searchd.cpp	/^bool SqlParser_c::AddUservarFilter ( const CSphString & sCol, const CSphString & sVar, bool bExclude )$/;"	f	class:SqlParser_c
AddValuesFilter	searchd.cpp	/^	inline CSphFilterSettings * AddValuesFilter ( const SqlNode_t& sCol )$/;"	f	struct:SqlParser_c
AddWord	sphinxexcerpt.cpp	/^void SnippetsDocIndex_c::AddWord ( SphWordID_t iWordID )$/;"	f	class:SnippetsDocIndex_c
AddWord	sphinxexcerpt.cpp	/^void SnippetsDocIndex_c::AddWord ( const char * sWord, int iStarPosition )$/;"	f	class:SnippetsDocIndex_c
AddWriter	sphinx.cpp	/^	inline void AddWriter ( CSphWriter* pWr )$/;"	f	class:DeleteOnFail
AddZone	sphinxexcerpt.cpp	/^static void AddZone ( const char * pStart, const char * pEnd, int uPosition, TokenFunctorTraits_c & tFunctor$/;"	f	file:
AdoptAliasedSchema	searchd.cpp	/^void AdoptAliasedSchema ( AggrResult_t & tRes, CVirtualSchema * pSchema )$/;"	f
AdoptSchema	searchd.cpp	/^void AdoptSchema ( AggrResult_t * pRes, CSphSchema * pSchema )$/;"	f
AffixFormatName	spelldump.cpp	/^const char * AffixFormatName[] =$/;"	v
AffixFormat_e	spelldump.cpp	/^enum AffixFormat_e$/;"	g	file:
AgentConn_t	searchd.cpp	/^	AgentConn_t ()$/;"	f	struct:AgentConn_t
AgentConn_t	searchd.cpp	/^struct AgentConn_t : public AgentDesc_t$/;"	s	file:
AgentDesc_t	searchd.cpp	/^	AgentDesc_t ()$/;"	f	struct:AgentDesc_t
AgentDesc_t	searchd.cpp	/^struct AgentDesc_t$/;"	s	file:
AgentState_e	searchd.cpp	/^enum AgentState_e$/;"	g	file:
AgentStats_t	searchd.cpp	/^struct AgentStats_t$/;"	s	file:
AggrAvg_t	sphinxsort.cpp	/^	AggrAvg_t ( const CSphAttrLocator & tLoc, const CSphAttrLocator & tCountLoc ) : IAggrFuncTraits<T> ( tLoc ), m_tCountLoc ( tCountLoc )$/;"	f	class:AggrAvg_t
AggrAvg_t	sphinxsort.cpp	/^class AggrAvg_t : public IAggrFuncTraits<T>$/;"	c	file:
AggrMax_t	sphinxsort.cpp	/^	explicit AggrMax_t ( const CSphAttrLocator & tLoc ) : IAggrFuncTraits<T> ( tLoc )$/;"	f	class:AggrMax_t
AggrMax_t	sphinxsort.cpp	/^class AggrMax_t : public IAggrFuncTraits<T>$/;"	c	file:
AggrMin_t	sphinxsort.cpp	/^	explicit AggrMin_t ( const CSphAttrLocator & tLoc ) : IAggrFuncTraits<T> ( tLoc )$/;"	f	class:AggrMin_t
AggrMin_t	sphinxsort.cpp	/^class AggrMin_t : public IAggrFuncTraits<T>$/;"	c	file:
AggrResult_t	searchd.cpp	/^struct AggrResult_t : CSphQueryResult$/;"	s	file:
AggrSum_t	sphinxsort.cpp	/^	explicit AggrSum_t ( const CSphAttrLocator & tLoc ) : IAggrFuncTraits<T> ( tLoc )$/;"	f	class:AggrSum_t
AggrSum_t	sphinxsort.cpp	/^class AggrSum_t : public IAggrFuncTraits<T>$/;"	c	file:
AliasLastItem	searchd.cpp	/^void SqlParser_c::AliasLastItem ( SqlNode_t * pAlias )$/;"	f	class:SqlParser_c
AliasLastItem	sphinx.cpp	/^void SelectParser_t::AliasLastItem ( YYSTYPE * pAlias )$/;"	f	class:SelectParser_t
AlignSizes	searchd.cpp	/^	inline void AlignSizes ( const CSphSchema& tProof )$/;"	f	class:CVirtualSchema
AllIsDone	sphinx.cpp	/^	inline void AllIsDone()$/;"	f	class:DeleteOnFail
Alloc	sphinx.cpp	/^	void Alloc ( ESphTimer eTimer, int iParent )$/;"	f	struct:CSphTimer
Alloc	sphinxstd.h	/^	bool Alloc ( int64_t iEntries, CSphString & sError, CSphString & )$/;"	f	class:CSphSharedBuffer
AllocDocinfo	sphinxsearch.cpp	/^	void AllocDocinfo ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtNode_i
AllocNamedVec	searchd.cpp	/^int SqlParser_c::AllocNamedVec ()$/;"	f	class:SqlParser_c
AllocsLogEntry_t	sphinx.cpp	/^	struct AllocsLogEntry_t$/;"	s	class:CSphArena	file:
AppendArg	searchd.cpp	/^void AppendArg ( char * sBuf, int iBufLimit, const char * sArg )$/;"	f
AppendEscaped	sphinxstd.h	/^	void AppendEscaped ( const char * sText, bool bEscape=true, bool bFixupSpace=true )$/;"	f	class:CSphStringBuilder
AppendSeparator	sphinxstd.h	/^	CSphStringBuilder & AppendSeparator ( const char * sSep )$/;"	f	class:CSphStringBuilder
AppendToConstlist	sphinxexpr.cpp	/^void ExprParser_t::AppendToConstlist ( int iNode, float iValue )$/;"	f	class:ExprParser_t
AppendToConstlist	sphinxexpr.cpp	/^void ExprParser_t::AppendToConstlist ( int iNode, int64_t iValue )$/;"	f	class:ExprParser_t
Appendf	sphinxstd.h	/^	CSphStringBuilder & Appendf ( const char * sTemplate, ... ) __attribute__ ( ( format ( printf, 2, 3 ) ) )$/;"	f	class:CSphStringBuilder
Apply	spelldump.cpp	/^bool CISpellAffixRule::Apply ( CSphString & sWord )$/;"	f	class:CISpellAffixRule
ApplyRules	sphinxstemcz.cpp	/^static void ApplyRules ( BYTE * word, const ClampRule_t * pRules, int nRules )$/;"	f	file:
ApplyStemmers	sphinx.cpp	/^void CSphDictCRCTraits::ApplyStemmers ( BYTE * pWord )$/;"	f	class:CSphDictCRCTraits
ApplyStemmers	sphinx.h	/^	virtual void		ApplyStemmers ( BYTE * ) {}$/;"	f	struct:CSphDict
Assign32	sphinxstd.h	/^	void Assign32 ( DWORD uMask )$/;"	f	class:CSphSmallBitvec
Associate	sphinxquery.cpp	/^	int Associate ( XQNode_t * pTree, uint64_t uHash )$/;"	f	class:CAssociations_t
Associate2nd	sphinxquery.cpp	/^	bool Associate2nd ( uint64_t uTree )$/;"	f	class:Associations_t
Associations_t	sphinxquery.cpp	/^class Associations_t : public CDwordHash$/;"	c	file:
Attr2Keypart	sphinxsort.cpp	/^static inline ESphSortKeyPart Attr2Keypart ( ESphAttr eType )$/;"	f	file:
AttrIndexBuilder_c	sphinxint.h	/^typedef AttrIndexBuilder_t<> AttrIndexBuilder_c;$/;"	t
AttrIndexBuilder_t	sphinxint.h	/^AttrIndexBuilder_t<DOCID>::AttrIndexBuilder_t ( const CSphSchema & tSchema )$/;"	f	class:AttrIndexBuilder_t
AttrIndexBuilder_t	sphinxint.h	/^class AttrIndexBuilder_t : ISphNoncopyable$/;"	c
AttrValues_p	searchd.cpp	/^typedef CSphRefcountedPtr < RefcountedVector_c<SphAttr_t> > AttrValues_p;$/;"	t	file:
AutoAlias	searchd.cpp	/^void SqlParser_c::AutoAlias ( CSphQueryItem & tItem, SqlNode_t * pStart, SqlNode_t * pEnd )$/;"	f	class:SqlParser_c
AutoAlias	sphinx.cpp	/^void SelectParser_t::AutoAlias ( CSphQueryItem & tItem, YYSTYPE * pStart, YYSTYPE * pEnd )$/;"	f	class:SelectParser_t
AwareMT	searchd.cpp	/^	void AwareMT()$/;"	f	class:CSphSchemaMT
B	sphinxstemru.cpp	/^		B	= 0xB1D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
B	sphinxstemru.cpp	/^		B	= 0xD0B1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
B	sphinxstemru.cpp	/^		B	= 0xE1,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
BASE	searchd.cpp	/^	typedef SmallStringHash_T<ServedIndex_t> BASE;$/;"	t	class:IndexHash_c	file:
BBB	tests.cpp	700;"	d	file:
BEGIN	llsphinxql.c	143;"	d	file:
BINLOG_AUTO_FLUSH	sphinxrt.cpp	36;"	d	file:
BINLOG_RESTART_SIZE	sphinxrt.cpp	37;"	d	file:
BINLOG_WRITE_BUFFER	sphinxrt.cpp	35;"	d	file:
BIN_DOC	sphinx.cpp	/^	BIN_DOC			= 1,	\/\/\/< bin is in "expects doc delta" state$/;"	e	enum:ESphBinState	file:
BIN_ERR_END	sphinx.cpp	/^	BIN_ERR_END		= -1,	\/\/\/< bin end$/;"	e	enum:ESphBinState	file:
BIN_ERR_READ	sphinx.cpp	/^	BIN_ERR_READ	= -2,	\/\/\/< bin read error$/;"	e	enum:ESphBinState	file:
BIN_POS	sphinx.cpp	/^	BIN_POS			= 0,	\/\/\/< bin is in "expects pos delta" state$/;"	e	enum:ESphBinState	file:
BIN_PRECACHE_ERROR	sphinx.cpp	/^	BIN_PRECACHE_ERROR		\/\/\/< precache failed$/;"	e	enum:ESphBinRead	file:
BIN_PRECACHE_OK	sphinx.cpp	/^	BIN_PRECACHE_OK,		\/\/\/< precache ok$/;"	e	enum:ESphBinRead	file:
BIN_READ_EOF	sphinx.cpp	/^	BIN_READ_EOF,			\/\/\/< bin end$/;"	e	enum:ESphBinRead	file:
BIN_READ_ERROR	sphinx.cpp	/^	BIN_READ_ERROR,			\/\/\/< bin read error$/;"	e	enum:ESphBinRead	file:
BIN_READ_OK	sphinx.cpp	/^	BIN_READ_OK,			\/\/\/< bin read ok$/;"	e	enum:ESphBinRead	file:
BIN_WORD	sphinx.cpp	/^	BIN_WORD		= 2		\/\/\/< bin is in "expects word delta" state$/;"	e	enum:ESphBinState	file:
BLEND_TRIM_BOTH	sphinx.h	/^	static const BYTE				BLEND_TRIM_BOTH		= 8;$/;"	m	class:ISphTokenizer
BLEND_TRIM_HEAD	sphinx.h	/^	static const BYTE				BLEND_TRIM_HEAD		= 2;$/;"	m	class:ISphTokenizer
BLEND_TRIM_NONE	sphinx.h	/^	static const BYTE				BLEND_TRIM_NONE		= 1;$/;"	m	class:ISphTokenizer
BLEND_TRIM_TAIL	sphinx.h	/^	static const BYTE				BLEND_TRIM_TAIL		= 4;$/;"	m	class:ISphTokenizer
BUILD_REGULAR_HITS_COUNT	sphinx.cpp	20437;"	d	file:
BUILD_SUBSTRING_HITS_COUNT	sphinx.cpp	20292;"	d	file:
BUILT_SOURCES	Makefile	/^BUILT_SOURCES = extract-version$/;"	m
BYTE	sphinxstd.h	/^typedef unsigned char		BYTE;$/;"	t
BYTE_ORDER	md5.cpp	57;"	d	file:
BYTE_ORDER	md5.cpp	59;"	d	file:
BYTE_ORDER	md5.cpp	61;"	d	file:
Begin	sphinxstd.h	/^	T * Begin () const$/;"	f	class:CSphFixedVector
Begin	sphinxstd.h	/^	T * Begin ()$/;"	f	class:CSphVector
Begin	sphinxstd.h	/^	const T * Begin () const$/;"	f	class:CSphVector
Begins	sphinxstd.h	/^	bool Begins ( const char * sPrefix ) const$/;"	f	struct:CSphString
BenchExpr	tests.cpp	/^void BenchExpr ()$/;"	f
BenchLocators	tests.cpp	/^void BenchLocators ()$/;"	f
BenchSort	tests.cpp	/^int64_t BenchSort ( T * pData, int iCount, bool bCheck )$/;"	f
BenchSort	tests.cpp	/^void BenchSort ()$/;"	f
BenchStemmer	tests.cpp	/^void BenchStemmer ()$/;"	f
BenchStripper	tests.cpp	/^void BenchStripper ()$/;"	f
BenchThreads	tests.cpp	/^void BenchThreads ()$/;"	f
BenchTokenizer	tests.cpp	/^void BenchTokenizer ( bool bUTF8 )$/;"	f
BinaryHash_fn	sphinxsort.cpp	/^class BinaryHash_fn$/;"	c	file:
BinaryNode_t	sphinx.cpp	/^struct BinaryNode_t$/;"	s	file:
BinarySearch	sphinxstd.h	/^	const T * BinarySearch ( T tRef ) const$/;"	f	class:CSphVector
BinarySearch	sphinxstd.h	/^	const T * BinarySearch ( const PRED & tPred, U tRef ) const$/;"	f	class:CSphVector
BindWeights	sphinx.cpp	/^void CSphQueryContext::BindWeights ( const CSphQuery * pQuery, const CSphSchema & tSchema, int iIndexWeight )$/;"	f	class:CSphQueryContext
BispanLen	sphinxsearch.cpp	/^inline int BispanLen ( const ExtHit_t * pLeft, const ExtHit_t * pRight )$/;"	f
BitAssociation_t	sphinxquery.cpp	/^	BitAssociation_t()$/;"	f	class:BitAssociation_t
BitAssociation_t	sphinxquery.cpp	/^class BitAssociation_t$/;"	c	file:
BitGet	sphinxstd.h	/^	bool BitGet ( int iIndex ) const$/;"	f	class:CSphBitvec
BitMask_t	sphinxquery.cpp	/^	BitMask_t ()$/;"	f	class:BitMask_t
BitMask_t	sphinxquery.cpp	/^class BitMask_t$/;"	c	file:
BitSet	sphinxstd.h	/^	void BitSet ( int iIndex )$/;"	f	class:CSphBitvec
BlendAdjust	sphinx.cpp	/^bool CSphTokenizerTraits<IS_UTF8>::BlendAdjust ( BYTE * pCur )$/;"	f	class:CSphTokenizerTraits
Build	sphinx.cpp	/^int CSphIndex_VLN::Build ( const CSphVector<CSphSource*> & dSources, int iMemoryLimit, int iWriteBuffer )$/;"	f	class:CSphIndex_VLN
BuildAssociations	sphinxquery.cpp	/^	bool BuildAssociations ( XQNode_t * pTree )$/;"	f	class:RevealCommon_t	file:
BuildBitmasks	sphinxquery.cpp	/^	void BuildBitmasks ( XQNode_t * pTree )$/;"	f	class:RevealCommon_t	file:
BuildExcerpt	sphinxexcerpt.cpp	/^char * ExcerptGen_c::BuildExcerpt ( const ExcerptQuery_t & tQuery )$/;"	f	class:ExcerptGen_c
BuildExpandedTree	sphinx.cpp	/^static void BuildExpandedTree ( const XQKeyword_t & tRootWord, CSphVector<CSphNamedInt> & dWordSrc, XQNode_t * pRoot )$/;"	f	file:
BuildHits	sphinx.cpp	/^void CSphSource_Document::BuildHits ( CSphString & sError, bool bSkipEndMarker )$/;"	f	class:CSphSource_Document
BuildMVA	sphinx.cpp	/^bool CSphIndex_VLN::BuildMVA ( const CSphVector<CSphSource*> & dSources,$/;"	f	class:CSphIndex_VLN
BuildMessage	sphinx.cpp	/^const char * CSphIndexProgress::BuildMessage() const$/;"	f	class:CSphIndexProgress
BuildMeta	searchd.cpp	/^void BuildMeta ( CSphVector<CSphString> & dStatus, const CSphQueryResultMeta & tMeta )$/;"	f
BuildRegularHits	sphinx.cpp	/^void CSphSource_Document::BuildRegularHits ( SphDocID_t uDocid, bool bPayload, bool bSkipEndMarker )$/;"	f	class:CSphSource_Document
BuildReport	searchd.cpp	/^	void BuildReport ( CSphStringBuilder & sReport )$/;"	f	class:SearchFailuresLog_c
BuildRequest	searchd.cpp	/^void SearchRequestBuilder_t::BuildRequest ( const char * sIndexes, NetOutputBuffer_c & tOut, int ) const$/;"	f	class:SearchRequestBuilder_t
BuildRequest	searchd.cpp	/^void SnippetRequestBuilder_t::BuildRequest ( const char * sIndex, NetOutputBuffer_c & tOut, int iNumAgent ) const$/;"	f	class:SnippetRequestBuilder_t
BuildRequest	searchd.cpp	/^void SphinxqlRequestBuilder_t::BuildRequest ( const char * sIndexes, NetOutputBuffer_c & tOut, int ) const$/;"	f	class:SphinxqlRequestBuilder_t
BuildRequest	searchd.cpp	/^void UpdateRequestBuilder_t::BuildRequest ( const char * sIndexes, NetOutputBuffer_c & tOut, int ) const$/;"	f	class:UpdateRequestBuilder_t
BuildStatus	searchd.cpp	/^void BuildStatus ( CSphVector<CSphString> & dStatus )$/;"	f
BuildSubstringHits	sphinx.cpp	/^void CSphSource_Document::BuildSubstringHits ( SphDocID_t uDocid, bool bPayload, ESphWordpart eWordpart, bool bSkipEndMarker )$/;"	f	class:CSphSource_Document
BuildZoneHits	sphinx.cpp	/^bool CSphSource_Document::BuildZoneHits ( SphDocID_t uDocid, BYTE * sWord )$/;"	f	class:CSphSource_Document
CAssociations_t	sphinxquery.cpp	/^	CAssociations_t() : m_iBits ( 0 ) {}$/;"	f	class:CAssociations_t
CAssociations_t	sphinxquery.cpp	/^class CAssociations_t$/;"	c	file:
CC	Makefile	/^CC = gcc$/;"	m
CCC	tests.cpp	701;"	d	file:
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CDwordHash	sphinxquery.cpp	/^typedef CSphOrderedHash < DWORD, uint64_t, IdentityHash_fn, 128 > CDwordHash;$/;"	t	file:
CFLAGS	Makefile	/^CFLAGS = -Wall -g -D_FILE_OFFSET_BITS=64 -O0 -DNDEBUG$/;"	m
CH	sphinxstemru.cpp	/^		CH	= 0x87D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
CH	sphinxstemru.cpp	/^		CH	= 0xD187U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
CH	sphinxstemru.cpp	/^		CH	= 0xF7,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
CHECK3	sphinxstemen.cpp	88;"	d	file:
CHECK3A	sphinxstemen.cpp	90;"	d	file:
CHUNK_BITS	sphinx.h	/^	static const int	CHUNK_BITS	= 8;$/;"	m	class:CSphLowercaser
CHUNK_COUNT	sphinx.h	/^	static const int	CHUNK_COUNT	= 0x300;$/;"	m	class:CSphLowercaser
CHUNK_MASK	sphinx.h	/^	static const int	CHUNK_MASK	= CHUNK_SIZE - 1;$/;"	m	class:CSphLowercaser
CHUNK_SIZE	sphinx.h	/^	static const int	CHUNK_SIZE	= 1 << CHUNK_BITS;$/;"	m	class:CSphLowercaser
CISpellAffix	spelldump.cpp	/^CISpellAffix::CISpellAffix ( const char * szLocale, const char * szCharsetFile )$/;"	f	class:CISpellAffix
CISpellAffix	spelldump.cpp	/^class CISpellAffix$/;"	c	file:
CISpellAffixRule	spelldump.cpp	/^				CISpellAffixRule () {}$/;"	f	class:CISpellAffixRule
CISpellAffixRule	spelldump.cpp	/^CISpellAffixRule::CISpellAffixRule ( RuleType_e eRule, char cFlag, bool bCrossProduct, char * szCondition, char * szStrip, char * szAppend )$/;"	f	class:CISpellAffixRule
CISpellAffixRule	spelldump.cpp	/^class CISpellAffixRule$/;"	c	file:
CISpellDict	spelldump.cpp	/^class CISpellDict$/;"	c	file:
CISpellDictWord	spelldump.cpp	/^	struct CISpellDictWord$/;"	s	class:CISpellDict	file:
COLLATE_STACK_BUFFER	sphinxsort.cpp	2326;"	d	file:
COMMIT_STEP	testrt.cpp	/^const int	COMMIT_STEP = 1;$/;"	v
COMMON_LIBS	Makefile	/^COMMON_LIBS = libsphinx.a $(LIBSTEMMER_LIBS) $(MYSQL_LIBS) $(PGSQL_LIBS)$/;"	m
CONFDIR	Makefile	/^CONFDIR = \/var$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config\/config.h$/;"	m
CONF_CHECK	search.cpp	22;"	d	file:
COPY_DONE	sphinxsearch.cpp	/^		COPY_DONE$/;"	e	enum:ExtTermPos_c::__anon12	file:
COPY_FILTERED	sphinxsearch.cpp	/^		COPY_FILTERED,$/;"	e	enum:ExtTermPos_c::__anon12	file:
COPY_TRAILING	sphinxsearch.cpp	/^		COPY_TRAILING,$/;"	e	enum:ExtTermPos_c::__anon12	file:
CORPUS	tests.cpp	/^const char * CORPUS = "corpus.txt";$/;"	v
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS =  -I\/usr\/local\/include -I\/usr\/include\/mysql -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv  $/;"	m
CRASH_EXIT	sphinxutils.h	199;"	d
CRASH_EXIT	sphinxutils.h	202;"	d
CRASH_EXIT	sphinxutils.h	207;"	d
CRASH_EXIT	sphinxutils.h	210;"	d
CROSSCHECK	tests.cpp	26;"	d	file:
CRtDictKeywords	sphinx.cpp	/^	explicit CRtDictKeywords ( CSphDict * pBase )$/;"	f	class:CRtDictKeywords
CRtDictKeywords	sphinx.cpp	/^class CRtDictKeywords : public ISphRtDictWraper$/;"	c	file:
CSphAggregateHit	sphinx.cpp	/^	CSphAggregateHit()$/;"	f	struct:CSphAggregateHit
CSphAggregateHit	sphinx.cpp	/^struct CSphAggregateHit$/;"	s	file:
CSphArena	sphinx.cpp	/^CSphArena::CSphArena ()$/;"	f	class:CSphArena
CSphArena	sphinx.cpp	/^class CSphArena$/;"	c	file:
CSphAttrLocator	sphinx.h	/^	CSphAttrLocator ()$/;"	f	struct:CSphAttrLocator
CSphAttrLocator	sphinx.h	/^struct CSphAttrLocator$/;"	s
CSphAttrOverride	sphinx.h	/^class CSphAttrOverride$/;"	c
CSphAttrUpdate	sphinx.h	/^struct CSphAttrUpdate$/;"	s
CSphAttrUpdateEx	sphinx.h	/^	CSphAttrUpdateEx()$/;"	f	struct:CSphAttrUpdateEx
CSphAttrUpdateEx	sphinx.h	/^struct CSphAttrUpdateEx$/;"	s
CSphAutoArray	sphinx.cpp	/^	explicit	CSphAutoArray ( int iCount )$/;"	f	class:CSphAutoArray
CSphAutoArray	sphinx.cpp	/^template < typename T > class CSphAutoArray$/;"	c	file:
CSphAutofile	sphinx.cpp	/^CSphAutofile::CSphAutofile ( const CSphString & sName, int iMode, CSphString & sError, bool bTemp )$/;"	f	class:CSphAutofile
CSphAutofile	sphinx.cpp	/^CSphAutofile::CSphAutofile ()$/;"	f	class:CSphAutofile
CSphAutofile	sphinxint.h	/^class CSphAutofile : ISphNoncopyable$/;"	c
CSphAutoreader	sphinxint.h	/^				CSphAutoreader ( BYTE * pBuf=NULL, int iSize=0 ) : CSphReader ( pBuf, iSize ) {}$/;"	f	class:CSphAutoreader
CSphAutoreader	sphinxint.h	/^class CSphAutoreader : public CSphReader$/;"	c
CSphBin	sphinx.cpp	/^CSphBin::CSphBin ( ESphHitless eMode, bool bWordDict )$/;"	f	class:CSphBin
CSphBin	sphinx.cpp	/^struct CSphBin$/;"	s	file:
CSphBitvec	sphinxstd.h	/^	CSphBitvec ()$/;"	f	class:CSphBitvec
CSphBitvec	sphinxstd.h	/^class CSphBitvec$/;"	c
CSphBuildHitsState_t	sphinx.cpp	/^CSphSource_Document::CSphBuildHitsState_t::CSphBuildHitsState_t ()$/;"	f	class:CSphSource_Document::CSphBuildHitsState_t
CSphBuildHitsState_t	sphinx.h	/^	struct CSphBuildHitsState_t$/;"	s	class:CSphSource_Document
CSphCharsetDefinitionParser	sphinx.cpp	/^						CSphCharsetDefinitionParser () : m_bError ( false ) {}$/;"	f	class:CSphCharsetDefinitionParser
CSphCharsetDefinitionParser	sphinx.cpp	/^class CSphCharsetDefinitionParser$/;"	c	file:
CSphColumnInfo	sphinx.h	/^	CSphColumnInfo ( const char * sName=NULL, ESphAttr eType=SPH_ATTR_NONE )$/;"	f	struct:CSphColumnInfo
CSphColumnInfo	sphinx.h	/^struct CSphColumnInfo$/;"	s
CSphConfig	sphinxutils.h	/^typedef SmallStringHash_T < CSphConfigType >	CSphConfig;$/;"	t
CSphConfigParser	sphinxutils.cpp	/^CSphConfigParser::CSphConfigParser ()$/;"	f	class:CSphConfigParser
CSphConfigParser	sphinxutils.h	/^class CSphConfigParser$/;"	c
CSphConfigSection	sphinxutils.h	/^class CSphConfigSection : public SmallStringHash_T < CSphVariant >$/;"	c
CSphConfigType	sphinxutils.h	/^typedef SmallStringHash_T < CSphConfigSection >	CSphConfigType;$/;"	t
CSphDict	sphinx.h	/^struct CSphDict$/;"	s
CSphDictCRC	sphinx.cpp	/^struct CSphDictCRC : public CSphDictCRCTraits$/;"	s	file:
CSphDictCRCTraits	sphinx.cpp	/^CSphDictCRCTraits::CSphDictCRCTraits ()$/;"	f	class:CSphDictCRCTraits
CSphDictCRCTraits	sphinx.cpp	/^struct CSphDictCRCTraits : CSphDict$/;"	s	file:
CSphDictExact	sphinxint.h	/^	explicit CSphDictExact ( CSphDict * pDict ) : CSphDictTraits ( pDict ) {}$/;"	f	class:CSphDictExact
CSphDictExact	sphinxint.h	/^class CSphDictExact : public CSphDictTraits$/;"	c
CSphDictKeywords	sphinx.cpp	/^CSphDictKeywords::CSphDictKeywords ()$/;"	f	class:CSphDictKeywords
CSphDictKeywords	sphinx.cpp	/^class CSphDictKeywords : public CSphDictCRC<true>$/;"	c	file:
CSphDictReader	sphinx.cpp	/^	CSphDictReader()$/;"	f	class:CSphDictReader
CSphDictReader	sphinx.cpp	/^class CSphDictReader$/;"	c	file:
CSphDictSettings	sphinx.h	/^	CSphDictSettings ()$/;"	f	struct:CSphDictSettings
CSphDictSettings	sphinx.h	/^struct CSphDictSettings$/;"	s
CSphDictStar	sphinxint.h	/^	explicit			CSphDictStar ( CSphDict * pDict ) : CSphDictTraits ( pDict ) {}$/;"	f	class:CSphDictStar
CSphDictStar	sphinxint.h	/^class CSphDictStar : public CSphDictTraits$/;"	c
CSphDictStarV8	sphinx.cpp	/^CSphDictStarV8::CSphDictStarV8 ( CSphDict * pDict, bool bPrefixes, bool bInfixes )$/;"	f	class:CSphDictStarV8
CSphDictStarV8	sphinxint.h	/^class CSphDictStarV8 : public CSphDictStar$/;"	c
CSphDictTraits	sphinxint.h	/^	explicit			CSphDictTraits ( CSphDict * pDict ) : m_pDict ( pDict ) { assert ( m_pDict ); }$/;"	f	class:CSphDictTraits
CSphDictTraits	sphinxint.h	/^class CSphDictTraits : public CSphDict$/;"	c
CSphDocMVA	sphinxint.h	/^	explicit CSphDocMVA ( int iSize )$/;"	f	struct:CSphDocMVA
CSphDocMVA	sphinxint.h	/^struct CSphDocMVA$/;"	s
CSphEasyTimer	sphinx.cpp	/^	explicit CSphEasyTimer ( ESphTimer eTimer )$/;"	f	class:CSphEasyTimer
CSphEasyTimer	sphinx.cpp	/^class CSphEasyTimer$/;"	c	file:
CSphFilterSettings	sphinx.cpp	/^CSphFilterSettings::CSphFilterSettings ( const CSphFilterSettings & rhs )$/;"	f	class:CSphFilterSettings
CSphFilterSettings	sphinx.cpp	/^CSphFilterSettings::CSphFilterSettings ()$/;"	f	class:CSphFilterSettings
CSphFilterSettings	sphinx.h	/^class CSphFilterSettings$/;"	c
CSphFixedHash	sphinxsort.cpp	/^	explicit CSphFixedHash ( int iLength )$/;"	f	class:CSphFixedHash
CSphFixedHash	sphinxsort.cpp	/^class CSphFixedHash : ISphNoncopyable$/;"	c	file:
CSphFixedVector	sphinxstd.h	/^	explicit CSphFixedVector ( int iSize )$/;"	f	class:CSphFixedVector
CSphFixedVector	sphinxstd.h	/^class CSphFixedVector : public ISphNoncopyable$/;"	c
CSphGroupSorterSettings	sphinxsort.cpp	/^	CSphGroupSorterSettings ()$/;"	f	struct:CSphGroupSorterSettings
CSphGroupSorterSettings	sphinxsort.cpp	/^struct CSphGroupSorterSettings$/;"	s	file:
CSphGrouper	sphinxsort.cpp	/^class CSphGrouper$/;"	c	file:
CSphGrouperString	sphinxsort.cpp	/^	explicit CSphGrouperString ( const CSphAttrLocator & tLoc )$/;"	f	class:CSphGrouperString
CSphGrouperString	sphinxsort.cpp	/^class CSphGrouperString : public CSphGrouperAttr, public PRED$/;"	c	file:
CSphHTMLStripper	sphinx.cpp	/^CSphHTMLStripper::CSphHTMLStripper ( bool bDefaultTags )$/;"	f	class:CSphHTMLStripper
CSphHTMLStripper	sphinx.h	/^class CSphHTMLStripper$/;"	c
CSphHitMarker	sphinxsearch.h	/^							CSphHitMarker() : m_pRoot ( NULL ) {}$/;"	f	class:CSphHitMarker
CSphHitMarker	sphinxsearch.h	/^class CSphHitMarker$/;"	c
CSphHitQueue	sphinx.cpp	/^	explicit CSphHitQueue ( int iSize )$/;"	f	struct:CSphHitQueue
CSphHitQueue	sphinx.cpp	/^struct CSphHitQueue$/;"	s	file:
CSphHitQueueEntry	sphinx.cpp	/^struct CSphHitQueueEntry : public CSphAggregateHit$/;"	s	file:
CSphIOStats	sphinx.cpp	/^CSphIOStats::CSphIOStats ()$/;"	f	class:CSphIOStats
CSphIOStats	sphinx.h	/^class CSphIOStats$/;"	c
CSphIndex	sphinx.cpp	/^CSphIndex::CSphIndex ( const char * sIndexName, const char * sFilename )$/;"	f	class:CSphIndex
CSphIndex	sphinx.h	/^class CSphIndex$/;"	c
CSphIndexProgress	sphinx.h	/^	CSphIndexProgress ()$/;"	f	struct:CSphIndexProgress
CSphIndexProgress	sphinx.h	/^struct CSphIndexProgress$/;"	s
CSphIndexSettings	sphinx.cpp	/^CSphIndexSettings::CSphIndexSettings ()$/;"	f	class:CSphIndexSettings
CSphIndexSettings	sphinx.h	/^struct CSphIndexSettings : public CSphSourceSettings$/;"	s
CSphIndex_VLN	sphinx.cpp	/^CSphIndex_VLN::CSphIndex_VLN ( const char* sIndexName, const char * sFilename )$/;"	f	class:CSphIndex_VLN
CSphIndex_VLN	sphinx.cpp	/^class CSphIndex_VLN : public CSphIndex$/;"	c	file:
CSphJoinedField	sphinx.h	/^struct CSphJoinedField$/;"	s
CSphKBufferGroupSorter	sphinxsort.cpp	/^	CSphKBufferGroupSorter ( const ISphMatchComparator * pComp, const CSphQuery * pQuery, const CSphGroupSorterSettings & tSettings ) \/\/ FIXME! make k configurable$/;"	f	class:CSphKBufferGroupSorter
CSphKBufferGroupSorter	sphinxsort.cpp	/^class CSphKBufferGroupSorter : public CSphMatchQueueTraits$/;"	c	file:
CSphKBufferMVAGroupSorter	sphinxsort.cpp	/^	CSphKBufferMVAGroupSorter ( const ISphMatchComparator * pComp, const CSphQuery * pQuery, const CSphGroupSorterSettings & tSettings )$/;"	f	class:CSphKBufferMVAGroupSorter
CSphKBufferMVAGroupSorter	sphinxsort.cpp	/^class CSphKBufferMVAGroupSorter : public CSphKBufferGroupSorter < COMPGROUP, DISTINCT >$/;"	c	file:
CSphKeywordDeltaWriter	sphinxint.h	/^	CSphKeywordDeltaWriter ()$/;"	f	class:CSphKeywordDeltaWriter
CSphKeywordDeltaWriter	sphinxint.h	/^class CSphKeywordDeltaWriter$/;"	c
CSphKeywordInfo	sphinx.h	/^struct CSphKeywordInfo$/;"	s
CSphLowercaser	sphinx.cpp	/^CSphLowercaser::CSphLowercaser ()$/;"	f	class:CSphLowercaser
CSphLowercaser	sphinx.h	/^class CSphLowercaser$/;"	c
CSphMTFHash	indexer.cpp	/^	CSphMTFHash ()$/;"	f	class:CSphMTFHash
CSphMTFHash	indexer.cpp	/^template < typename T, int SIZE, class HASHFUNC > class CSphMTFHash$/;"	c	file:
CSphMTFHashEntry	indexer.cpp	/^template < typename T > struct CSphMTFHashEntry$/;"	s	file:
CSphMatch	sphinx.h	/^	CSphMatch ( const CSphMatch & rhs )$/;"	f	class:CSphMatch
CSphMatch	sphinx.h	/^	CSphMatch ()$/;"	f	class:CSphMatch
CSphMatch	sphinx.h	/^class CSphMatch$/;"	c
CSphMatchComparatorState	sphinx.h	/^	CSphMatchComparatorState ()$/;"	f	struct:CSphMatchComparatorState
CSphMatchComparatorState	sphinx.h	/^struct CSphMatchComparatorState$/;"	s
CSphMatchQueue	sphinxsort.cpp	/^	CSphMatchQueue ( int iSize, bool bUsesAttrs )$/;"	f	class:CSphMatchQueue
CSphMatchQueue	sphinxsort.cpp	/^template < typename COMP > class CSphMatchQueue : public CSphMatchQueueTraits$/;"	c	file:
CSphMatchQueueTraits	sphinxsort.cpp	/^	CSphMatchQueueTraits ( int iSize, bool bUsesAttrs )$/;"	f	class:CSphMatchQueueTraits
CSphMatchQueueTraits	sphinxsort.cpp	/^class CSphMatchQueueTraits : public ISphMatchSorter, ISphNoncopyable$/;"	c	file:
CSphMatchVariant	searchd.cpp	/^class CSphMatchVariant : public CSphMatch$/;"	c	file:
CSphMemHeader	sphinxstd.cpp	/^struct CSphMemHeader$/;"	s	file:
CSphMerger	sphinx.cpp	/^	explicit CSphMerger ( CSphIndex_VLN * pOutputIndex )$/;"	f	class:CSphMerger
CSphMerger	sphinx.cpp	/^class CSphMerger$/;"	c	file:
CSphMultiform	sphinx.cpp	/^struct CSphMultiform$/;"	s	file:
CSphMultiformContainer	sphinx.cpp	/^							CSphMultiformContainer () : m_iMaxTokens ( 0 ) {}$/;"	f	struct:CSphMultiformContainer
CSphMultiformContainer	sphinx.cpp	/^struct CSphMultiformContainer$/;"	s	file:
CSphMultiformHash	sphinx.cpp	/^	typedef CSphOrderedHash < CSphMultiforms *, CSphString, CSphStrHashFunc, 131072 > CSphMultiformHash;$/;"	t	struct:CSphMultiformContainer	file:
CSphMultiforms	sphinx.cpp	/^struct CSphMultiforms$/;"	s	file:
CSphMutex	sphinxstd.h	/^	CSphMutex () : m_bInitialized ( false ) {}$/;"	f	class:CSphMutex
CSphMutex	sphinxstd.h	/^class CSphMutex$/;"	c
CSphNamedInt	sphinx.h	/^	CSphNamedInt () : m_iValue ( 0 ) {}$/;"	f	struct:CSphNamedInt
CSphNamedInt	sphinx.h	/^struct CSphNamedInt$/;"	s
CSphOrderedHash	sphinxstd.h	/^	CSphOrderedHash ()$/;"	f	class:CSphOrderedHash
CSphOrderedHash	sphinxstd.h	/^	CSphOrderedHash<T,KEY,HASHFUNC,LENGTH> ( const CSphOrderedHash<T,KEY,HASHFUNC,LENGTH> & rhs )$/;"	f	class:CSphOrderedHash
CSphOrderedHash	sphinxstd.h	/^class CSphOrderedHash$/;"	c
CSphProcessSharedMutex	sphinxstd.h	/^class CSphProcessSharedMutex$/;"	c
CSphProcessSharedVariable	sphinxstd.h	/^	explicit CSphProcessSharedVariable ( const T& tInitValue )$/;"	f	class:CSphProcessSharedVariable
CSphProcessSharedVariable	sphinxstd.h	/^template < typename T > class CSphProcessSharedVariable : protected CSphProcessSharedMutex, public ISphNoncopyable$/;"	c
CSphQuery	sphinx.cpp	/^CSphQuery::CSphQuery ()$/;"	f	class:CSphQuery
CSphQuery	sphinx.h	/^class CSphQuery$/;"	c
CSphQueryContext	sphinx.cpp	/^CSphQueryContext::CSphQueryContext ()$/;"	f	class:CSphQueryContext
CSphQueryContext	sphinxint.h	/^class CSphQueryContext$/;"	c
CSphQueryItem	sphinx.h	/^	CSphQueryItem() : m_eAggrFunc ( SPH_AGGR_NONE ) {}$/;"	f	struct:CSphQueryItem
CSphQueryItem	sphinx.h	/^struct CSphQueryItem$/;"	s
CSphQueryNodeCache	sphinxsearch.cpp	/^CSphQueryNodeCache::CSphQueryNodeCache ( int iCells, int iMaxCachedDocs, int iMaxCachedHits )$/;"	f	class:CSphQueryNodeCache
CSphQueryNodeCache	sphinxsearch.h	/^class CSphQueryNodeCache$/;"	c
CSphQueryResult	sphinx.cpp	/^CSphQueryResult::CSphQueryResult ()$/;"	f	class:CSphQueryResult
CSphQueryResult	sphinx.h	/^class CSphQueryResult : public CSphQueryResultMeta$/;"	c
CSphQueryResultMeta	sphinx.cpp	/^CSphQueryResultMeta::CSphQueryResultMeta ( const CSphQueryResultMeta & tMeta )$/;"	f	class:CSphQueryResultMeta
CSphQueryResultMeta	sphinx.cpp	/^CSphQueryResultMeta::CSphQueryResultMeta ()$/;"	f	class:CSphQueryResultMeta
CSphQueryResultMeta	sphinx.h	/^class CSphQueryResultMeta$/;"	c
CSphQueue	sphinx.cpp	/^	explicit CSphQueue ( int iSize )$/;"	f	class:CSphQueue
CSphQueue	sphinx.cpp	/^template < typename T, typename COMP > class CSphQueue$/;"	c	file:
CSphReader	sphinx.cpp	/^CSphReader::CSphReader ( BYTE * pBuf, int iSize )$/;"	f	class:CSphReader
CSphReader	sphinxint.h	/^class CSphReader$/;"	c
CSphRefcountedPtr	sphinxstd.h	/^	explicit		CSphRefcountedPtr ( T * pPtr )	{ m_pPtr = pPtr; }	\/\/\/< construction from raw pointer, takes over ownership!$/;"	f	class:CSphRefcountedPtr
CSphRefcountedPtr	sphinxstd.h	/^	explicit		CSphRefcountedPtr ()			{ m_pPtr = NULL; }	\/\/\/< default NULL wrapper construction (for vectors)$/;"	f	class:CSphRefcountedPtr
CSphRefcountedPtr	sphinxstd.h	/^class CSphRefcountedPtr$/;"	c
CSphRemapRange	sphinx.h	/^	CSphRemapRange ( int iStart, int iEnd, int iRemapStart )$/;"	f	struct:CSphRemapRange
CSphRemapRange	sphinx.h	/^	CSphRemapRange ()$/;"	f	struct:CSphRemapRange
CSphRemapRange	sphinx.h	/^struct CSphRemapRange$/;"	s
CSphRowitem	sphinx.h	/^typedef DWORD			CSphRowitem;$/;"	t
CSphRwlock	sphinxstd.h	/^class CSphRwlock : public ISphNoncopyable$/;"	c
CSphSavedFile	sphinx.cpp	/^CSphSavedFile::CSphSavedFile ()$/;"	f	class:CSphSavedFile
CSphSavedFile	sphinx.h	/^struct CSphSavedFile$/;"	s
CSphSchema	sphinx.h	/^	explicit				CSphSchema ( const char * sName="(nameless)" ) : m_sName ( sName ), m_iStaticSize ( 0 ) {}$/;"	f	struct:CSphSchema
CSphSchema	sphinx.h	/^struct CSphSchema$/;"	s
CSphSchemaMT	searchd.cpp	/^	explicit				CSphSchemaMT ( const char * sName="(nameless)" ) : CSphSchema ( sName ), m_pLock ( NULL )$/;"	f	class:CSphSchemaMT
CSphSchemaMT	searchd.cpp	/^class CSphSchemaMT : public CSphSchema$/;"	c	file:
CSphScopedLock	sphinxstd.h	/^	explicit CSphScopedLock ( T & tMutex )$/;"	f	class:CSphScopedLock
CSphScopedLock	sphinxstd.h	/^class CSphScopedLock : ISphNoncopyable$/;"	c
CSphScopedPtr	sphinxstd.h	/^	explicit		CSphScopedPtr ( T * pPtr )	{ m_pPtr = pPtr; }$/;"	f	class:CSphScopedPtr
CSphScopedPtr	sphinxstd.h	/^class CSphScopedPtr : public ISphNoncopyable$/;"	c
CSphSharedBuffer	sphinxstd.h	/^	CSphSharedBuffer ()$/;"	f	class:CSphSharedBuffer
CSphSharedBuffer	sphinxstd.h	/^template < typename T > class CSphSharedBuffer$/;"	c
CSphSmallBitvec	sphinxstd.h	/^class CSphSmallBitvec$/;"	c
CSphSource	sphinx.cpp	/^CSphSource::CSphSource ( const char * sName )$/;"	f	class:CSphSource
CSphSource	sphinx.h	/^class CSphSource : public CSphSourceSettings$/;"	c
CSphSourceParams_MySQL	sphinx.cpp	/^CSphSourceParams_MySQL::CSphSourceParams_MySQL ()$/;"	f	class:CSphSourceParams_MySQL
CSphSourceParams_MySQL	sphinx.h	/^struct CSphSourceParams_MySQL : CSphSourceParams_SQL$/;"	s
CSphSourceParams_ODBC	sphinx.cpp	/^CSphSourceParams_ODBC::CSphSourceParams_ODBC ()$/;"	f	class:CSphSourceParams_ODBC
CSphSourceParams_ODBC	sphinx.h	/^struct CSphSourceParams_ODBC: CSphSourceParams_SQL$/;"	s
CSphSourceParams_PgSQL	sphinx.cpp	/^CSphSourceParams_PgSQL::CSphSourceParams_PgSQL ()$/;"	f	class:CSphSourceParams_PgSQL
CSphSourceParams_PgSQL	sphinx.h	/^struct CSphSourceParams_PgSQL : CSphSourceParams_SQL$/;"	s
CSphSourceParams_SQL	sphinx.cpp	/^CSphSourceParams_SQL::CSphSourceParams_SQL ()$/;"	f	class:CSphSourceParams_SQL
CSphSourceParams_SQL	sphinx.h	/^struct CSphSourceParams_SQL$/;"	s
CSphSourceSettings	sphinx.cpp	/^CSphSourceSettings::CSphSourceSettings ()$/;"	f	class:CSphSourceSettings
CSphSourceSettings	sphinx.h	/^struct CSphSourceSettings$/;"	s
CSphSourceStats	sphinx.h	/^	CSphSourceStats ()$/;"	f	struct:CSphSourceStats
CSphSourceStats	sphinx.h	/^struct CSphSourceStats$/;"	s
CSphSource_Document	sphinx.cpp	/^CSphSource_Document::CSphSource_Document ( const char * sName )$/;"	f	class:CSphSource_Document
CSphSource_Document	sphinx.h	/^class CSphSource_Document : public CSphSource$/;"	c
CSphSource_MSSQL	sphinx.h	/^	explicit				CSphSource_MSSQL ( const char * sName ) : CSphSource_ODBC ( sName ) {}$/;"	f	struct:CSphSource_MSSQL
CSphSource_MSSQL	sphinx.h	/^struct CSphSource_MSSQL : public CSphSource_ODBC$/;"	s
CSphSource_MySQL	sphinx.cpp	/^CSphSource_MySQL::CSphSource_MySQL ( const char * sName )$/;"	f	class:CSphSource_MySQL
CSphSource_MySQL	sphinx.h	/^struct CSphSource_MySQL : CSphSource_SQL$/;"	s
CSphSource_ODBC	sphinx.cpp	/^CSphSource_ODBC::CSphSource_ODBC ( const char * sName )$/;"	f	class:CSphSource_ODBC
CSphSource_ODBC	sphinx.h	/^struct CSphSource_ODBC : CSphSource_SQL$/;"	s
CSphSource_PgSQL	sphinx.cpp	/^CSphSource_PgSQL::CSphSource_PgSQL ( const char * sName )$/;"	f	class:CSphSource_PgSQL
CSphSource_PgSQL	sphinx.h	/^struct CSphSource_PgSQL : CSphSource_SQL$/;"	s
CSphSource_SQL	sphinx.cpp	/^CSphSource_SQL::CSphSource_SQL ( const char * sName )$/;"	f	class:CSphSource_SQL
CSphSource_SQL	sphinx.h	/^struct CSphSource_SQL : CSphSource_Document$/;"	s
CSphSource_XMLPipe	sphinx.cpp	/^CSphSource_XMLPipe::CSphSource_XMLPipe ( BYTE * dInitialBuf, int iBufLen, const char * sName )$/;"	f	class:CSphSource_XMLPipe
CSphSource_XMLPipe	sphinx.h	/^class CSphSource_XMLPipe : public CSphSource$/;"	c
CSphSource_XMLPipe2	sphinx.cpp	/^CSphSource_XMLPipe2::CSphSource_XMLPipe2 ( BYTE * dInitialBuf, int iBufLen, const char * sName, int iFieldBufferMax, bool bFixupUTF8 )$/;"	f	class:CSphSource_XMLPipe2
CSphSource_XMLPipe2	sphinx.cpp	/^class CSphSource_XMLPipe2 : public CSphSource_Document$/;"	c	file:
CSphStaticMutex	sphinxstd.h	/^	CSphStaticMutex()$/;"	f	class:CSphStaticMutex
CSphStaticMutex	sphinxstd.h	/^class CSphStaticMutex : private CSphMutex$/;"	c
CSphStopwordBuilderDict	indexer.cpp	/^						CSphStopwordBuilderDict () {}$/;"	f	class:CSphStopwordBuilderDict
CSphStopwordBuilderDict	indexer.cpp	/^class CSphStopwordBuilderDict : public CSphDict$/;"	c	file:
CSphStrHashFunc	sphinxstd.h	/^struct CSphStrHashFunc$/;"	s
CSphString	sphinxstd.h	/^	CSphString ( const CSphString & rhs )$/;"	f	struct:CSphString
CSphString	sphinxstd.h	/^	CSphString ( const char * sString ) \/\/ NOLINT$/;"	f	struct:CSphString
CSphString	sphinxstd.h	/^	CSphString ()$/;"	f	struct:CSphString
CSphString	sphinxstd.h	/^struct CSphString$/;"	s
CSphStringBuilder	sphinxstd.h	/^	CSphStringBuilder ()$/;"	f	class:CSphStringBuilder
CSphStringBuilder	sphinxstd.h	/^class CSphStringBuilder$/;"	c
CSphSwapVector	sphinxstd.h	/^class CSphSwapVector : public CSphVector < T, CSphSwapVectorPolicy<T> >$/;"	c
CSphSwapVectorPolicy	sphinxstd.h	/^class CSphSwapVectorPolicy : public CSphVectorPolicy<T>$/;"	c
CSphSynonym	sphinx.cpp	/^struct CSphSynonym$/;"	s	file:
CSphTightVector	sphinxstd.h	/^class CSphTightVector : public CSphVector < T, CSphTightVectorPolicy<T> >$/;"	c
CSphTightVectorPolicy	sphinxstd.h	/^class CSphTightVectorPolicy : public CSphVectorPolicy<T>$/;"	c
CSphTimer	sphinx.cpp	/^	CSphTimer ()$/;"	f	struct:CSphTimer
CSphTimer	sphinx.cpp	/^struct CSphTimer$/;"	s	file:
CSphTokenizerSettings	sphinx.cpp	/^CSphTokenizerSettings::CSphTokenizerSettings ()$/;"	f	class:CSphTokenizerSettings
CSphTokenizerSettings	sphinx.h	/^struct CSphTokenizerSettings$/;"	s
CSphTokenizerTraits	sphinx.cpp	/^CSphTokenizerTraits<IS_UTF8>::CSphTokenizerTraits ()$/;"	f	class:CSphTokenizerTraits
CSphTokenizerTraits	sphinx.cpp	/^class CSphTokenizerTraits : public ISphTokenizer$/;"	c	file:
CSphTokenizer_Filter	sphinx.cpp	/^CSphTokenizer_Filter::CSphTokenizer_Filter ( ISphTokenizer * pTokenizer, const CSphMultiformContainer * pContainer )$/;"	f	class:CSphTokenizer_Filter
CSphTokenizer_Filter	sphinx.cpp	/^class CSphTokenizer_Filter : public ISphTokenizer$/;"	c	file:
CSphTokenizer_SBCS	sphinx.cpp	/^CSphTokenizer_SBCS::CSphTokenizer_SBCS ()$/;"	f	class:CSphTokenizer_SBCS
CSphTokenizer_SBCS	sphinx.cpp	/^class CSphTokenizer_SBCS : public CSphTokenizerTraits<false>$/;"	c	file:
CSphTokenizer_UTF8	sphinx.cpp	/^CSphTokenizer_UTF8::CSphTokenizer_UTF8 ()$/;"	f	class:CSphTokenizer_UTF8
CSphTokenizer_UTF8	sphinx.cpp	/^class CSphTokenizer_UTF8 : public CSphTokenizerTraits<true>$/;"	c	file:
CSphTokenizer_UTF8Ngram	sphinx.cpp	/^						CSphTokenizer_UTF8Ngram () : m_iNgramLen ( 1 ) {}$/;"	f	class:CSphTokenizer_UTF8Ngram
CSphTokenizer_UTF8Ngram	sphinx.cpp	/^class CSphTokenizer_UTF8Ngram : public CSphTokenizer_UTF8$/;"	c	file:
CSphUniqounter	sphinxsort.cpp	/^					CSphUniqounter () : m_iCountPos ( 0 ), m_bSorted ( true ) { Reserve ( 16384 ); }$/;"	f	class:CSphUniqounter
CSphUniqounter	sphinxsort.cpp	/^class CSphUniqounter : public CSphVector<SphGroupedValue_t>$/;"	c	file:
CSphUnpackInfo	sphinx.h	/^struct CSphUnpackInfo$/;"	s
CSphUpdateQueue	sphinxsort.cpp	/^	CSphUpdateQueue ( int iSize, CSphAttrUpdateEx* pUpdate )$/;"	f	class:CSphUpdateQueue
CSphUpdateQueue	sphinxsort.cpp	/^class CSphUpdateQueue : public CSphMatchQueueTraits$/;"	c	file:
CSphVariant	sphinxstd.h	/^	CSphVariant ( const CSphVariant & rhs )$/;"	f	struct:CSphVariant
CSphVariant	sphinxstd.h	/^	CSphVariant ( const char * sString ) \/\/ NOLINT desired implicit conversion$/;"	f	struct:CSphVariant
CSphVariant	sphinxstd.h	/^	CSphVariant ()$/;"	f	struct:CSphVariant
CSphVariant	sphinxstd.h	/^struct CSphVariant : public CSphString$/;"	s
CSphVector	sphinxstd.h	/^	CSphVector ( const CSphVector<T> & rhs )$/;"	f	class:CSphVector
CSphVector	sphinxstd.h	/^	CSphVector ( int iCount )$/;"	f	class:CSphVector
CSphVector	sphinxstd.h	/^	CSphVector ()$/;"	f	class:CSphVector
CSphVector	sphinxstd.h	/^template < typename T, typename POLICY=CSphVectorPolicy<T> > class CSphVector$/;"	c
CSphVectorPolicy	sphinxstd.h	/^class CSphVectorPolicy$/;"	c
CSphWordHit	sphinx.h	/^struct CSphWordHit$/;"	s
CSphWordlistCheckpoint	sphinx.cpp	/^struct CSphWordlistCheckpoint$/;"	s	file:
CSphWordlistCheckpoint_v10	sphinx.cpp	/^struct CSphWordlistCheckpoint_v10$/;"	s	file:
CSphWriter	sphinx.cpp	/^CSphWriter::CSphWriter ()$/;"	f	class:CSphWriter
CSphWriter	sphinxint.h	/^class CSphWriter : ISphNoncopyable$/;"	c
CSphinxqlSession	searchd.cpp	/^	explicit CSphinxqlSession ( CSphString & sError ) :$/;"	f	class:CSphinxqlSession
CSphinxqlSession	searchd.cpp	/^class CSphinxqlSession : public ISphNoncopyable$/;"	c	file:
CSubtreeHash	sphinxquery.cpp	/^typedef CSphOrderedHash < MarkedNode_t, uint64_t, IdentityHash_fn, 128 > CSubtreeHash;$/;"	t	file:
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CVirtualSchema	searchd.cpp	/^class CVirtualSchema : public CSphSchema$/;"	c	file:
CWordlist	sphinx.cpp	/^CWordlist::CWordlist ()$/;"	f	class:CWordlist
CWordlist	sphinx.cpp	/^class CWordlist : public ISphWordlist$/;"	c	file:
CXX	Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -g -D_FILE_OFFSET_BITS=64 -O0 -DNDEBUG$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
CalcAvg	sphinxsort.cpp	/^	void CalcAvg ( bool bGroup )$/;"	f	class:CSphKBufferGroupSorter
CalcBinSize	sphinx.cpp	/^int CSphBin::CalcBinSize ( int iMemoryLimit, int iBlocks, const char * sPhase, bool bWarn )$/;"	f	class:CSphBin
CalcCommonNodes	sphinxquery.cpp	/^	bool CalcCommonNodes ()$/;"	f	class:RevealCommon_t	file:
CalcContextItems	sphinx.cpp	/^static inline void CalcContextItems ( CSphMatch & tMatch, const CSphVector<CSphQueryContext::CalcItem_t> & dItems )$/;"	f	file:
CalcDupeMask	sphinxsearch.cpp	/^static DWORD CalcDupeMask ( const CSphVector<ISphQword *> & dQwordsHit )$/;"	f	file:
CalcDupeMask	sphinxsearch.cpp	/^static DWORD CalcDupeMask ( const CSphVector<XQNode_t *> & dChildren )$/;"	f	file:
CalcFilter	sphinx.cpp	/^void CSphQueryContext::CalcFilter ( CSphMatch & tMatch ) const$/;"	f	class:CSphQueryContext
CalcFinal	sphinx.cpp	/^void CSphQueryContext::CalcFinal ( CSphMatch & tMatch ) const$/;"	f	class:CSphQueryContext
CalcGeodist	sphinxexpr.cpp	/^static inline float CalcGeodist ( float fPointLat, float fPointLon, float fAnchorLat, float fAnchorLon )$/;"	f	file:
CalcIntersections	sphinxquery.cpp	/^	void CalcIntersections ()$/;"	f	class:RevealCommon_t	file:
CalcItem_t	sphinxint.h	/^	struct CalcItem_t$/;"	s	class:CSphQueryContext
CalcPassageWeight	sphinxexcerpt.cpp	/^void ExcerptGen_c::CalcPassageWeight ( Passage_t & tPass, const TokenSpan_t & tSpan, int iMaxWords, int iWordCountCoeff )$/;"	f	class:ExcerptGen_c
CalcQueryLen	searchd.cpp	/^int SearchRequestBuilder_t::CalcQueryLen ( const char * sIndexes, const CSphQuery & q ) const$/;"	f	class:SearchRequestBuilder_t
CalcResultLength	searchd.cpp	/^int CalcResultLength ( int iVer, const CSphQueryResult * pRes, const CSphVector<PoolPtrs_t> & dTag2Pools, bool bExtendedStat )$/;"	f
CalcRowitem	sphinx.h	/^	int CalcRowitem () const$/;"	f	struct:CSphAttrLocator
CalcSort	sphinx.cpp	/^void CSphQueryContext::CalcSort ( CSphMatch & tMatch ) const$/;"	f	class:CSphQueryContext
CanMulti	sphinxsort.cpp	/^	virtual bool			CanMulti () const { return true; }$/;"	f	class:CSphGrouper
CanMulti	sphinxsort.cpp	/^	virtual bool CanMulti () const { return false; }$/;"	f	class:CSphGrouperString
CanMulti	sphinxsort.cpp	/^	virtual bool CanMulti () const$/;"	f	class:CSphKBufferGroupSorter
CanMulti	sphinxsort.cpp	/^	virtual bool CanMulti () const$/;"	f	class:CSphMatchQueueTraits
Category_e	sphinxint.h	/^	enum Category_e$/;"	g	namespace:Memory
Characters	sphinx.cpp	/^void CSphSource_XMLPipe2::Characters ( const char * pCharacters, int iLen )$/;"	f	class:CSphSource_XMLPipe2
Check	sphinxquery.h	/^	void Check ( bool bRoot )$/;"	f	struct:XQNode_t
CheckChildrenHup	searchd.cpp	/^static void CheckChildrenHup ()$/;"	f	file:
CheckCommandVersion	searchd.cpp	/^bool CheckCommandVersion ( int iVer, int iDaemonVersion, InputBuffer_c & tReq )$/;"	f
CheckConfigChanges	searchd.cpp	/^bool CheckConfigChanges ()$/;"	f
CheckCrosses	spelldump.cpp	/^bool CISpellAffix::CheckCrosses () const$/;"	f	class:CISpellAffix
CheckDelete	searchd.cpp	/^void CheckDelete ()$/;"	f
CheckEnter	sphinxsearch.cpp	/^	void CheckEnter ( int iID )$/;"	f	class:ExprRankerHook_c
CheckEof	sphinx.cpp	/^bool CSphCharsetDefinitionParser::CheckEof ()$/;"	f	class:CSphCharsetDefinitionParser
CheckExit	sphinxsearch.cpp	/^	void CheckExit ( int iID )$/;"	f	class:ExprRankerHook_c
CheckExtendedQuery	sphinxsearch.cpp	/^static void CheckExtendedQuery ( const XQNode_t * pNode, CSphQueryResult * pResult, const CSphIndexSettings & tSettings, bool bStar )$/;"	f	file:
CheckFileField	sphinx.cpp	/^bool CSphSource_Document::CheckFileField ( const BYTE * sField )$/;"	f	class:CSphSource_Document
CheckFlush	searchd.cpp	/^void CheckFlush ()$/;"	f
CheckForConstSet	sphinxexpr.cpp	/^bool ExprParser_t::CheckForConstSet ( int iArgsNode, int iSkip )$/;"	f	class:ExprParser_t
CheckFreelists	sphinx.cpp	/^	inline void				CheckFreelists () {}$/;"	f	class:CSphArena
CheckFreelists	sphinx.cpp	/^void CSphArena::CheckFreelists ()$/;"	f	class:CSphArena
CheckHitsCount	sphinx.cpp	/^void CSphSource_XMLPipe::CheckHitsCount ( const char * sField )$/;"	f	class:CSphSource_XMLPipe
CheckIndex	searchd.cpp	/^bool CheckIndex ( const CSphIndex * pIndex, CSphString & sError )$/;"	f
CheckInsertIntegrity	searchd.cpp	/^	bool CheckInsertIntegrity()$/;"	f	struct:SqlStmt_t
CheckLeaks	searchd.cpp	/^void CheckLeaks ()$/;"	f
CheckPipes	searchd.cpp	/^void CheckPipes ()$/;"	f
CheckPort	searchd.cpp	/^void CheckPort ( int iPort )$/;"	f
CheckPrefix	spelldump.cpp	/^bool CISpellAffixRule::CheckPrefix ( const CSphString & sWord ) const$/;"	f	class:CISpellAffixRule
CheckQuery	searchd.cpp	/^void CheckQuery ( const CSphQuery & tQuery, CSphString & sError )$/;"	f
CheckQueryWord	sphinxsearch.cpp	/^static void CheckQueryWord ( const char * szWord, CSphQueryResult * pResult, const CSphIndexSettings & tSettings, bool bStar )$/;"	f	file:
CheckQuorumProximity	sphinxquery.cpp	/^static bool CheckQuorumProximity ( XQNode_t * pNode, CSphString * pError )$/;"	f	file:
CheckRT	tests.cpp	/^static void CheckRT ( int iVal, int iRef, const char * sMsg )$/;"	f	file:
CheckReopen	searchd.cpp	/^void CheckReopen ()$/;"	f
CheckRotate	searchd.cpp	/^void CheckRotate ()$/;"	f
CheckServedEntry	searchd.cpp	/^static bool CheckServedEntry ( const ServedIndex_t * pEntry, const char * sIndex )$/;"	f	file:
CheckSignals	searchd.cpp	/^void CheckSignals ()$/;"	f
CheckSuffix	spelldump.cpp	/^bool CISpellAffixRule::CheckSuffix ( const CSphString & sWord ) const$/;"	f	class:CISpellAffixRule
CheckTag	sphinx.cpp	/^bool CSphSource_XMLPipe::CheckTag ( bool bOpen, CSphString & sError )$/;"	f	class:CSphSource_XMLPipe
Chop	sphinxstd.h	/^	void Chop ()$/;"	f	struct:CSphString
ClampRule_t	sphinxstemcz.cpp	/^struct ClampRule_t$/;"	s	file:
Cleanup	sphinxquery.cpp	/^void XQParser_t::Cleanup ()$/;"	f	class:XQParser_t
CleanupCallback	tests.cpp	/^void CleanupCallback ( void * pArg )$/;"	f
CleanupThread	tests.cpp	/^void CleanupThread ( void * pArg )$/;"	f
ClearFieldMask	sphinxquery.cpp	/^void XQNode_t::ClearFieldMask ()$/;"	f	class:XQNode_t
Clone	sphinx.cpp	/^	virtual CSphDict *		Clone () const { return CloneBase ( new CSphDictCRC<CRC32DICT>() ); }$/;"	f	struct:CSphDictCRC
Clone	sphinx.cpp	/^ISphTokenizer * CSphTokenizer_Filter::Clone ( bool bEscaped ) const$/;"	f	class:CSphTokenizer_Filter
Clone	sphinx.cpp	/^ISphTokenizer * CSphTokenizer_SBCS::Clone ( bool bEscaped ) const$/;"	f	class:CSphTokenizer_SBCS
Clone	sphinx.cpp	/^ISphTokenizer * CSphTokenizer_UTF8::Clone ( bool bEscaped ) const$/;"	f	class:CSphTokenizer_UTF8
Clone	sphinx.h	/^	virtual CSphDict *		Clone () const { return NULL; }$/;"	f	struct:CSphDict
Clone	sphinx.h	/^	void Clone ( const CSphMatch & rhs, int iDynamic )$/;"	f	class:CSphMatch
CloneBase	sphinx.cpp	/^CSphDict * CSphDictCRCTraits::CloneBase ( CSphDictCRCTraits * pDict ) const$/;"	f	class:CSphDictCRCTraits
CloneBase	sphinx.cpp	/^void CSphTokenizerTraits<IS_UTF8>::CloneBase ( const CSphTokenizerTraits<IS_UTF8> * pFrom, bool bEscaped )$/;"	f	class:CSphTokenizerTraits
CloneKeyword	sphinx.cpp	/^static XQNode_t * CloneKeyword ( const XQNode_t * pNode )$/;"	f	file:
Close	searchd.cpp	/^	void Close ()$/;"	f	struct:AgentConn_t
Close	sphinx.cpp	/^void CSphAutofile::Close ()$/;"	f	class:CSphAutofile
Close	sphinx.cpp	/^void CSphAutoreader::Close ()$/;"	f	class:CSphAutoreader
CloseFile	sphinx.cpp	/^void CSphWriter::CloseFile ( bool bTruncate )$/;"	f	class:CSphWriter
CmpColumns_fn	searchd.cpp	/^struct CmpColumns_fn$/;"	s	file:
CmpHit_fn	sphinx.cpp	/^struct CmpHit_fn$/;"	s	file:
CmpMvaEntries_fn	sphinx.cpp	/^struct CmpMvaEntries_fn$/;"	s	file:
CmpOrdinalIdEntry_fn	sphinx.cpp	/^struct CmpOrdinalIdEntry_fn$/;"	s	file:
CmpOrdinalsDocid_fn	sphinx.cpp	/^struct CmpOrdinalsDocid_fn$/;"	s	file:
CmpOrdinalsEntry_fn	sphinx.cpp	/^struct CmpOrdinalsEntry_fn$/;"	s	file:
CmpOrdinalsValue_fn	sphinx.cpp	/^struct CmpOrdinalsValue_fn$/;"	s	file:
CmpPSortersByRandom_fn	sphinx.cpp	/^struct CmpPSortersByRandom_fn$/;"	s	file:
CmpQueuedDocinfo_fn	sphinx.cpp	/^struct CmpQueuedDocinfo_fn$/;"	s	file:
CmpString	searchd.cpp	/^static int CmpString ( const CSphString & a, const CSphString & b )$/;"	f	file:
CmpStrings	sphinx.h	/^	inline int CmpStrings ( const CSphMatch & a, const CSphMatch & b, int iAttr ) const$/;"	f	struct:CSphMatchComparatorState
CmpWord	sphinx.cpp	/^	int CmpWord ( const CSphDictReader & tOther ) const$/;"	f	class:CSphDictReader
CodepointArbitration	sphinx.cpp	/^int CSphTokenizerTraits<IS_UTF8>::CodepointArbitration ( int iCode, bool bWasEscaped, BYTE uNextByte )$/;"	f	class:CSphTokenizerTraits
CollateBinary	sphinxsort.cpp	/^int CollateBinary ( const BYTE * pStr1, const BYTE * pStr2 )$/;"	f
CollateLibcCI	sphinxsort.cpp	/^int CollateLibcCI ( const BYTE * pStr1, const BYTE * pStr2 )$/;"	f
CollateLibcCS	sphinxsort.cpp	/^int CollateLibcCS ( const BYTE * pStr1, const BYTE * pStr2 )$/;"	f
CollateUTF8CI	sphinxsort.cpp	/^static inline int CollateUTF8CI ( int iCode )$/;"	f	file:
CollateUtf8GeneralCI	sphinxsort.cpp	/^int CollateUtf8GeneralCI ( const BYTE * pArg1, const BYTE * pArg2 )$/;"	f
Collect	sphinxint.h	/^bool AttrIndexBuilder_t<DOCID>::Collect ( const DWORD * pCur, const DWORD * pMvas, int64_t iMvasCount, CSphString & sError, bool bHasMvaID )$/;"	f	class:AttrIndexBuilder_t
Collect	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::Collect ( const DWORD * pCur, const CSphDocMVA & dMvas )$/;"	f	class:AttrIndexBuilder_t
CollectHitMask	sphinxsearch.cpp	/^void ISphQword::CollectHitMask()$/;"	f	class:ISphQword
CollectMVA	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::CollectMVA ( DOCID uDocID, const CSphVector< CSphVector<DWORD> > & dCurInfo )$/;"	f	class:AttrIndexBuilder_t
CollectQuerySPZ	searchd.cpp	/^static DWORD CollectQuerySPZ ( const XQNode_t * pNode )$/;"	f	file:
CollectRowMVA	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::CollectRowMVA ( int iAttr, DWORD uCount, const DWORD * pMva )$/;"	f	class:AttrIndexBuilder_t
CollectWithoutMvas	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::CollectWithoutMvas ( const DWORD * pCur, bool bUseMvas )$/;"	f	class:AttrIndexBuilder_t
Compact	sphinxsort.cpp	/^void CSphUniqounter::Compact ( SphGroupKey_t * pRemoveGroups, int iRemoveGroups )$/;"	f	class:CSphUniqounter
CompareTo	sphinx.cpp	/^bool CSphSchema::CompareTo ( const CSphSchema & rhs, CSphString & sError ) const$/;"	f	class:CSphSchema
ConfigureAgent	searchd.cpp	/^bool ConfigureAgent ( AgentDesc_t & tAgent, const CSphVariant * pAgent, const char * szIndexName, bool bBlackhole )$/;"	f
ConfigureAndPreload	searchd.cpp	/^void ConfigureAndPreload ( const CSphConfig & hConf, const char * sOptIndex )$/;"	f
ConfigureAttrs	sphinx.cpp	/^void CSphSource_XMLPipe2::ConfigureAttrs ( const CSphVariant * pHead, ESphAttr eAttrType )$/;"	f	class:CSphSource_XMLPipe2
ConfigureDistributedIndex	searchd.cpp	/^static DistributedIndex_t ConfigureDistributedIndex ( const char * szIndexName, const CSphConfigSection & hIndex )$/;"	f	file:
ConfigureFields	sphinx.cpp	/^void CSphSource_XMLPipe2::ConfigureFields ( const CSphVariant * pHead )$/;"	f	class:CSphSource_XMLPipe2
ConfigureIndex	searchd.cpp	/^void ConfigureIndex ( ServedDesc_t & tIdx, const CSphConfigSection & hIndex )$/;"	f
ConfigureQword	sphinx.cpp	/^	static inline void ConfigureQword ( QWORD & tQword, CSphAutofile & tHits, CSphAutofile & tDocs, CSphIndex_VLN * pIndex )$/;"	f	class:CSphMerger
ConfigureSearchd	searchd.cpp	/^void ConfigureSearchd ( const CSphConfig & hConf, bool bOptPIDFile )$/;"	f
ConfigureUnpack	indexer.cpp	/^bool ConfigureUnpack ( CSphVariant * pHead, ESphUnpackFormat eFormat, CSphSourceParams_SQL & tParams, const char * sSourceName )$/;"	f
ConfigureUnpack	indexer.cpp	/^bool ConfigureUnpack ( CSphVariant * pHead, ESphUnpackFormat, CSphSourceParams_SQL &, const char * sSourceName )$/;"	f
Connect	sphinx.cpp	/^bool CSphSource_SQL::Connect ( CSphString & sError )$/;"	f	class:CSphSource_SQL
Connect	sphinx.cpp	/^bool CSphSource_XMLPipe2::Connect ( CSphString & sError )$/;"	f	class:CSphSource_XMLPipe2
Connect	sphinx.cpp	/^bool CSphSource_XMLPipe::Connect ( CSphString & )$/;"	f	class:CSphSource_XMLPipe
Connect	tests.cpp	/^	bool Connect ( CSphString & ) { return true; }$/;"	f	class:SphDocRandomizer_c
Connect	tests.cpp	/^	bool Connect ( CSphString & ) { return true; }$/;"	f	class:SphTestDoc_c
ConnectToRemoteAgents	searchd.cpp	/^void ConnectToRemoteAgents ( CSphVector<AgentConn_t> & dAgents, bool bRetryOnly )$/;"	f
ConstList_c	sphinxexpr.cpp	/^	ConstList_c ()$/;"	f	class:ConstList_c
ConstList_c	sphinxexpr.cpp	/^class ConstList_c$/;"	c	file:
ConstructNode	sphinxsearch.cpp	/^	inline void					ConstructNode ( const CSphVector<ExtNode_i *> & dNodes, const CSphVector<WORD> & dPositions, const ISphQwordSetup & tSetup )$/;"	f	class:ExtNWayT
Contains	sphinxstd.h	/^	bool Contains ( T tRef ) const$/;"	f	class:CSphVector
ConvertSPZ	sphinxexcerpt.cpp	/^int ConvertSPZ ( DWORD eSPZ )$/;"	f
Copy	sphinxstd.h	/^	static inline void Copy ( T * pNew, T * pData, int iLength )$/;"	f	class:CSphSwapVectorPolicy
Copy	sphinxstd.h	/^	static inline void Copy ( T * pNew, T * pData, int iLength )$/;"	f	class:CSphVectorPolicy
CopyDocinfo	sphinx.cpp	/^void CSphIndex_VLN::CopyDocinfo ( CSphQueryContext * pCtx, CSphMatch & tMatch, const DWORD * pFound ) const$/;"	f	class:CSphIndex_VLN
CopyExtDoc	sphinxsearch.cpp	/^static inline void CopyExtDoc ( ExtDoc_t & tDst, const ExtDoc_t & tSrc, CSphRowitem ** ppRow, int iStride )$/;"	f	file:
CopyExtDocinfo	sphinxsearch.cpp	/^static inline void CopyExtDocinfo ( ExtDoc_t & tDst, const ExtDoc_t & tSrc, CSphRowitem ** ppRow, int iStride )$/;"	f	file:
CopyFile	sphinx.cpp	/^static bool CopyFile ( const char * sSrc, const char * sDst, CSphString & sErrStr )$/;"	f	file:
CopyKey	searchd.cpp	/^	void CopyKey ( CSphMatch * pMed, CSphMatch * pVal ) const$/;"	f	struct:TaggedMatchSorter_fn
CopyKey	sphinx.cpp	/^	void CopyKey ( SphDocID_t * pMed, DWORD * pVal ) const$/;"	f	struct:DocinfoSort_fn
CopyKey	sphinxsort.cpp	/^	void CopyKey ( MEDIAN_TYPE * pMed, CSphMatch * pVal ) const$/;"	f	struct:GroupSorter_fn
CopyKey	sphinxstd.h	/^	void CopyKey ( MEDIAN_TYPE * pMed, T * pVal ) const$/;"	f	struct:SphAccessor_T
CopyKey	tests.cpp	/^	void CopyKey ( DWORD * pMed, DWORD * pVal ) const$/;"	f	struct:TestAccCmp_fn
CopyQuery_fn	searchd.cpp	/^typedef bool CopyQuery_fn ( QueryCopyState_t & tState );$/;"	t	file:
CopySpecs	sphinxquery.cpp	/^void XQNode_t::CopySpecs ( const XQNode_t * pSpecs )$/;"	f	class:XQNode_t
CopyStringAttr	sphinx.cpp	/^SphAttr_t CopyStringAttr ( CSphWriter & wrTo, CSphReader & rdFrom, SphAttr_t uOffset )$/;"	f
CopySubstring	sphinx.cpp	/^static inline void CopySubstring ( BYTE * pDst, const BYTE * pSrc, int iLen )$/;"	f	file:
CopyZoneName	sphinxexcerpt.cpp	/^static void CopyZoneName ( CSphVector<char> & dName, const char * sZone, int iLen )$/;"	f	file:
CountDistinct	sphinxsort.cpp	/^	void CountDistinct ()$/;"	f	class:CSphKBufferGroupSorter
CountNext	sphinxsort.cpp	/^int CSphUniqounter::CountNext ( SphGroupKey_t * pOutGroup )$/;"	f	class:CSphUniqounter
CountStart	sphinxsort.cpp	/^int CSphUniqounter::CountStart ( SphGroupKey_t * pOutGroup )$/;"	f	class:CSphUniqounter
CountWords	sphinx.cpp	/^static int CountWords ( const CSphString & sData, ISphTokenizer * pTokenizer )$/;"	f	file:
CrashQuery_t	searchd.cpp	/^	CrashQuery_t ()$/;"	f	struct:CrashQuery_t
CrashQuery_t	searchd.cpp	/^struct CrashQuery_t$/;"	s	file:
Create	sphinx.cpp	/^ISphTokenizer * ISphTokenizer::Create ( const CSphTokenizerSettings & tSettings, CSphString & sError )$/;"	f	class:ISphTokenizer
Create	sphinx.h	/^	static Hitpos_t Create ( int iField, int iPos )$/;"	f	class:Hitman_c
Create	sphinx.h	/^	static Hitpos_t Create ( int iField, int iPos, bool bEnd )$/;"	f	class:Hitman_c
Create	sphinxsearch.cpp	/^CSphHitMarker * CSphHitMarker::Create ( const XQNode_t * pRoot, const ISphQwordSetup & tSetup )$/;"	f	class:CSphHitMarker
Create	sphinxsearch.cpp	/^ExtNode_i * ExtNode_i::Create ( ISphQword * pQword, const XQNode_t * pNode, const ISphQwordSetup & tSetup )$/;"	f	class:ExtNode_i
Create	sphinxsearch.cpp	/^ExtNode_i * ExtNode_i::Create ( const XQKeyword_t & tWord, const XQNode_t * pNode, const ISphQwordSetup & tSetup )$/;"	f	class:ExtNode_i
Create	sphinxsearch.cpp	/^ExtNode_i * ExtNode_i::Create ( const XQNode_t * pNode, const ISphQwordSetup & tSetup )$/;"	f	class:ExtNode_i
CreateBitdotNode	sphinxexpr.cpp	/^ISphExpr * ExprParser_t::CreateBitdotNode ( int iArgsNode, CSphVector<ISphExpr *> & dArgs )$/;"	f	class:ExprParser_t
CreateCachedWrapper	sphinxsearch.cpp	/^ExtNode_i * NodeCacheContainer_t::CreateCachedWrapper ( ExtNode_i * pChild, const XQNode_t * pRawChild, const ISphQwordSetup & tSetup )$/;"	f	class:NodeCacheContainer_t
CreateFilter	sphinxfilter.cpp	/^static ISphFilter * CreateFilter ( ESphAttr eAttrType, ESphFilter eFilterType, CSphString & sError )$/;"	f	file:
CreateFilters	sphinx.cpp	/^bool CSphQueryContext::CreateFilters ( bool bFullscan, const CSphVector<CSphFilterSettings> * pdFilters, const CSphSchema & tSchema, const DWORD * pMvaPool, CSphString & sError )$/;"	f	class:CSphQueryContext
CreateGeodistNode	sphinxexpr.cpp	/^ISphExpr * ExprParser_t::CreateGeodistNode ( int iArgs )$/;"	f	class:ExprParser_t
CreateInNode	sphinxexpr.cpp	/^ISphExpr * ExprParser_t::CreateInNode ( int iNode )$/;"	f	class:ExprParser_t
CreateIntervalNode	sphinxexpr.cpp	/^ISphExpr * ExprParser_t::CreateIntervalNode ( int iArgsNode, CSphVector<ISphExpr *> & dArgs )$/;"	f	class:ExprParser_t
CreateMergeFilters	sphinx.cpp	/^static ISphFilter * CreateMergeFilters ( CSphVector<CSphFilterSettings> & dSettings, const CSphSchema & tSchema, const DWORD * pMvaPool )$/;"	f	file:
CreateMultiNode	sphinxsearch.cpp	/^static ExtNode_i * CreateMultiNode ( const XQNode_t * pQueryNode, const ISphQwordSetup & tSetup, bool bNeedsHitlist )$/;"	f	file:
CreateNode	sphinxsearch.cpp	/^	ISphExpr * CreateNode ( int iID, ISphExpr * pLeft )$/;"	f	class:ExprRankerHook_c
CreateOrderNode	sphinxsearch.cpp	/^static ExtNode_i * CreateOrderNode ( const XQNode_t * pNode, const ISphQwordSetup & tSetup )$/;"	f	file:
CreatePipe	searchd.cpp	/^int CreatePipe ( bool bFatal, int iHandler )$/;"	f
CreatePipe	searchd.cpp	/^int CreatePipe ( bool, int )	{ return -1; }$/;"	f
CreateProxy	sphinxsearch.cpp	/^ExtNode_i * CSphQueryNodeCache::CreateProxy ( ExtNode_i * pChild, const XQNode_t * pRawChild, const ISphQwordSetup & tSetup )$/;"	f	class:CSphQueryNodeCache
CreateQueryWord	sphinxsearch.cpp	/^static ISphQword * CreateQueryWord ( const XQKeyword_t & tWord, const ISphQwordSetup & tSetup, CSphDict * pZonesDict=NULL )$/;"	f	file:
CreateSpecialFilter	sphinxfilter.cpp	/^static ISphFilter * CreateSpecialFilter ( const CSphString & sName, ESphFilter eFilterType )$/;"	f	file:
CreateSum	sphinx.h	/^	static Hitpos_t CreateSum ( Hitpos_t uHitpos, int iAdd )$/;"	f	class:Hitman_c
CreateSynonymsFile	tests.cpp	/^bool CreateSynonymsFile ( const char * sMagic )$/;"	f
CreateTestTokenizer	tests.cpp	/^ISphTokenizer * CreateTestTokenizer ( bool bUTF8, DWORD uMode )$/;"	f
CreateTokenFilter	sphinx.cpp	/^ISphTokenizer * ISphTokenizer::CreateTokenFilter ( ISphTokenizer * pTokenizer, const CSphMultiformContainer * pContainer )$/;"	f	class:ISphTokenizer
CreateTree	sphinxexpr.cpp	/^ISphExpr * ExprParser_t::CreateTree ( int iNode )$/;"	f	class:ExprParser_t
CreateUdfNode	sphinxexpr.cpp	/^ISphExpr * ExprParser_t::CreateUdfNode ( int iCall, ISphExpr * pLeft )$/;"	f	class:ExprParser_t
CtrlHandler	searchd.cpp	/^BOOL WINAPI CtrlHandler ( DWORD )$/;"	f
CurrentWord_t	sphinxmetaphone.cpp	/^struct CurrentWord_t$/;"	s	file:
CutWorst	sphinxsort.cpp	/^	void CutWorst ( int iCut )$/;"	f	class:CSphKBufferGroupSorter
D	sphinxstemru.cpp	/^		D	= 0xB4D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
D	sphinxstemru.cpp	/^		D	= 0xD0B4U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
D	sphinxstemru.cpp	/^		D	= 0xE4,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
DECLARE_BINARY_FLT	sphinxexpr.cpp	452;"	d	file:
DECLARE_BINARY_INT	sphinxexpr.cpp	457;"	d	file:
DECLARE_BINARY_POLY	sphinxexpr.cpp	464;"	d	file:
DECLARE_BINARY_TRAITS	sphinxexpr.cpp	435;"	d	file:
DECLARE_END	sphinxexpr.cpp	450;"	d	file:
DECLARE_TERNARY	sphinxexpr.cpp	516;"	d	file:
DECLARE_TIMER	sphinx.cpp	199;"	d	file:
DECLARE_TIMER	sphinx.cpp	201;"	d	file:
DECLARE_TIMER	sphinx.cpp	211;"	d	file:
DECLARE_TIMER	sphinx.cpp	213;"	d	file:
DECLARE_TIMESTAMP	sphinxexpr.cpp	543;"	d	file:
DECLARE_UNARY_FLT	sphinxexpr.cpp	405;"	d	file:
DECLARE_UNARY_INT	sphinxexpr.cpp	409;"	d	file:
DECLARE_UNARY_TRAITS	sphinxexpr.cpp	394;"	d	file:
DEFAULT_COL_SIZE	sphinx.h	/^	static const int		DEFAULT_COL_SIZE	= 1024;			\/\/\/< default column buffer size$/;"	m	struct:CSphSource_ODBC
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)\/config$/;"	m
DEFAULT_READ_BUFFER	sphinx.cpp	/^static const int	DEFAULT_READ_BUFFER		= 262144;$/;"	v	file:
DEFAULT_READ_UNHINTED	sphinx.cpp	/^static const int	DEFAULT_READ_UNHINTED	= 32768;$/;"	v	file:
DEFAULT_WRITE_BUFFER	sphinx.cpp	/^	static const int			DEFAULT_WRITE_BUFFER	= 1048576;	\/\/\/< default write buffer size$/;"	m	class:CSphIndex_VLN	file:
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DICT_CHUNK	sphinx.cpp	/^	static const int				DICT_CHUNK		= 65536;$/;"	m	class:CSphDictKeywords	file:
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(srcdir)\/Makefile.in$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(libsphinx_a_SOURCES) $(indexer_SOURCES) \\$/;"	m
DLLEXPORT	udfexample.c	28;"	d	file:
DLLEXPORT	udfexample.c	30;"	d	file:
DOCID_FMT	sphinx.h	107;"	d
DOCID_FMT	sphinx.h	93;"	d
DOCID_MAX	sphinx.h	106;"	d
DOCID_MAX	sphinx.h	92;"	d
DOCINFO2ATTRS	sphinx.h	/^inline 			DWORD *	DOCINFO2ATTRS ( DWORD * pDocinfo )			{ return DOCINFO2ATTRS_T<SphDocID_t>(pDocinfo); }$/;"	f
DOCINFO2ATTRS	sphinx.h	/^inline const	DWORD *	DOCINFO2ATTRS ( const DWORD * pDocinfo )	{ return DOCINFO2ATTRS_T<SphDocID_t>(pDocinfo); }$/;"	f
DOCINFO2ATTRS_T	sphinx.h	/^template < typename DOCID > inline DWORD *			DOCINFO2ATTRS_T ( DWORD * pDocinfo )		{ assert ( pDocinfo ); return pDocinfo+DWSIZEOF(DOCID); }$/;"	f
DOCINFO2ATTRS_T	sphinx.h	/^template < typename DOCID > inline DWORD *			DOCINFO2ATTRS_T ( DWORD * pDocinfo )		{ return pDocinfo + DWSIZEOF(DOCID); }$/;"	f
DOCINFO2ATTRS_T	sphinx.h	/^template < typename DOCID > inline const DWORD *	DOCINFO2ATTRS_T ( const DWORD * pDocinfo )	{ assert ( pDocinfo ); return pDocinfo+DWSIZEOF(DOCID); }$/;"	f
DOCINFO2ATTRS_T	sphinx.h	/^template < typename DOCID > inline const DWORD *	DOCINFO2ATTRS_T ( const DWORD * pDocinfo )	{ return pDocinfo + DWSIZEOF(DOCID); }$/;"	f
DOCINFO2ID	sphinx.h	/^inline SphDocID_t DOCINFO2ID ( const DWORD * pDocinfo )$/;"	f
DOCINFO2ID_T	sphinx.h	/^template<> inline DWORD DOCINFO2ID_T ( const DWORD * pDocinfo )$/;"	f
DOCINFO2ID_T	sphinx.h	/^template<> inline uint64_t DOCINFO2ID_T ( const DWORD * pDocinfo )$/;"	f
DOCINFOSETID	sphinx.h	/^inline void DOCINFOSETID ( DWORD * pDocinfo, DWORD uValue )$/;"	f
DOCINFOSETID	sphinx.h	/^inline void DOCINFOSETID ( DWORD * pDocinfo, uint64_t uValue )$/;"	f
DOCINFO_HASH_BITS	sphinx.cpp	/^	static const int			DOCINFO_HASH_BITS	= 18;	\/\/ FIXME! make this configurable$/;"	m	class:CSphIndex_VLN	file:
DOCINFO_IDSIZE	sphinx.h	108;"	d
DOCINFO_IDSIZE	sphinx.h	94;"	d
DOCINFO_INDEX_FREQ	sphinxint.h	372;"	d
DOCLIST_HINT_THRESH	sphinx.cpp	/^static const int DOCLIST_HINT_THRESH = 256;$/;"	v	file:
DWORD	sphinxstd.h	/^typedef unsigned int		DWORD;$/;"	t
DWORD	sphinxstd.h	/^typedef unsigned long		DWORD;$/;"	t
DWSIZEOF	sphinx.h	115;"	d
Dealloc	sphinx.cpp	/^void CSphIndex_VLN::Dealloc ()$/;"	f	class:CSphIndex_VLN
DebugCheck	sphinx.cpp	/^int CSphIndex_VLN::DebugCheck ( FILE * fp )$/;"	f	class:CSphIndex_VLN
DebugDump	sphinxsearch.cpp	/^	virtual void DebugDump ( int iLevel )$/;"	f	class:ExtNWay_c
DebugDump	sphinxsearch.cpp	/^	virtual void DebugDump ( int iLevel )$/;"	f	class:ExtNode_i
DebugDump	sphinxsearch.cpp	/^	virtual void DebugDump ( int iLevel )$/;"	f	class:ExtTerm_c
DebugDump	sphinxsearch.cpp	/^	virtual void DebugDump ( int iLevel )$/;"	f	class:ExtUnit_c
DebugDump	sphinxsearch.cpp	/^	void DebugDump ( int iLevel ) { DebugDumpT ( "ExtAnd", iLevel ); }$/;"	f	class:ExtAnd_c
DebugDump	sphinxsearch.cpp	/^	void DebugDump ( int iLevel ) { DebugDumpT ( "ExtAndNot", iLevel ); }$/;"	f	class:ExtAndNot_c
DebugDump	sphinxsearch.cpp	/^	void DebugDump ( int iLevel ) { DebugDumpT ( "ExtOr", iLevel ); }$/;"	f	class:ExtOr_c
DebugDumpDocids	sphinx.cpp	/^void CSphIndex_VLN::DebugDumpDocids ( FILE * fp )$/;"	f	class:CSphIndex_VLN
DebugDumpHeader	sphinx.cpp	/^void CSphIndex_VLN::DebugDumpHeader ( FILE * fp, const char * sHeaderName, bool bConfig )$/;"	f	class:CSphIndex_VLN
DebugDumpHitlist	sphinx.cpp	/^void CSphIndex_VLN::DebugDumpHitlist ( FILE * fp, const char * sKeyword, bool bID )$/;"	f	class:CSphIndex_VLN
DebugDumpT	sphinxsearch.cpp	/^	void DebugDumpT ( const char * sName, int iLevel )$/;"	f	class:ExtTwofer_c
DebugIndent	sphinxsearch.cpp	/^	void DebugIndent ( int iLevel )$/;"	f	class:ExtNode_i
DecorateMessage	sphinx.cpp	/^const char * CSphSource_XMLPipe2::DecorateMessage ( const char * sTemplate, ... )$/;"	f	class:CSphSource_XMLPipe2
DecorateMessageVA	sphinx.cpp	/^const char * CSphSource_XMLPipe2::DecorateMessageVA ( const char * sTemplate, va_list ap )$/;"	f	class:CSphSource_XMLPipe2
Delete	searchd.cpp	/^bool IndexHash_c::Delete ( const CSphString & tKey )$/;"	f	class:IndexHash_c
Delete	sphinxstd.h	/^	bool Delete ( const KEY & tKey )$/;"	f	class:CSphOrderedHash
DeleteIndexFiles	tests.cpp	/^static void DeleteIndexFiles ( const char * sIndex )$/;"	f	file:
DeleteNodesWOFields	sphinxquery.cpp	/^void XQParser_t::DeleteNodesWOFields ( XQNode_t * pNode )$/;"	f	class:XQParser_t
DeleteOnFail	sphinx.cpp	/^	DeleteOnFail() : m_bShitHappened ( true )$/;"	f	class:DeleteOnFail
DeleteOnFail	sphinx.cpp	/^class DeleteOnFail : public ISphNoncopyable$/;"	c	file:
DescStemmer_t	sphinx.cpp	/^	struct DescStemmer_t$/;"	s	struct:CSphDictCRCTraits	file:
DetectFormat	spelldump.cpp	/^AffixFormat_e CISpellAffix::DetectFormat ( FILE * pFile )$/;"	f	class:CISpellAffix
DictBegin	sphinx.cpp	/^void CSphDict::DictBegin ( CSphAutofile &, CSphAutofile &, int )						{}$/;"	f	class:CSphDict
DictBegin	sphinx.cpp	/^void CSphDictCRCTraits::DictBegin ( CSphAutofile &, CSphAutofile & tDictFile, int )$/;"	f	class:CSphDictCRCTraits
DictBegin	sphinx.cpp	/^void CSphDictKeywords::DictBegin ( CSphAutofile & tTempDict, CSphAutofile & tDict, int iDictLimit )$/;"	f	class:CSphDictKeywords
DictBlock_t	sphinx.cpp	/^	struct DictBlock_t$/;"	s	class:CSphDictKeywords	file:
DictEnd	sphinx.cpp	/^bool CSphDict::DictEnd ( SphOffset_t *, int *, int, CSphString & )						{ return true; }$/;"	f	class:CSphDict
DictEnd	sphinx.cpp	/^bool CSphDictCRCTraits::DictEnd ( SphOffset_t * pCheckpointsPos, int * pCheckpointsCount, int, CSphString & sError )$/;"	f	class:CSphDictCRCTraits
DictEnd	sphinx.cpp	/^bool CSphDictKeywords::DictEnd ( SphOffset_t * pCheckpointsPos, int * pCheckpointsCount, int iMemLimit, CSphString & sError )$/;"	f	class:CSphDictKeywords
DictEndEntries	sphinx.cpp	/^	virtual void			DictEndEntries ( SphOffset_t ) {}$/;"	f	class:CSphDictKeywords
DictEndEntries	sphinx.cpp	/^void CSphDict::DictEndEntries ( SphOffset_t )											{}$/;"	f	class:CSphDict
DictEndEntries	sphinx.cpp	/^void CSphDictCRCTraits::DictEndEntries ( SphOffset_t iDoclistOffset )$/;"	f	class:CSphDictCRCTraits
DictEntry	sphinx.cpp	/^void CSphDict::DictEntry ( SphWordID_t, BYTE *, int, int, SphOffset_t, SphOffset_t )	{}$/;"	f	class:CSphDict
DictEntry	sphinx.cpp	/^void CSphDictCRCTraits::DictEntry ( SphWordID_t uWordID, BYTE *, int iDocs, int iHits, SphOffset_t iDoclistOffset, SphOffset_t )$/;"	f	class:CSphDictCRCTraits
DictEntry	sphinx.cpp	/^void CSphDictKeywords::DictEntry ( SphWordID_t, BYTE * sKeyword, int iDocs, int iHits, SphOffset_t iDoclistOffset, SphOffset_t iDoclistLength )$/;"	f	class:CSphDictKeywords
DictFlush	sphinx.cpp	/^void CSphDictKeywords::DictFlush ()$/;"	f	class:CSphDictKeywords
DictIsError	sphinx.cpp	/^	virtual bool DictIsError () const { return m_wrDict.IsError(); }$/;"	f	struct:CSphDictCRCTraits
DictIsError	sphinx.cpp	/^bool CSphDict::DictIsError () const														{ return true; }$/;"	f	class:CSphDict
DictKeywordCmp_fn	sphinx.cpp	/^struct DictKeywordCmp_fn$/;"	s	file:
DictKeywordTaggedCmp_fn	sphinx.cpp	/^struct DictKeywordTaggedCmp_fn$/;"	s	file:
DictKeywordTagged_t	sphinx.cpp	/^struct DictKeywordTagged_t : public CSphDictKeywords::DictKeyword_t$/;"	s	file:
DictKeyword_t	sphinx.cpp	/^	struct DictKeyword_t$/;"	s	class:CSphDictKeywords	file:
DictReadEntry	sphinx.cpp	/^static void DictReadEntry ( CSphBin * pBin, DictKeywordTagged_t & tEntry, BYTE * pKeyword )$/;"	f	file:
DieCallback	searchd.cpp	/^bool DieCallback ( const char * sMessage )$/;"	f
Disconnect	sphinx.cpp	/^void CSphSource_SQL::Disconnect ()$/;"	f	class:CSphSource_SQL
Disconnect	sphinx.cpp	/^void CSphSource_XMLPipe2::Disconnect ()$/;"	f	class:CSphSource_XMLPipe2
Disconnect	sphinx.cpp	/^void CSphSource_XMLPipe::Disconnect ()$/;"	f	class:CSphSource_XMLPipe
Disconnect	tests.cpp	/^	void Disconnect () {}$/;"	f	class:SphDocRandomizer_c
Disconnect	tests.cpp	/^	void Disconnect () {}$/;"	f	class:SphTestDoc_c
DiskIndexQwordSetup_c	sphinx.cpp	/^	DiskIndexQwordSetup_c ( const CSphAutofile & tDoclist, const CSphAutofile & tHitlist, const CSphAutofile & tWordlist, int iDictBufSize )$/;"	f	class:DiskIndexQwordSetup_c
DiskIndexQwordSetup_c	sphinx.cpp	/^class DiskIndexQwordSetup_c : public ISphQwordSetup$/;"	c	file:
DiskIndexQwordTraits_c	sphinx.cpp	/^	explicit DiskIndexQwordTraits_c ( bool bUseMini, bool bExcluded )$/;"	f	class:DiskIndexQwordTraits_c
DiskIndexQwordTraits_c	sphinx.cpp	/^class DiskIndexQwordTraits_c : public ISphQword$/;"	c	file:
DiskIndexQword_c	sphinx.cpp	/^	explicit DiskIndexQword_c ( bool bUseMinibuffer, bool bExcluded )$/;"	f	class:DiskIndexQword_c
DiskIndexQword_c	sphinx.cpp	/^class DiskIndexQword_c : public DiskIndexQwordTraits_c$/;"	c	file:
DistributedIndex_t	searchd.cpp	/^	DistributedIndex_t ()$/;"	f	struct:DistributedIndex_t
DistributedIndex_t	searchd.cpp	/^struct DistributedIndex_t$/;"	s	file:
DoAccept	searchd.cpp	/^Listener_t * DoAccept ( int * pClientSock, char * sClientName )$/;"	f
DoCommandUpdate	searchd.cpp	/^static void DoCommandUpdate ( const char * sIndex, const CSphAttrUpdate & tUpd,$/;"	f	file:
DoCrc	sphinx.cpp	/^SphWordID_t CSphDictCRC<false>::DoCrc ( const BYTE * pWord ) const$/;"	f	class:CSphDictCRC
DoCrc	sphinx.cpp	/^SphWordID_t CSphDictCRC<false>::DoCrc ( const BYTE * pWord, int iLen ) const$/;"	f	class:CSphDictCRC
DoCrc	sphinx.cpp	/^SphWordID_t CSphDictCRC<true>::DoCrc ( const BYTE * pWord ) const$/;"	f	class:CSphDictCRC
DoCrc	sphinx.cpp	/^SphWordID_t CSphDictCRC<true>::DoCrc ( const BYTE * pWord, int iLen ) const$/;"	f	class:CSphDictCRC
DoEval	sphinxexpr.cpp	/^	virtual T DoEval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_Bitdot_c
DoExtendedUpdate	searchd.cpp	/^static void DoExtendedUpdate ( const char * sIndex, const SqlStmt_t & tStmt,$/;"	f	file:
DoGetKeywords	sphinx.cpp	/^bool CSphIndex_VLN::DoGetKeywords ( CSphVector <CSphKeywordInfo> & dKeywords, const char * szQuery, bool bGetStats, CSphString & sError ) const$/;"	f	class:CSphIndex_VLN
DoIndex	indexer.cpp	/^bool DoIndex ( const CSphConfigSection & hIndex, const char * sIndexName, const CSphConfigType & hSources, bool bVerbose, FILE * fpDumpRows )$/;"	f
DoIndexing	testrt.cpp	/^void DoIndexing ( CSphSource * pSrc, ISphRtIndex * pIndex )$/;"	f
DoKlistsOptimization	indextool.cpp	/^bool DoKlistsOptimization ( int iRowSize, const char * sPath, int iChunkCount, CSphVector<CSphString> & dFiles )$/;"	f
DoMerge	indexer.cpp	/^bool DoMerge ( const CSphConfigSection & hDst, const char * sDst,$/;"	f
DoOptimization	indextool.cpp	/^void DoOptimization ( const CSphString & sIndex, const CSphConfig & hConf )$/;"	f
DoSearch	testrt.cpp	/^void DoSearch ( CSphIndex * pIndex )$/;"	f
DoUpdate	sphinxsort.cpp	/^	void DoUpdate()$/;"	f	class:CSphUpdateQueue	file:
DocQueryZonePair_t	sphinxexcerpt.cpp	/^struct DocQueryZonePair_t$/;"	s	file:
DocinfoSort_fn	sphinx.cpp	/^	explicit DocinfoSort_fn ( int iStride )$/;"	f	struct:DocinfoSort_fn
DocinfoSort_fn	sphinx.cpp	/^struct DocinfoSort_fn$/;"	s	file:
DoclistHintUnpack	sphinx.cpp	/^static int DoclistHintUnpack ( int iDocs, BYTE uHint )$/;"	f	file:
DocumentError	sphinx.cpp	/^	void DocumentError ( const char * sWhere )$/;"	f	class:CSphSource_XMLPipe2	file:
Document_t	sphinx.cpp	/^	struct Document_t$/;"	s	class:CSphSource_XMLPipe2	file:
Done	searchd.cpp	/^void SphCrashLogger_c::Done ()$/;"	f	class:SphCrashLogger_c
Done	searchd.cpp	/^void ThreadsOnlyMutex_t::Done ()$/;"	f	class:ThreadsOnlyMutex_t
DummyThread	tests.cpp	/^void DummyThread ( void * )$/;"	f
Dump	sphinxexpr.cpp	/^void ExprParser_t::Dump ( int iNode )$/;"	f	class:ExprParser_t
DumpHitlist	sphinx.cpp	/^void CSphIndex_VLN::DumpHitlist ( FILE * fp, const char * sKeyword, bool bID )$/;"	f	class:CSphIndex_VLN
DumpMemStat	searchd.cpp	/^void DumpMemStat ()$/;"	f
DumpOrdinals	sphinx.cpp	/^SphOffset_t CSphIndex_VLN::DumpOrdinals ( CSphWriter & Writer, CSphVector<Ordinal_t> & dOrdinals )$/;"	f	class:CSphIndex_VLN
E	sphinxstemru.cpp	/^		E	= 0xB5D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
E	sphinxstemru.cpp	/^		E	= 0xD0B5U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
E	sphinxstemru.cpp	/^		E	= 0xE5,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
ECHO	llsphinxql.c	902;"	d	file:
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
ECONNABORTED	searchd.cpp	634;"	d	file:
ECONNRESET	searchd.cpp	633;"	d	file:
EE	sphinxstemru.cpp	/^		EE	= 0x8DD1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
EE	sphinxstemru.cpp	/^		EE	= 0xD18DU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
EE	sphinxstemru.cpp	/^		EE	= 0xFD,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EINPROGRESS	searchd.cpp	631;"	d	file:
EINTR	searchd.cpp	623;"	d	file:
EINTR	searchd.cpp	632;"	d	file:
EMPTY_HIT	sphinx.h	774;"	d
ENTRY_CHUNK	sphinx.cpp	/^	static const int				ENTRY_CHUNK		= 65536;$/;"	m	class:CSphDictKeywords	file:
EOB_ACT_CONTINUE_SCAN	llsphinxql.c	182;"	d	file:
EOB_ACT_END_OF_FILE	llsphinxql.c	183;"	d	file:
EOB_ACT_LAST_MATCH	llsphinxql.c	184;"	d	file:
EOF_ITEM	searchd.cpp	/^	EOF_ITEM						= -1$/;"	e	enum:__anon24	file:
ESortClauseParseResult	sphinxsort.cpp	/^enum ESortClauseParseResult$/;"	g	file:
ESphAddIndex	searchd.cpp	/^enum ESphAddIndex$/;"	g	file:
ESphAggrFunc	sphinx.h	/^enum ESphAggrFunc$/;"	g
ESphAttr	sphinxexpr.h	/^enum ESphAttr$/;"	g
ESphAttrSrc	sphinx.h	/^enum ESphAttrSrc$/;"	g
ESphBinRead	sphinx.cpp	/^enum ESphBinRead$/;"	g	file:
ESphBinState	sphinx.cpp	/^enum ESphBinState$/;"	g	file:
ESphBinlogReplayFlags	sphinxrt.h	/^enum ESphBinlogReplayFlags$/;"	g
ESphCollation	sphinx.h	/^enum ESphCollation$/;"	g
ESphDocinfo	sphinx.h	/^enum ESphDocinfo$/;"	g
ESphEvalStage	sphinx.h	/^enum ESphEvalStage$/;"	g
ESphFilter	sphinx.h	/^enum ESphFilter$/;"	g
ESphFilterAttr	sphinx.cpp	/^enum ESphFilterAttr$/;"	g	file:
ESphGroupBy	sphinx.h	/^enum ESphGroupBy$/;"	g
ESphHitFormat	sphinx.h	/^enum ESphHitFormat$/;"	g
ESphHitless	sphinx.h	/^enum ESphHitless$/;"	g
ESphLogLevel	sphinxutils.h	/^enum ESphLogLevel$/;"	g
ESphMatchMode	sphinx.h	/^enum ESphMatchMode$/;"	g
ESphOnFileFieldError	sphinx.h	/^enum ESphOnFileFieldError$/;"	g
ESphRankMode	sphinx.h	/^enum ESphRankMode$/;"	g
ESphSortFunc	sphinxsort.cpp	/^enum ESphSortFunc$/;"	g	file:
ESphSortKeyPart	sphinx.h	/^enum ESphSortKeyPart$/;"	g
ESphSortOrder	sphinx.h	/^enum ESphSortOrder$/;"	g
ESphSpz	sphinxexcerpt.h	/^enum ESphSpz$/;"	g
ESphTimer	sphinx.cpp	/^enum ESphTimer$/;"	g	file:
ESphUnpackFormat	sphinx.h	/^enum ESphUnpackFormat$/;"	g
ESphWordpart	sphinx.h	/^enum ESphWordpart$/;"	g
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETIMEDOUT	searchd.cpp	629;"	d	file:
EWOULDBLOCK	searchd.cpp	630;"	d	file:
EXC4	sphinxstemen.cpp	65;"	d	file:
EXC5	sphinxstemen.cpp	66;"	d	file:
EXC6	sphinxstemen.cpp	67;"	d	file:
EXC7	sphinxstemen.cpp	68;"	d	file:
EXC8	sphinxstemen.cpp	69;"	d	file:
EXCBASE	sphinxstemen.cpp	64;"	d	file:
EXCERPT_FLAG_ALLOW_EMPTY	searchd.cpp	/^	EXCERPT_FLAG_ALLOW_EMPTY		= 256,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_EMIT_ZONES	searchd.cpp	/^	EXCERPT_FLAG_EMIT_ZONES			= 512,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_EXACTPHRASE	searchd.cpp	/^	EXCERPT_FLAG_EXACTPHRASE		= 2,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_FILES_SCATTERED	searchd.cpp	/^	EXCERPT_FLAG_FILES_SCATTERED	= 1024$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_FORCE_ALL_WORDS	searchd.cpp	/^	EXCERPT_FLAG_FORCE_ALL_WORDS	= 64,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_LOAD_FILES	searchd.cpp	/^	EXCERPT_FLAG_LOAD_FILES			= 128,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_QUERY	searchd.cpp	/^	EXCERPT_FLAG_QUERY				= 32,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_REMOVESPACES	searchd.cpp	/^	EXCERPT_FLAG_REMOVESPACES		= 1,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_SINGLEPASSAGE	searchd.cpp	/^	EXCERPT_FLAG_SINGLEPASSAGE		= 4,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_USEBOUNDARIES	searchd.cpp	/^	EXCERPT_FLAG_USEBOUNDARIES		= 8,$/;"	e	enum:eExcerpt_Flags	file:
EXCERPT_FLAG_WEIGHTORDER	searchd.cpp	/^	EXCERPT_FLAG_WEIGHTORDER		= 16,$/;"	e	enum:eExcerpt_Flags	file:
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXT_COUNT	indexer.cpp	/^const int		EXT_COUNT = 8;$/;"	v
EXT_COUNT	searchd.cpp	/^const int EXT_COUNT = 8;$/;"	v
EXT_MVP	searchd.cpp	/^const int EXT_MVP = 8;$/;"	v
EarlyReject	sphinx.cpp	/^bool CSphIndex_VLN::EarlyReject ( CSphQueryContext * pCtx, CSphMatch & tMatch ) const$/;"	f	class:CSphIndex_VLN
EmitResult	spelldump.cpp	/^static void EmitResult ( WordMap_t & tMap , const CSphString & sFrom, const CSphString & sTo, char cRuleA = 0, char cRuleB = 0 )$/;"	f	file:
EmitTail	sphinxsearch.cpp	/^bool ExtNWay_c<FSM>::EmitTail ( int & iHit )$/;"	f	class:ExtNWay_c
EnableParagraphs	sphinx.cpp	/^void CSphHTMLStripper::EnableParagraphs ()$/;"	f	class:CSphHTMLStripper
EnableQueryParserMode	sphinx.cpp	/^	virtual void					EnableQueryParserMode ( bool bEnable )		{ m_pTokenizer->EnableQueryParserMode ( bEnable ); }$/;"	f	class:CSphTokenizer_Filter
EnableQueryParserMode	sphinx.h	/^	virtual void					EnableQueryParserMode ( bool bEnable )$/;"	f	class:ISphTokenizer
EnableSentenceIndexing	sphinx.cpp	/^	virtual bool					EnableSentenceIndexing ( CSphString & sError )					{ return m_pTokenizer->EnableSentenceIndexing ( sError ); }$/;"	f	class:CSphTokenizer_Filter
EnableSentenceIndexing	sphinx.cpp	/^bool ISphTokenizer::EnableSentenceIndexing ( CSphString & sError )$/;"	f	class:ISphTokenizer
EnableTokenizedMultiformTracking	sphinx.cpp	/^	virtual void					EnableTokenizedMultiformTracking ()			{ m_bBuildMultiform = true; }$/;"	f	class:CSphTokenizer_Filter
EnableTokenizedMultiformTracking	sphinx.h	/^	virtual void					EnableTokenizedMultiformTracking () {}$/;"	f	class:ISphTokenizer
EnableZoneIndexing	sphinx.cpp	/^	virtual bool					EnableZoneIndexing ( CSphString & sError )						{ return m_pTokenizer->EnableZoneIndexing ( sError ); }$/;"	f	class:CSphTokenizer_Filter
EnableZoneIndexing	sphinx.cpp	/^bool ISphTokenizer::EnableZoneIndexing ( CSphString & sError )$/;"	f	class:ISphTokenizer
EndElement	sphinx.cpp	/^void CSphSource_XMLPipe2::EndElement ( const char * szName )$/;"	f	class:CSphSource_XMLPipe2
Ends	sphinxstd.h	/^	bool Ends ( const char * sPrefix ) const$/;"	f	struct:CSphString
Enter	sphinxexpr.cpp	/^	void Enter ( const ExprNode_t & tNode )$/;"	f	struct:HookCheck_fn
Enter	sphinxexpr.cpp	/^	void Enter ( const ExprNode_t & tNode )$/;"	f	struct:WeightCheck_fn
Error	sphinx.cpp	/^bool CSphCharsetDefinitionParser::Error ( const char * sMessage )$/;"	f	class:CSphCharsetDefinitionParser
Error	sphinx.cpp	/^void CSphSource_XMLPipe2::Error ( const char * sTemplate, ... )$/;"	f	class:CSphSource_XMLPipe2
Error	sphinxquery.cpp	/^bool XQParser_t::Error ( const char * sTemplate, ... )$/;"	f	class:XQParser_t
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & ) const { assert ( 0 ); return 0; }$/;"	f	struct:Expr_GetMva_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & ) const { assert ( 0 ); return 0; }$/;"	f	struct:Expr_GetStrConst_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & ) const { assert ( 0 ); return 0; }$/;"	f	struct:Expr_GetString_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & ) const { return (float) m_iValue; } \/\/ no assert() here cause generic float Eval() needs to work even on int-evaluator tree$/;"	f	struct:Expr_GetInt64Const_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & ) const { return (float) m_iValue; } \/\/ no assert() here cause generic float Eval() needs to work even on int-evaluator tree$/;"	f	struct:Expr_GetIntConst_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & ) const { return m_fValue; }$/;"	f	struct:Expr_GetConst_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & ) const$/;"	f	struct:Expr_Arglist_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float) Int64Eval ( tMatch ); }$/;"	f	class:Expr_UdfInt_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float) IntEval ( tMatch ); }$/;"	f	class:Expr_ArgVsSet_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float) tMatch.GetAttr ( m_tLocator ); } \/\/ FIXME! OPTIMIZE!!! we can go the short route here$/;"	f	struct:Expr_GetInt_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float) tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetBits_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float)(int)tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetSint_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float)IntEval ( tMatch ); }$/;"	f	struct:Expr_Crc32_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float)IntEval ( tMatch ); }$/;"	f	struct:Expr_Fibonacci_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float)tMatch.m_iDocID; }$/;"	f	struct:Expr_GetId_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return (float)tMatch.m_iWeight; }$/;"	f	struct:Expr_GetWeight_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const { return tMatch.GetAttrFloat ( m_tLocator ); }$/;"	f	struct:Expr_GetFloat_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const$/;"	f
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_Bitdot_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_GeodistAttrConst_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_GeodistConst_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_Geodist_c
Eval	sphinxexpr.cpp	/^	virtual float Eval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_UdfFloat_c
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_And
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_FloatRange
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_IdRange
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_IdValues
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_MVARange
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_MVAValues
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_Not
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_Range
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_Values
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_WeightRange
Eval	sphinxfilter.cpp	/^	virtual bool Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Filter_WeightValues
Eval	sphinxsearch.cpp	/^	float Eval ( const CSphMatch & ) const$/;"	f	struct:Expr_FieldFactor_c
Eval	sphinxsearch.cpp	/^	float Eval ( const CSphMatch & ) const$/;"	f	struct:Expr_IntPtr_c
Eval	sphinxsearch.cpp	/^	float Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:Expr_Sum_c
Eval	sphinxsearch.cpp	/^	virtual float Eval ( const CSphMatch & ) const { return (float) m_iValue; } \/\/ no assert() here cause generic float Eval() needs to work even on int-evaluator tree$/;"	f	struct:Expr_GetIntConst_c
Eval	sphinxsort.cpp	/^	virtual float Eval ( const CSphMatch & ) const { assert ( 0 ); return 0.0f; }$/;"	f	struct:ExprSortStringAttrFixup_c
Eval	sphinxsort.cpp	/^float ExprGeodist_t::Eval ( const CSphMatch & tMatch ) const$/;"	f	class:ExprGeodist_t
EvalBlock	sphinxfilter.cpp	/^	virtual bool EvalBlock ( const DWORD * pMinDocinfo, const DWORD * pMaxDocinfo ) const$/;"	f	struct:Filter_And
EvalBlock	sphinxfilter.cpp	/^	virtual bool EvalBlock ( const DWORD * pMinDocinfo, const DWORD * pMaxDocinfo ) const$/;"	f	struct:Filter_FloatRange
EvalBlock	sphinxfilter.cpp	/^	virtual bool EvalBlock ( const DWORD * pMinDocinfo, const DWORD * pMaxDocinfo ) const$/;"	f	struct:Filter_IdRange
EvalBlock	sphinxfilter.cpp	/^	virtual bool EvalBlock ( const DWORD * pMinDocinfo, const DWORD * pMaxDocinfo ) const$/;"	f	struct:Filter_IdValues
EvalBlock	sphinxfilter.cpp	/^	virtual bool EvalBlock ( const DWORD * pMinDocinfo, const DWORD * pMaxDocinfo ) const$/;"	f	struct:Filter_Range
EvalBlock	sphinxfilter.cpp	/^	virtual bool EvalBlock ( const DWORD * pMinDocinfo, const DWORD * pMaxDocinfo ) const$/;"	f	struct:Filter_Values
EvalBlock	sphinxfilter.cpp	/^	virtual bool EvalBlock ( const DWORD *, const DWORD * ) const$/;"	f	struct:Filter_Not
EvalBlock	sphinxfilter.h	/^	virtual bool EvalBlock ( const DWORD *, const DWORD * ) const$/;"	f	struct:ISphFilter
EvalBlockValues	sphinxfilter.cpp	/^	bool EvalBlockValues ( SphAttr_t uBlockMin, SphAttr_t uBlockMax ) const$/;"	f	struct:Filter_IdValues
EvalBlockValues	sphinxfilter.cpp	/^bool IFilter_Values::EvalBlockValues ( SphAttr_t uBlockMin, SphAttr_t uBlockMax ) const$/;"	f	class:IFilter_Values
EvalRange	sphinxfilter.cpp	/^	bool EvalRange ( const SphAttr_t uValue ) const$/;"	f	struct:IFilter_Range
EvalValues	sphinxfilter.cpp	/^bool IFilter_Values::EvalValues ( SphAttr_t uValue ) const$/;"	f	class:IFilter_Values
ExamineTag	sphinx.cpp	/^void CSphArena::ExamineTag ( tTester* pTest, int iTag )$/;"	f	class:CSphArena
ExcerptGen_c	sphinxexcerpt.cpp	/^ExcerptGen_c::ExcerptGen_c ( bool bUtf8 )$/;"	f	class:ExcerptGen_c
ExcerptGen_c	sphinxexcerpt.cpp	/^class ExcerptGen_c$/;"	c	file:
ExcerptQuery_t	sphinxexcerpt.cpp	/^ExcerptQuery_t::ExcerptQuery_t ()$/;"	f	class:ExcerptQuery_t
ExcerptQuery_t	sphinxexcerpt.h	/^struct ExcerptQuery_t$/;"	s
Execute	searchd.cpp	/^	void Execute ( const CSphString & sQuery, NetOutputBuffer_c & tOut, BYTE & uPacketID, ThdDesc_t * pThd=NULL )$/;"	f	class:CSphinxqlSession
Exists	searchd.cpp	/^bool IndexHash_c::Exists ( const CSphString & tKey ) const$/;"	f	class:IndexHash_c
Exists	sphinxstd.h	/^	bool Exists ( const KEY & tKey ) const$/;"	f	class:CSphOrderedHash
Exit	sphinxexpr.cpp	/^	void Exit ( const ExprNode_t & )$/;"	f	struct:WeightCheck_fn
Exit	sphinxexpr.cpp	/^	void Exit ( const ExprNode_t & tNode )$/;"	f	struct:HookCheck_fn
ExpandAsterisk	searchd.cpp	/^const CSphVector<CSphQueryItem> * ExpandAsterisk ( const CSphSchema & tSchema, const CSphVector<CSphQueryItem> & tItems, CSphVector<CSphQueryItem> * pExpanded, bool bNoID=false )$/;"	f
ExpandKeyword	sphinx.cpp	/^static XQNode_t * ExpandKeyword ( XQNode_t * pNode, const CSphIndexSettings & tSettings )$/;"	f	file:
ExpandKeywords	sphinx.cpp	/^static XQNode_t * ExpandKeywords ( XQNode_t * pNode, const CSphIndexSettings & tSettings )$/;"	f	file:
ExpandPrefix	sphinx.cpp	/^XQNode_t * CSphIndex_VLN::ExpandPrefix ( XQNode_t * pNode, CSphString & sError, CSphQueryResultMeta * pResult ) const$/;"	f	class:CSphIndex_VLN
ExpansionContext_t	sphinxint.h	/^struct ExpansionContext_t$/;"	s
ExprEval	sphinxexpr.cpp	/^template<> DWORD Expr_ArgVsSet_c<DWORD>::ExprEval ( ISphExpr * pArg, const CSphMatch & tMatch ) const		{ return (DWORD)pArg->IntEval ( tMatch ); }$/;"	f	class:Expr_ArgVsSet_c
ExprEval	sphinxexpr.cpp	/^template<> float Expr_ArgVsSet_c<float>::ExprEval ( ISphExpr * pArg, const CSphMatch & tMatch ) const		{ return pArg->Eval ( tMatch ); }$/;"	f	class:Expr_ArgVsSet_c
ExprEval	sphinxexpr.cpp	/^template<> int Expr_ArgVsSet_c<int>::ExprEval ( ISphExpr * pArg, const CSphMatch & tMatch ) const			{ return pArg->IntEval ( tMatch ); }$/;"	f	class:Expr_ArgVsSet_c
ExprEval	sphinxexpr.cpp	/^template<> int64_t Expr_ArgVsSet_c<int64_t>::ExprEval ( ISphExpr * pArg, const CSphMatch & tMatch ) const	{ return pArg->Int64Eval ( tMatch ); }$/;"	f	class:Expr_ArgVsSet_c
ExprGeodist_t	sphinxsort.cpp	/^						ExprGeodist_t () {}$/;"	f	struct:ExprGeodist_t
ExprGeodist_t	sphinxsort.cpp	/^struct ExprGeodist_t : public ISphExpr$/;"	s	file:
ExprLocatorTraits_t	sphinxexpr.cpp	/^	ExprLocatorTraits_t ( const CSphAttrLocator & tLocator, int iLocator ) : m_tLocator ( tLocator ), m_iLocator ( iLocator ) {}$/;"	f	struct:ExprLocatorTraits_t
ExprLocatorTraits_t	sphinxexpr.cpp	/^struct ExprLocatorTraits_t : public ISphExpr$/;"	s	file:
ExprNative1	tests.cpp	/^NOINLINE float ExprNative1 ( const CSphMatch & tMatch )	{ return AAA+BBB*CCC-1.0f;}$/;"	f
ExprNative2	tests.cpp	/^NOINLINE float ExprNative2 ( const CSphMatch & tMatch )	{ return AAA+BBB*CCC*2.0f-3.0f\/4.0f*5.0f\/6.0f*BBB; }$/;"	f
ExprNative3	tests.cpp	/^NOINLINE float ExprNative3 ( const CSphMatch & )		{ return (float)sqrt ( 2.0f ); }$/;"	f
ExprNode_t	sphinxexpr.cpp	/^	ExprNode_t () : m_iToken ( 0 ), m_eRetType ( SPH_ATTR_NONE ), m_eArgType ( SPH_ATTR_NONE ), m_iLocator ( -1 ), m_iLeft ( -1 ), m_iRight ( -1 ) {}$/;"	f	struct:ExprNode_t
ExprNode_t	sphinxexpr.cpp	/^struct ExprNode_t$/;"	s	file:
ExprParser_t	sphinxexpr.cpp	/^	ExprParser_t ( CSphSchema * pExtra, ISphExprHook * pHook )$/;"	f	class:ExprParser_t
ExprParser_t	sphinxexpr.cpp	/^class ExprParser_t$/;"	c	file:
ExprRankerHook_c	sphinxsearch.cpp	/^	explicit ExprRankerHook_c ( RankerState_Expr_fn * pState )$/;"	f	class:ExprRankerHook_c
ExprRankerHook_c	sphinxsearch.cpp	/^class ExprRankerHook_c : public ISphExprHook$/;"	c	file:
ExprRankerNode_e	sphinxsearch.cpp	/^enum ExprRankerNode_e$/;"	g	file:
ExprSortStringAttrFixup_c	sphinxsort.cpp	/^	explicit ExprSortStringAttrFixup_c ( const CSphAttrLocator & tLocator )$/;"	f	struct:ExprSortStringAttrFixup_c
ExprSortStringAttrFixup_c	sphinxsort.cpp	/^struct ExprSortStringAttrFixup_c : public ISphExpr$/;"	s	file:
Expr_ArgVsConstSet_c	sphinxexpr.cpp	/^	Expr_ArgVsConstSet_c ( ISphExpr * pArg, CSphVector<ISphExpr *> & dArgs, int iSkip )$/;"	f	class:Expr_ArgVsConstSet_c
Expr_ArgVsConstSet_c	sphinxexpr.cpp	/^	Expr_ArgVsConstSet_c ( ISphExpr * pArg, ConstList_c * pConsts )$/;"	f	class:Expr_ArgVsConstSet_c
Expr_ArgVsConstSet_c	sphinxexpr.cpp	/^class Expr_ArgVsConstSet_c : public Expr_ArgVsSet_c<T>$/;"	c	file:
Expr_ArgVsSet_c	sphinxexpr.cpp	/^	explicit Expr_ArgVsSet_c ( ISphExpr * pArg ) : m_pArg ( pArg ) {}$/;"	f	class:Expr_ArgVsSet_c
Expr_ArgVsSet_c	sphinxexpr.cpp	/^class Expr_ArgVsSet_c : public ISphExpr$/;"	c	file:
Expr_Arglist_c	sphinxexpr.cpp	/^	Expr_Arglist_c ( ISphExpr * pLeft, ISphExpr * pRight )$/;"	f	struct:Expr_Arglist_c
Expr_Arglist_c	sphinxexpr.cpp	/^struct Expr_Arglist_c : public ISphExpr$/;"	s	file:
Expr_Bitdot_c	sphinxexpr.cpp	/^	explicit Expr_Bitdot_c ( const CSphVector<ISphExpr *> & dArgs )$/;"	f	class:Expr_Bitdot_c
Expr_Bitdot_c	sphinxexpr.cpp	/^class Expr_Bitdot_c : public Expr_ArgVsSet_c<T>$/;"	c	file:
Expr_Crc32_c	sphinxexpr.cpp	/^	explicit Expr_Crc32_c ( ISphExpr * pFirst ) { m_pFirst = pFirst; }$/;"	f	struct:Expr_Crc32_c
Expr_Crc32_c	sphinxexpr.cpp	/^struct Expr_Crc32_c : public Expr_Unary_c$/;"	s	file:
Expr_Fibonacci_c	sphinxexpr.cpp	/^	explicit Expr_Fibonacci_c ( ISphExpr * pFirst ) { m_pFirst = pFirst; }$/;"	f	struct:Expr_Fibonacci_c
Expr_Fibonacci_c	sphinxexpr.cpp	/^struct Expr_Fibonacci_c : public Expr_Unary_c$/;"	s	file:
Expr_FieldFactor_c	sphinxsearch.cpp	/^	Expr_FieldFactor_c ( const int * pIndex, const DWORD * pData )$/;"	f	struct:Expr_FieldFactor_c
Expr_FieldFactor_c	sphinxsearch.cpp	/^	Expr_FieldFactor_c ( const int * pIndex, const T * pData )$/;"	f	struct:Expr_FieldFactor_c
Expr_FieldFactor_c	sphinxsearch.cpp	/^struct Expr_FieldFactor_c : public ISphExpr$/;"	s	file:
Expr_FieldFactor_c	sphinxsearch.cpp	/^struct Expr_FieldFactor_c<bool> : public ISphExpr$/;"	s	file:
Expr_GeodistAttrConst_c	sphinxexpr.cpp	/^	Expr_GeodistAttrConst_c ( CSphAttrLocator tLat, CSphAttrLocator tLon, float fAnchorLat, float fAnchorLon, int iLat, int iLon )$/;"	f	class:Expr_GeodistAttrConst_c
Expr_GeodistAttrConst_c	sphinxexpr.cpp	/^class Expr_GeodistAttrConst_c: public ISphExpr$/;"	c	file:
Expr_GeodistConst_c	sphinxexpr.cpp	/^	Expr_GeodistConst_c ( ISphExpr * pLat, ISphExpr * pLon, float fAnchorLat, float fAnchorLon )$/;"	f	class:Expr_GeodistConst_c
Expr_GeodistConst_c	sphinxexpr.cpp	/^class Expr_GeodistConst_c: public ISphExpr$/;"	c	file:
Expr_Geodist_c	sphinxexpr.cpp	/^	Expr_Geodist_c ( ISphExpr * pLat, ISphExpr * pLon, ISphExpr * pAnchorLat, ISphExpr * pAnchorLon )$/;"	f	class:Expr_Geodist_c
Expr_Geodist_c	sphinxexpr.cpp	/^class Expr_Geodist_c: public ISphExpr$/;"	c	file:
Expr_GetBits_c	sphinxexpr.cpp	/^	Expr_GetBits_c ( const CSphAttrLocator & tLocator, int iLocator ) : ExprLocatorTraits_t ( tLocator, iLocator ) {}$/;"	f	struct:Expr_GetBits_c
Expr_GetBits_c	sphinxexpr.cpp	/^struct Expr_GetBits_c : public ExprLocatorTraits_t$/;"	s	file:
Expr_GetConst_c	sphinxexpr.cpp	/^	explicit Expr_GetConst_c ( float fValue ) : m_fValue ( fValue ) {}$/;"	f	struct:Expr_GetConst_c
Expr_GetConst_c	sphinxexpr.cpp	/^struct Expr_GetConst_c : public ISphExpr$/;"	s	file:
Expr_GetFloat_c	sphinxexpr.cpp	/^	Expr_GetFloat_c ( const CSphAttrLocator & tLocator, int iLocator ) : ExprLocatorTraits_t ( tLocator, iLocator ) {}$/;"	f	struct:Expr_GetFloat_c
Expr_GetFloat_c	sphinxexpr.cpp	/^struct Expr_GetFloat_c : public ExprLocatorTraits_t$/;"	s	file:
Expr_GetId_c	sphinxexpr.cpp	/^struct Expr_GetId_c : public ISphExpr$/;"	s	file:
Expr_GetInt64Const_c	sphinxexpr.cpp	/^	explicit Expr_GetInt64Const_c ( int64_t iValue ) : m_iValue ( iValue ) {}$/;"	f	struct:Expr_GetInt64Const_c
Expr_GetInt64Const_c	sphinxexpr.cpp	/^struct Expr_GetInt64Const_c : public ISphExpr$/;"	s	file:
Expr_GetIntConst_c	sphinxexpr.cpp	/^	explicit Expr_GetIntConst_c ( int iValue ) : m_iValue ( iValue ) {}$/;"	f	struct:Expr_GetIntConst_c
Expr_GetIntConst_c	sphinxexpr.cpp	/^struct Expr_GetIntConst_c : public ISphExpr$/;"	s	file:
Expr_GetIntConst_c	sphinxsearch.cpp	/^	explicit Expr_GetIntConst_c ( int iValue ) : m_iValue ( iValue ) {}$/;"	f	struct:Expr_GetIntConst_c
Expr_GetIntConst_c	sphinxsearch.cpp	/^struct Expr_GetIntConst_c : public ISphExpr$/;"	s	file:
Expr_GetInt_c	sphinxexpr.cpp	/^	Expr_GetInt_c ( const CSphAttrLocator & tLocator, int iLocator ) : ExprLocatorTraits_t ( tLocator, iLocator ) {}$/;"	f	struct:Expr_GetInt_c
Expr_GetInt_c	sphinxexpr.cpp	/^struct Expr_GetInt_c : public ExprLocatorTraits_t$/;"	s	file:
Expr_GetMva_c	sphinxexpr.cpp	/^	Expr_GetMva_c ( const CSphAttrLocator & tLocator, int iLocator ) : ExprLocatorTraits_t ( tLocator, iLocator ) {}$/;"	f	struct:Expr_GetMva_c
Expr_GetMva_c	sphinxexpr.cpp	/^struct Expr_GetMva_c : public ExprLocatorTraits_t$/;"	s	file:
Expr_GetSint_c	sphinxexpr.cpp	/^	Expr_GetSint_c ( const CSphAttrLocator & tLocator, int iLocator ) : ExprLocatorTraits_t ( tLocator, iLocator ) {}$/;"	f	struct:Expr_GetSint_c
Expr_GetSint_c	sphinxexpr.cpp	/^struct Expr_GetSint_c : public ExprLocatorTraits_t$/;"	s	file:
Expr_GetStrConst_c	sphinxexpr.cpp	/^	explicit Expr_GetStrConst_c ( const char * sVal, int iLen )$/;"	f	struct:Expr_GetStrConst_c
Expr_GetStrConst_c	sphinxexpr.cpp	/^struct Expr_GetStrConst_c : public ISphExpr$/;"	s	file:
Expr_GetString_c	sphinxexpr.cpp	/^	Expr_GetString_c ( const CSphAttrLocator & tLocator, int iLocator ) : ExprLocatorTraits_t ( tLocator, iLocator ) {}$/;"	f	struct:Expr_GetString_c
Expr_GetString_c	sphinxexpr.cpp	/^struct Expr_GetString_c : public ExprLocatorTraits_t$/;"	s	file:
Expr_GetWeight_c	sphinxexpr.cpp	/^struct Expr_GetWeight_c : public ISphExpr$/;"	s	file:
Expr_InUservar_c	sphinxexpr.cpp	/^	explicit Expr_InUservar_c ( ISphExpr * pArg, UservarIntSet_c * pConsts )$/;"	f	class:Expr_InUservar_c
Expr_InUservar_c	sphinxexpr.cpp	/^class Expr_InUservar_c : public Expr_ArgVsSet_c<int64_t>$/;"	c	file:
Expr_In_c	sphinxexpr.cpp	/^	Expr_In_c ( ISphExpr * pArg, ConstList_c * pConsts ) :$/;"	f	class:Expr_In_c
Expr_In_c	sphinxexpr.cpp	/^class Expr_In_c : public Expr_ArgVsConstSet_c<T>$/;"	c	file:
Expr_IntPtr_c	sphinxsearch.cpp	/^	explicit Expr_IntPtr_c ( DWORD * pVal )$/;"	f	struct:Expr_IntPtr_c
Expr_IntPtr_c	sphinxsearch.cpp	/^struct Expr_IntPtr_c : public ISphExpr$/;"	s	file:
Expr_IntervalConst_c	sphinxexpr.cpp	/^	explicit Expr_IntervalConst_c ( CSphVector<ISphExpr *> & dArgs )$/;"	f	class:Expr_IntervalConst_c
Expr_IntervalConst_c	sphinxexpr.cpp	/^class Expr_IntervalConst_c : public Expr_ArgVsConstSet_c<T>$/;"	c	file:
Expr_Interval_c	sphinxexpr.cpp	/^	explicit Expr_Interval_c ( const CSphVector<ISphExpr *> & dArgs )$/;"	f	class:Expr_Interval_c
Expr_Interval_c	sphinxexpr.cpp	/^class Expr_Interval_c : public Expr_ArgVsSet_c<T>$/;"	c	file:
Expr_MVAIn_c	sphinxexpr.cpp	/^	Expr_MVAIn_c ( const CSphAttrLocator & tLoc, int iLocator, ConstList_c * pConsts, UservarIntSet_c * pUservar )$/;"	f	class:Expr_MVAIn_c
Expr_MVAIn_c	sphinxexpr.cpp	/^class Expr_MVAIn_c : public Expr_ArgVsConstSet_c<int64_t>$/;"	c	file:
Expr_Sum_c	sphinxsearch.cpp	/^	Expr_Sum_c ( RankerState_Expr_fn * pState, ISphExpr * pArg )$/;"	f	struct:Expr_Sum_c
Expr_Sum_c	sphinxsearch.cpp	/^struct Expr_Sum_c : public ISphExpr$/;"	s	file:
Expr_UdfFloat_c	sphinxexpr.cpp	/^	explicit Expr_UdfFloat_c ( UdfCall_t * pCall )$/;"	f	class:Expr_UdfFloat_c
Expr_UdfFloat_c	sphinxexpr.cpp	/^class Expr_UdfFloat_c : public Expr_Udf_c$/;"	c	file:
Expr_UdfInt_c	sphinxexpr.cpp	/^	explicit Expr_UdfInt_c ( UdfCall_t * pCall )$/;"	f	class:Expr_UdfInt_c
Expr_UdfInt_c	sphinxexpr.cpp	/^class Expr_UdfInt_c : public Expr_Udf_c$/;"	c	file:
Expr_Udf_c	sphinxexpr.cpp	/^	explicit Expr_Udf_c ( UdfCall_t * pCall )$/;"	f	class:Expr_Udf_c
Expr_Udf_c	sphinxexpr.cpp	/^class Expr_Udf_c : public ISphExpr$/;"	c	file:
Expr_Unary_c	sphinxexpr.cpp	/^struct Expr_Unary_c : public ISphExpr$/;"	s	file:
ExtAndNot_c	sphinxsearch.cpp	/^ExtAndNot_c::ExtAndNot_c ( ExtNode_i * pFirst, ExtNode_i * pSecond, const ISphQwordSetup & tSetup )$/;"	f	class:ExtAndNot_c
ExtAndNot_c	sphinxsearch.cpp	/^class ExtAndNot_c : public ExtTwofer_c$/;"	c	file:
ExtAnd_c	sphinxsearch.cpp	/^								ExtAnd_c ( ExtNode_i * pFirst, ExtNode_i * pSecond, const ISphQwordSetup & tSetup ) : ExtTwofer_c ( pFirst, pSecond, tSetup ) {}$/;"	f	class:ExtAnd_c
ExtAnd_c	sphinxsearch.cpp	/^class ExtAnd_c : public ExtTwofer_c$/;"	c	file:
ExtDoc_t	sphinxsearch.cpp	/^struct ExtDoc_t$/;"	s	file:
ExtHit_t	sphinxint.h	/^struct ExtHit_t$/;"	s
ExtMultinear_c	sphinxsearch.cpp	/^typedef ExtNWay_c<FSMmultinear> ExtMultinear_c;$/;"	t	file:
ExtNWayT	sphinxsearch.cpp	/^ExtNWayT::ExtNWayT ( const CSphVector<ExtNode_i *> & dNodes, DWORD, const XQNode_t &, const ISphQwordSetup & tSetup )$/;"	f	class:ExtNWayT
ExtNWayT	sphinxsearch.cpp	/^class ExtNWayT : public ExtNode_i$/;"	c	file:
ExtNWay_c	sphinxsearch.cpp	/^	ExtNWay_c ( const CSphVector<ExtNode_i *> & dNodes, DWORD uDupeMask, const XQNode_t & tNode, const ISphQwordSetup & tSetup )$/;"	f	class:ExtNWay_c
ExtNWay_c	sphinxsearch.cpp	/^class ExtNWay_c : public ExtNWayT, private FSM$/;"	c	file:
ExtNodeCached_t	sphinxsearch.cpp	/^	explicit ExtNodeCached_t ( NodeCacheContainer_t * pNode, ExtNode_i * pChild )$/;"	f	class:ExtNodeCached_t	file:
ExtNodeCached_t	sphinxsearch.cpp	/^class ExtNodeCached_t : public ExtNode_i$/;"	c	file:
ExtNodeTFExt_fn	sphinxsearch.cpp	/^	ExtNodeTFExt_fn ( const ExtNodeTFExt_fn & rhs )$/;"	f	struct:ExtNodeTFExt_fn
ExtNodeTFExt_fn	sphinxsearch.cpp	/^	explicit ExtNodeTFExt_fn ( const CSphVector<ExtNode_i *> & dNodes )$/;"	f	struct:ExtNodeTFExt_fn
ExtNodeTFExt_fn	sphinxsearch.cpp	/^struct ExtNodeTFExt_fn$/;"	s	file:
ExtNodeTF_fn	sphinxsearch.cpp	/^struct ExtNodeTF_fn$/;"	s	file:
ExtNode_i	sphinxsearch.cpp	/^ExtNode_i::ExtNode_i ()$/;"	f	class:ExtNode_i
ExtNode_i	sphinxsearch.cpp	/^class ExtNode_i$/;"	c	file:
ExtOr_c	sphinxsearch.cpp	/^								ExtOr_c ( ExtNode_i * pFirst, ExtNode_i * pSecond, const ISphQwordSetup & tSetup ) : ExtTwofer_c ( pFirst, pSecond, tSetup ) {}$/;"	f	class:ExtOr_c
ExtOr_c	sphinxsearch.cpp	/^class ExtOr_c : public ExtTwofer_c$/;"	c	file:
ExtOrder_c	sphinxsearch.cpp	/^ExtOrder_c::ExtOrder_c ( const CSphVector<ExtNode_i *> & dChildren, const ISphQwordSetup & tSetup )$/;"	f	class:ExtOrder_c
ExtOrder_c	sphinxsearch.cpp	/^class ExtOrder_c : public ExtNode_i$/;"	c	file:
ExtPhrase_c	sphinxsearch.cpp	/^typedef ExtNWay_c < FSMphrase > ExtPhrase_c;$/;"	t	file:
ExtProximity_c	sphinxsearch.cpp	/^typedef ExtNWay_c<FSMproximity> ExtProximity_c;$/;"	t	file:
ExtQuorum_c	sphinxsearch.cpp	/^ExtQuorum_c::ExtQuorum_c ( CSphVector<ExtNode_i*> & dQwords, DWORD uDupeMask, const XQNode_t & tNode, const ISphQwordSetup & tSetup )$/;"	f	class:ExtQuorum_c
ExtQuorum_c	sphinxsearch.cpp	/^class ExtQuorum_c : public ExtNode_i$/;"	c	file:
ExtQwordOrderbyQueryPos_t	sphinxsearch.cpp	/^struct ExtQwordOrderbyQueryPos_t$/;"	s	file:
ExtQword_t	sphinxsearch.cpp	/^struct ExtQword_t$/;"	s	file:
ExtQwordsHash_t	sphinxsearch.cpp	/^typedef CSphOrderedHash < ExtQword_t, CSphString, QwordsHash_fn, 256 > ExtQwordsHash_t;$/;"	t	file:
ExtRanker_Expr_c	sphinxsearch.cpp	/^	ExtRanker_Expr_c ( const XQQuery_t & tXQ, const ISphQwordSetup & tSetup, const char * sExpr, const CSphSchema & tSchema )$/;"	f	class:ExtRanker_Expr_c
ExtRanker_Expr_c	sphinxsearch.cpp	/^class ExtRanker_Expr_c : public ExtRanker_T<RankerState_Expr_fn>$/;"	c	file:
ExtRanker_None_c	sphinxsearch.cpp	/^					ExtRanker_None_c ( const XQQuery_t & tXQ, const ISphQwordSetup & tSetup ) : ExtRanker_c ( tXQ, tSetup ) {}$/;"	f	class:ExtRanker_None_c
ExtRanker_None_c	sphinxsearch.cpp	/^class ExtRanker_None_c : public ExtRanker_c$/;"	c	file:
ExtRanker_T	sphinxsearch.cpp	/^					ExtRanker_T<STATE> ( const XQQuery_t & tXQ, const ISphQwordSetup & tSetup ) : ExtRanker_c ( tXQ, tSetup ) {}$/;"	f	class:ExtRanker_T
ExtRanker_T	sphinxsearch.cpp	/^class ExtRanker_T : public ExtRanker_c$/;"	c	file:
ExtRanker_WeightSum_c	sphinxsearch.cpp	/^					ExtRanker_WeightSum_c ( const XQQuery_t & tXQ, const ISphQwordSetup & tSetup ) : ExtRanker_c ( tXQ, tSetup ) {}$/;"	f	class:ExtRanker_WeightSum_c
ExtRanker_WeightSum_c	sphinxsearch.cpp	/^class ExtRanker_WeightSum_c : public ExtRanker_c$/;"	c	file:
ExtRanker_c	sphinxsearch.cpp	/^ExtRanker_c::ExtRanker_c ( const XQQuery_t & tXQ, const ISphQwordSetup & tSetup )$/;"	f	class:ExtRanker_c
ExtRanker_c	sphinxsearch.cpp	/^class ExtRanker_c : public ISphRanker, public ISphZoneCheck$/;"	c	file:
ExtTermHitless_c	sphinxsearch.cpp	/^									ExtTermHitless_c ( ISphQword * pQword, const CSphSmallBitvec& uFields, const ISphQwordSetup & tSetup, bool bNotWeighted )$/;"	f	class:ExtTermHitless_c
ExtTermHitless_c	sphinxsearch.cpp	/^class ExtTermHitless_c: public ExtTerm_c$/;"	c	file:
ExtTermPos_c	sphinxsearch.cpp	/^ExtTermPos_c<T>::ExtTermPos_c ( ISphQword * pQword, const XQNode_t * pNode, const ISphQwordSetup & tSetup )$/;"	f	class:ExtTermPos_c
ExtTermPos_c	sphinxsearch.cpp	/^class ExtTermPos_c : public ExtTerm_c$/;"	c	file:
ExtTerm_c	sphinxsearch.cpp	/^ExtTerm_c::ExtTerm_c ( ISphQword * pQword, const CSphSmallBitvec & dFields, const ISphQwordSetup & tSetup, bool bNotWeighted )$/;"	f	class:ExtTerm_c
ExtTerm_c	sphinxsearch.cpp	/^ExtTerm_c::ExtTerm_c ( ISphQword * pQword, const ISphQwordSetup & tSetup )$/;"	f	class:ExtTerm_c
ExtTerm_c	sphinxsearch.cpp	/^class ExtTerm_c : public ExtNode_i, ISphNoncopyable$/;"	c	file:
ExtTwofer_c	sphinxsearch.cpp	/^ExtTwofer_c::ExtTwofer_c ( ExtNode_i * pFirst, ExtNode_i * pSecond, const ISphQwordSetup & tSetup )$/;"	f	class:ExtTwofer_c
ExtTwofer_c	sphinxsearch.cpp	/^class ExtTwofer_c : public ExtNode_i$/;"	c	file:
ExtUnit_c	sphinxsearch.cpp	/^ExtUnit_c::ExtUnit_c ( ExtNode_i * pFirst, ExtNode_i * pSecond, const CSphSmallBitvec& uFields, const ISphQwordSetup & tSetup, const char * sUnit )$/;"	f	class:ExtUnit_c
ExtUnit_c	sphinxsearch.cpp	/^class ExtUnit_c : public ExtNode_i$/;"	c	file:
ExtractPassages	sphinxexcerpt.cpp	/^bool ExcerptGen_c::ExtractPassages ( const ExcerptQuery_t & q )$/;"	f	class:ExcerptGen_c
ExtractPhrases	sphinxexcerpt.cpp	/^bool ExcerptGen_c::ExtractPhrases ( const ExcerptQuery_t & )$/;"	f	class:ExcerptGen_c
ExtractWords	sphinxexcerpt.cpp	/^void SnippetsDocIndex_c::ExtractWords ( XQNode_t * pNode, CSphDict * pDict )$/;"	f	class:SnippetsDocIndex_c
F	md5.cpp	202;"	d	file:
F	sphinxstemru.cpp	/^		F	= 0x84D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
F	sphinxstemru.cpp	/^		F	= 0xD184U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
F	sphinxstemru.cpp	/^		F	= 0xF4,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
FFE_FAIL_INDEX	sphinx.h	/^	FFE_FAIL_INDEX$/;"	e	enum:ESphOnFileFieldError
FFE_IGNORE_FIELD	sphinx.h	/^	FFE_IGNORE_FIELD,$/;"	e	enum:ESphOnFileFieldError
FFE_SKIP_DOCUMENT	sphinx.h	/^	FFE_SKIP_DOCUMENT,$/;"	e	enum:ESphOnFileFieldError
FIELDEND_MASK	sphinx.h	/^		FIELDEND_MASK	= (1UL << POS_BITS),$/;"	e	enum:Hitman_c::__anon7
FIELDEND_OFF	sphinx.h	/^		FIELDEND_OFF	= 31 - FIELD_BITS,$/;"	e	enum:Hitman_c::__anon7
FIELD_OFF	sphinx.h	/^		FIELD_OFF		= 32 - FIELD_BITS,$/;"	e	enum:Hitman_c::__anon7
FIRST	sphinxexpr.cpp	382;"	d	file:
FLAG_CODEPOINT_BLEND	sphinx.cpp	/^	FLAG_CODEPOINT_BLEND	= 0x40000000UL	\/\/ this codepoint is "blended" (indexed both as a character, and as a separator)$/;"	e	enum:__anon18	file:
FLAG_CODEPOINT_BOUNDARY	sphinx.cpp	/^	FLAG_CODEPOINT_BOUNDARY	= 0x10000000UL,	\/\/ this codepoint is phrase boundary$/;"	e	enum:__anon18	file:
FLAG_CODEPOINT_DUAL	sphinx.cpp	/^	FLAG_CODEPOINT_DUAL		= 0x02000000UL,	\/\/ this codepoint is special but also a valid word part$/;"	e	enum:__anon18	file:
FLAG_CODEPOINT_IGNORE	sphinx.cpp	/^	FLAG_CODEPOINT_IGNORE	= 0x20000000UL,	\/\/ this codepoint is ignored$/;"	e	enum:__anon18	file:
FLAG_CODEPOINT_NGRAM	sphinx.cpp	/^	FLAG_CODEPOINT_NGRAM	= 0x04000000UL,	\/\/ this codepoint is n-gram indexed$/;"	e	enum:__anon18	file:
FLAG_CODEPOINT_SPECIAL	sphinx.cpp	/^	FLAG_CODEPOINT_SPECIAL	= 0x01000000UL,	\/\/ this codepoint is special$/;"	e	enum:__anon18	file:
FLAG_CODEPOINT_SYNONYM	sphinx.cpp	/^	FLAG_CODEPOINT_SYNONYM	= 0x08000000UL,	\/\/ this codepoint is used in synonym tokens only$/;"	e	enum:__anon18	file:
FLEXINT_H	llsphinxql.c	30;"	d	file:
FLEX_BETA	llsphinxql.c	14;"	d	file:
FLEX_SCANNER	llsphinxql.c	9;"	d	file:
FSMmultinear	sphinxsearch.cpp	/^FSMmultinear::FSMmultinear ( const CSphVector<ExtNode_i *> & dNodes, DWORD, const XQNode_t & tNode, const ISphQwordSetup & )$/;"	f	class:FSMmultinear
FSMmultinear	sphinxsearch.cpp	/^class FSMmultinear$/;"	c	file:
FSMphrase	sphinxsearch.cpp	/^FSMphrase::FSMphrase ( const CSphVector<ExtNode_i *> & dQwords, DWORD, const XQNode_t & , const ISphQwordSetup & )$/;"	f	class:FSMphrase
FSMphrase	sphinxsearch.cpp	/^class FSMphrase$/;"	c	file:
FSMproximity	sphinxsearch.cpp	/^FSMproximity::FSMproximity ( const CSphVector<ExtNode_i *> & dQwords, DWORD, const XQNode_t & tNode, const ISphQwordSetup & )$/;"	f	class:FSMproximity
FSMproximity	sphinxsearch.cpp	/^class FSMproximity$/;"	c	file:
FUNC_ABS	sphinxexpr.cpp	/^	FUNC_ABS,$/;"	e	enum:Func_e	file:
FUNC_ATTR_ASC	sphinxsort.cpp	/^	FUNC_ATTR_ASC,$/;"	e	enum:ESphSortFunc	file:
FUNC_ATTR_DESC	sphinxsort.cpp	/^	FUNC_ATTR_DESC,$/;"	e	enum:ESphSortFunc	file:
FUNC_BIGINT	sphinxexpr.cpp	/^	FUNC_BIGINT,$/;"	e	enum:Func_e	file:
FUNC_BITDOT	sphinxexpr.cpp	/^	FUNC_BITDOT,$/;"	e	enum:Func_e	file:
FUNC_CEIL	sphinxexpr.cpp	/^	FUNC_CEIL,$/;"	e	enum:Func_e	file:
FUNC_COS	sphinxexpr.cpp	/^	FUNC_COS,$/;"	e	enum:Func_e	file:
FUNC_CRC32	sphinxexpr.cpp	/^	FUNC_CRC32,$/;"	e	enum:Func_e	file:
FUNC_CUSTOM	sphinxsort.cpp	/^	FUNC_CUSTOM,$/;"	e	enum:ESphSortFunc	file:
FUNC_DAY	sphinxexpr.cpp	/^	FUNC_DAY,$/;"	e	enum:Func_e	file:
FUNC_EXP	sphinxexpr.cpp	/^	FUNC_EXP,$/;"	e	enum:Func_e	file:
FUNC_EXPR	sphinxsort.cpp	/^	FUNC_EXPR$/;"	e	enum:ESphSortFunc	file:
FUNC_FIBONACCI	sphinxexpr.cpp	/^	FUNC_FIBONACCI,$/;"	e	enum:Func_e	file:
FUNC_FLOOR	sphinxexpr.cpp	/^	FUNC_FLOOR,$/;"	e	enum:Func_e	file:
FUNC_GENERIC2	sphinxsort.cpp	/^	FUNC_GENERIC2,$/;"	e	enum:ESphSortFunc	file:
FUNC_GENERIC3	sphinxsort.cpp	/^	FUNC_GENERIC3,$/;"	e	enum:ESphSortFunc	file:
FUNC_GENERIC4	sphinxsort.cpp	/^	FUNC_GENERIC4,$/;"	e	enum:ESphSortFunc	file:
FUNC_GENERIC5	sphinxsort.cpp	/^	FUNC_GENERIC5,$/;"	e	enum:ESphSortFunc	file:
FUNC_GEODIST	sphinxexpr.cpp	/^	FUNC_GEODIST$/;"	e	enum:Func_e	file:
FUNC_IDIV	sphinxexpr.cpp	/^	FUNC_IDIV,$/;"	e	enum:Func_e	file:
FUNC_IF	sphinxexpr.cpp	/^	FUNC_IF,$/;"	e	enum:Func_e	file:
FUNC_IN	sphinxexpr.cpp	/^	FUNC_IN,$/;"	e	enum:Func_e	file:
FUNC_INTERVAL	sphinxexpr.cpp	/^	FUNC_INTERVAL,$/;"	e	enum:Func_e	file:
FUNC_LN	sphinxexpr.cpp	/^	FUNC_LN,$/;"	e	enum:Func_e	file:
FUNC_LOG10	sphinxexpr.cpp	/^	FUNC_LOG10,$/;"	e	enum:Func_e	file:
FUNC_LOG2	sphinxexpr.cpp	/^	FUNC_LOG2,$/;"	e	enum:Func_e	file:
FUNC_MADD	sphinxexpr.cpp	/^	FUNC_MADD,$/;"	e	enum:Func_e	file:
FUNC_MAX	sphinxexpr.cpp	/^	FUNC_MAX,$/;"	e	enum:Func_e	file:
FUNC_MIN	sphinxexpr.cpp	/^	FUNC_MIN,$/;"	e	enum:Func_e	file:
FUNC_MONTH	sphinxexpr.cpp	/^	FUNC_MONTH,$/;"	e	enum:Func_e	file:
FUNC_MUL3	sphinxexpr.cpp	/^	FUNC_MUL3,$/;"	e	enum:Func_e	file:
FUNC_NOW	sphinxexpr.cpp	/^	FUNC_NOW,$/;"	e	enum:Func_e	file:
FUNC_POW	sphinxexpr.cpp	/^	FUNC_POW,$/;"	e	enum:Func_e	file:
FUNC_REL_DESC	sphinxsort.cpp	/^	FUNC_REL_DESC,$/;"	e	enum:ESphSortFunc	file:
FUNC_SIN	sphinxexpr.cpp	/^	FUNC_SIN,$/;"	e	enum:Func_e	file:
FUNC_SINT	sphinxexpr.cpp	/^	FUNC_SINT,$/;"	e	enum:Func_e	file:
FUNC_SQRT	sphinxexpr.cpp	/^	FUNC_SQRT,$/;"	e	enum:Func_e	file:
FUNC_TIMESEGS	sphinxsort.cpp	/^	FUNC_TIMESEGS,$/;"	e	enum:ESphSortFunc	file:
FUNC_YEAR	sphinxexpr.cpp	/^	FUNC_YEAR,$/;"	e	enum:Func_e	file:
FUNC_YEARMONTH	sphinxexpr.cpp	/^	FUNC_YEARMONTH,$/;"	e	enum:Func_e	file:
FUNC_YEARMONTHDAY	sphinxexpr.cpp	/^	FUNC_YEARMONTHDAY,$/;"	e	enum:Func_e	file:
FailClient	searchd.cpp	/^void FailClient ( int iSock, SearchdStatus_e eStatus, const char * sMessage )$/;"	f
Fibonacci	sphinxexpr.cpp	/^static inline int Fibonacci ( int i )$/;"	f	file:
FieldMVARedirect_t	sphinx.cpp	/^struct FieldMVARedirect_t$/;"	s	file:
Fill	sphinxstd.h	/^	void Fill ( const T & rhs )$/;"	f	class:CSphVector
FillArgs	sphinxexpr.cpp	/^	void FillArgs ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_Udf_c
FillTokenInfo	sphinx.cpp	/^void CSphTokenizer_Filter::FillTokenInfo ( StoredToken_t * pToken )$/;"	f	class:CSphTokenizer_Filter
FilterHits	sphinxsearch.cpp	/^int ExtUnit_c::FilterHits ( int iMyHit, DWORD uSentenceEnd, SphDocID_t uDocid, int * pDoc )$/;"	f	class:ExtUnit_c
FilterStopword	sphinx.cpp	/^SphWordID_t CSphDictCRCTraits::FilterStopword ( SphWordID_t uID ) const$/;"	f	class:CSphDictCRCTraits
Filter_And	sphinxfilter.cpp	/^	Filter_And ()$/;"	f	struct:Filter_And
Filter_And	sphinxfilter.cpp	/^struct Filter_And: public ISphFilter$/;"	s	file:
Filter_FloatRange	sphinxfilter.cpp	/^struct Filter_FloatRange: public IFilter_Attr$/;"	s	file:
Filter_IdRange	sphinxfilter.cpp	/^	Filter_IdRange ()$/;"	f	struct:Filter_IdRange
Filter_IdRange	sphinxfilter.cpp	/^struct Filter_IdRange: public IFilter_Range$/;"	s	file:
Filter_IdValues	sphinxfilter.cpp	/^	Filter_IdValues ()$/;"	f	struct:Filter_IdValues
Filter_IdValues	sphinxfilter.cpp	/^struct Filter_IdValues: public IFilter_Values$/;"	s	file:
Filter_MVARange	sphinxfilter.cpp	/^struct Filter_MVARange: public IFilter_MVA, IFilter_Range$/;"	s	file:
Filter_MVAValues	sphinxfilter.cpp	/^struct Filter_MVAValues: public IFilter_MVA, IFilter_Values$/;"	s	file:
Filter_Not	sphinxfilter.cpp	/^	explicit Filter_Not ( ISphFilter * pFilter )$/;"	f	struct:Filter_Not
Filter_Not	sphinxfilter.cpp	/^struct Filter_Not: public ISphFilter$/;"	s	file:
Filter_Range	sphinxfilter.cpp	/^struct Filter_Range: public IFilter_Attr, IFilter_Range$/;"	s	file:
Filter_Values	sphinxfilter.cpp	/^struct Filter_Values: public IFilter_Attr, IFilter_Values$/;"	s	file:
Filter_WeightRange	sphinxfilter.cpp	/^	Filter_WeightRange ()$/;"	f	struct:Filter_WeightRange
Filter_WeightRange	sphinxfilter.cpp	/^struct Filter_WeightRange: public IFilter_Range$/;"	s	file:
Filter_WeightValues	sphinxfilter.cpp	/^	Filter_WeightValues ()$/;"	f	struct:Filter_WeightValues
Filter_WeightValues	sphinxfilter.cpp	/^struct Filter_WeightValues: public IFilter_Values$/;"	s	file:
Finalize	sphinxsearch.cpp	/^	DWORD Finalize ( const CSphMatch & )$/;"	f	struct:RankerState_Fieldmask_fn
Finalize	sphinxsearch.cpp	/^	DWORD Finalize ( const CSphMatch & )$/;"	f	struct:RankerState_MatchAny_fn
Finalize	sphinxsearch.cpp	/^	DWORD Finalize ( const CSphMatch & )$/;"	f	struct:RankerState_Wordcount_fn
Finalize	sphinxsearch.cpp	/^	DWORD Finalize ( const CSphMatch & tMatch )$/;"	f	struct:RankerState_ProximityBM25Exact_fn
Finalize	sphinxsearch.cpp	/^	DWORD Finalize ( const CSphMatch & tMatch )$/;"	f	struct:RankerState_ProximityPayload_fn
Finalize	sphinxsearch.cpp	/^	DWORD Finalize ( const CSphMatch & tMatch )$/;"	f	struct:RankerState_Proximity_fn
Finalize	sphinxsearch.cpp	/^DWORD RankerState_Expr_fn::Finalize ( const CSphMatch & tMatch )$/;"	f	class:RankerState_Expr_fn
Finalize	sphinxsort.cpp	/^	virtual CSphMatch *	Finalize ()												{ return m_pData; }$/;"	f	class:CSphMatchQueueTraits
Finalize	sphinxsort.cpp	/^	virtual CSphMatch * Finalize()$/;"	f	class:CSphKBufferGroupSorter
Finalize	sphinxsort.cpp	/^	virtual void	Finalize ( CSphMatch * ) {}$/;"	f	class:IAggrFunc
Finalize	sphinxsort.cpp	/^	virtual void Finalize ( CSphMatch * pDst )$/;"	f	class:AggrAvg_t
FindAddZone	sphinxexcerpt.cpp	/^int FindAddZone ( const char * sZoneName, int iZoneNameLen, SmallStringHash_T<int> & hZones )$/;"	f
FindBit	sphinxint.h	/^inline int FindBit ( DWORD uValue )$/;"	f
FindByKey	sphinxstd.h	/^	HashEntry_t * FindByKey ( const KEY & tKey ) const$/;"	f	class:CSphOrderedHash
FindCheckpoint	sphinx.cpp	/^const CSphWordlistCheckpoint * CWordlist::FindCheckpoint ( const char * sWord, int iWordLen, SphWordID_t iWordID, bool bStarMode ) const$/;"	f	class:CWordlist
FindDocinfo	sphinx.cpp	/^const DWORD * CSphIndex_VLN::FindDocinfo ( SphDocID_t uDocID ) const$/;"	f	class:CSphIndex_VLN
FindFirst	indexer.cpp	/^	const CSphMTFHashEntry<T> * FindFirst ()$/;"	f	class:CSphMTFHash
FindFirstGte	sphinx.cpp	/^static CSphWordHit * FindFirstGte ( CSphWordHit * pHits, int iHits, SphWordID_t uID )$/;"	f	file:
FindNext	indexer.cpp	/^	const CSphMTFHashEntry<T> * FindNext ( const CSphMTFHashEntry<T> * pEntry )$/;"	f	class:CSphMTFHash
FindSpan	sphinxint.h	/^static int FindSpan ( const CSphVector<T> & dVec, T tRef, int iSmallTreshold=8 )$/;"	f
FindStarred	sphinxexcerpt.cpp	/^int SnippetsDocIndex_c::FindStarred ( const char * sWord, int uStarPosition ) const$/;"	f	class:SnippetsDocIndex_c
FindString	sphinxexcerpt.cpp	/^static BYTE * FindString ( BYTE * sBuffer, BYTE * sFind, int iLimit )$/;"	f	file:
FindTag	sphinx.cpp	/^const BYTE * CSphHTMLStripper::FindTag ( const BYTE * sSrc, const StripperTag_t ** ppTag, const BYTE ** ppZoneName, int * pZoneNameLen ) const$/;"	f	class:CSphHTMLStripper
FindTagEnd	sphinxexcerpt.cpp	/^static int FindTagEnd ( const char * sData )$/;"	f	file:
FindWord	sphinxexcerpt.cpp	/^int SnippetsDocIndex_c::FindWord ( SphWordID_t iWordID, const BYTE * sWord, int iWordLen ) const$/;"	f	class:SnippetsDocIndex_c
FinishCollect	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::FinishCollect ( bool bMvaOnly )$/;"	f	class:AttrIndexBuilder_t
First	sphinx.h	/^	const CSphWordHit * First () const$/;"	f	class:ISphHits
FixRefSpec	sphinxquery.cpp	/^	inline void FixRefSpec ()$/;"	f	class:XQParser_t
FixupDegenerates	sphinxquery.cpp	/^static void FixupDegenerates ( XQNode_t * pNode )$/;"	f	file:
FixupDependency	sphinxsort.cpp	/^static bool FixupDependency ( CSphSchema & tSchema, const int * pAttrs, int iAttrCount )$/;"	f	file:
FixupFiles	indextool.cpp	/^bool FixupFiles ( const CSphVector<CSphString> & dFiles, CSphString & sError )$/;"	f
FixupNots	sphinxquery.cpp	/^bool XQParser_t::FixupNots ( XQNode_t * pNode )$/;"	f	class:XQParser_t
FixupQuery	searchd.cpp	/^bool FixupQuery ( CSphQuery * pQuery, const CSphSchema * pSchema, const char * sIndexName, CSphString & sError )$/;"	f
Flag	spelldump.cpp	/^char CISpellAffixRule::Flag () const$/;"	f	class:CISpellAffixRule
FlagCommonSubtrees	sphinxquery.cpp	/^static void FlagCommonSubtrees ( XQNode_t * pTree, CSubtreeHash & hSubTrees, bool bFlag=true, bool bMarkIt=true )$/;"	f	file:
Flatten	sphinxsort.cpp	/^	void Flatten ( CSphMatch * pTo, int iTag )$/;"	f	class:CSphKBufferGroupSorter
Flatten	sphinxsort.cpp	/^	void Flatten ( CSphMatch * pTo, int iTag )$/;"	f	class:CSphMatchQueue
Flatten	sphinxsort.cpp	/^	void Flatten ( CSphMatch *, int )$/;"	f	class:CSphUpdateQueue
FlattenToRes	searchd.cpp	/^static void FlattenToRes ( ISphMatchSorter * pSorter, AggrResult_t & tRes )$/;"	f	file:
FloatVal	sphinxexpr.cpp	/^	float FloatVal()$/;"	f	struct:ExprNode_t
FloatVal	sphinxexpr.cpp	/^static inline float FloatVal ( const ExprNode_t * pNode )$/;"	f	file:
Flush	searchd.cpp	/^bool NetOutputBuffer_c::Flush ( bool bUnfreeze )$/;"	f	class:NetOutputBuffer_c
Flush	sphinx.cpp	/^void CSphWriter::Flush ()$/;"	f	class:CSphWriter
FlushAccum	sphinx.cpp	/^void CSphTokenizer_UTF8::FlushAccum ()$/;"	f	class:CSphTokenizer_UTF8
FlushComputed	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::FlushComputed ( bool bUseAttrs, bool bUseMvas )$/;"	f	class:AttrIndexBuilder_t
FlushIf	searchd.cpp	/^bool NetOutputBuffer_c::FlushIf ( int iToAdd )$/;"	f	class:NetOutputBuffer_c
FlushPassage	sphinxexcerpt.cpp	/^bool ExcerptGen_c::FlushPassage ( const Passage_t & tPass, int iLCSThresh )$/;"	f	class:ExcerptGen_c
FlushState_t	searchd.cpp	/^struct FlushState_t$/;"	s	file:
FoldArglist	sphinxexpr.cpp	/^static void FoldArglist ( ISphExpr * pLeft, CSphVector<ISphExpr *> & dArgs )$/;"	f	file:
FormatEscaped	sphinx.cpp	/^static void FormatEscaped ( FILE * fp, const char * sLine )$/;"	f	file:
FormatMsec	searchd.cpp	/^static inline void FormatMsec ( CSphString & sOut, int64_t tmTime )$/;"	f	file:
FormatOrderBy	searchd.cpp	/^void FormatOrderBy ( CSphStringBuilder * pBuf, const char * sPrefix, ESphSortOrder eSort, const CSphString & sSort )$/;"	f
FreeAgentStats	searchd.cpp	/^void FreeAgentStats ( DistributedIndex_t & tIndex )$/;"	f
FreeNamedVec	searchd.cpp	/^void SqlParser_c::FreeNamedVec ( int iIndex )$/;"	f	class:SqlParser_c
FreezeBlock	searchd.cpp	/^void NetOutputBuffer_c::FreezeBlock ( const char * sError, int iLen )$/;"	f	class:NetOutputBuffer_c
FullIsLess	sphinx.cpp	/^static inline bool FullIsLess ( const CSphDictKeywords::HitblockException_t & a, const CSphDictKeywords::HitblockException_t & b )$/;"	f	file:
FuncDesc_t	sphinxexpr.cpp	/^struct FuncDesc_t$/;"	s	file:
Func_e	sphinxexpr.cpp	/^enum Func_e$/;"	g	file:
G	md5.cpp	228;"	d	file:
G	sphinxstemru.cpp	/^		G	= 0xB3D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
G	sphinxstemru.cpp	/^		G	= 0xD0B3U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
G	sphinxstemru.cpp	/^		G	= 0xE3,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
GAP	tests.cpp	/^const int GAP = 4;$/;"	v
GETADDR_STRICT	searchd.cpp	/^static const bool GETADDR_STRICT = true; \/\/\/< strict check, will die with sphFatal() on failure$/;"	v	file:
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GROUPBY_FACTOR	sphinxsort.cpp	/^	static const int			GROUPBY_FACTOR = 4;	\/\/\/< allocate this times more storage when doing group-by (k, as in k-buffer)$/;"	m	class:CSphKBufferGroupSorter	file:
GROUPER_BEGIN	sphinxsort.cpp	316;"	d	file:
GROUPER_BEGIN_SPLIT	sphinxsort.cpp	335;"	d	file:
GROUPER_END	sphinxsort.cpp	330;"	d	file:
GatherArgNodes	sphinxexpr.cpp	/^void ExprParser_t::GatherArgNodes ( int iNode, CSphVector<int> & dNodes )$/;"	f	class:ExprParser_t
GatherArgRetTypes	sphinxexpr.cpp	/^void ExprParser_t::GatherArgRetTypes ( int iNode, CSphVector<ESphAttr> & dTypes )$/;"	f	class:ExprParser_t
GatherArgTypes	sphinxexpr.cpp	/^void ExprParser_t::GatherArgTypes ( int iNode, CSphVector<int> & dTypes )$/;"	f	class:ExprParser_t
GenerateKey	tests.cpp	/^	DWORD GenerateKey ( const DWORD * pData ) const$/;"	f	struct:TestAccCmp_fn
Get	searchd.cpp	/^	char * Get ()$/;"	f	class:SqlRowBuffer_c
Get	searchd.cpp	/^ServedIndex_t & IndexHashIterator_c::Get ()$/;"	f	class:IndexHashIterator_c
GetActualSize	sphinxint.h	/^	inline DWORD GetActualSize() const$/;"	f	class:AttrIndexBuilder_t
GetAggrCount	sphinx.cpp	/^	int GetAggrCount () const$/;"	f	struct:CSphAggregateHit
GetAttr	sphinx.cpp	/^const CSphColumnInfo * CSphSchema::GetAttr ( const char * sName ) const$/;"	f	class:CSphSchema
GetAttr	sphinx.h	/^	SphAttr_t GetAttr ( const CSphAttrLocator & tLoc ) const$/;"	f	class:CSphMatch
GetAttr	sphinx.h	/^	const CSphColumnInfo &	GetAttr ( int iIndex ) const	{ return m_dAttrs[iIndex]; }$/;"	f	struct:CSphSchema
GetAttrFloat	sphinx.h	/^	float GetAttrFloat ( const CSphAttrLocator & tLoc ) const$/;"	f	class:CSphMatch
GetAttrIndex	sphinx.cpp	/^int CSphSchema::GetAttrIndex ( const char * sName ) const$/;"	f	class:CSphSchema
GetAttrMVA	sphinx.cpp	/^const DWORD * CSphMatch::GetAttrMVA ( const CSphAttrLocator & tLoc, const DWORD * pPool ) const$/;"	f	class:CSphMatch
GetAttributeStatus	sphinx.cpp	/^DWORD CSphIndex_VLN::GetAttributeStatus () const$/;"	f	class:CSphIndex_VLN
GetAttrsCount	sphinx.h	/^	int						GetAttrsCount () const			{ return m_dAttrs.GetLength(); }$/;"	f	struct:CSphSchema
GetBitOrder	sphinxquery.cpp	/^	inline int GetBitOrder ( uint64_t uHash ) const$/;"	f	class:RevealCommon_t	file:
GetBits	sphinxquery.cpp	/^	inline int GetBits() const { return m_iBits; }$/;"	f	class:CAssociations_t
GetBlendedVariant	sphinx.cpp	/^BYTE * CSphTokenizerTraits<IS_UTF8>::GetBlendedVariant ()$/;"	f	class:CSphTokenizerTraits
GetBoundary	sphinx.cpp	/^	virtual bool					GetBoundary ()								{ return m_pLastToken->m_bBoundary; }$/;"	f	class:CSphTokenizer_Filter
GetBoundary	sphinx.h	/^	virtual bool					GetBoundary () { return m_bTokenBoundary; }$/;"	f	class:ISphTokenizer
GetBoundaryOffset	sphinx.h	/^	virtual int						GetBoundaryOffset () { return m_iBoundaryOffset; }$/;"	f	class:ISphTokenizer
GetBufferEnd	sphinx.cpp	/^	virtual const char *			GetBufferEnd () const		{ return m_pTokenizer->GetBufferEnd (); }$/;"	f	class:CSphTokenizer_Filter
GetBufferEnd	sphinx.cpp	/^	virtual const char *	GetBufferEnd () const		{ return (const char *) m_pBufferMax; }$/;"	f	class:CSphTokenizerTraits
GetBufferPtr	searchd.cpp	/^	const BYTE *	GetBufferPtr () const { return m_pBuf; }$/;"	f	class:NetInputBuffer_c
GetBufferPtr	sphinx.cpp	/^	virtual const char *			GetBufferPtr () const		{ return m_pLastToken ? m_pLastToken->m_pBufferPtr : m_pTokenizer->GetBufferPtr(); }$/;"	f	class:CSphTokenizer_Filter
GetBufferPtr	sphinx.cpp	/^	virtual const char *	GetBufferPtr () const		{ return (const char *) m_pCur; }$/;"	f	class:CSphTokenizerTraits
GetBufferString	sphinxutils.cpp	/^char * CSphConfigParser::GetBufferString ( char * szDest, int iMax, const char * & szSource )$/;"	f	class:CSphConfigParser
GetByte	searchd.cpp	/^	BYTE			GetByte () { return GetT<BYTE> (); }$/;"	f	class:InputBuffer_c
GetByte	sphinx.cpp	/^int CSphReader::GetByte ()$/;"	f	class:CSphReader
GetBytes	searchd.cpp	/^	bool GetBytes ( void * pBuf, int iCount )$/;"	f	struct:PipeReader_t
GetBytes	searchd.cpp	/^bool InputBuffer_c::GetBytes ( void * pBuf, int iLen )$/;"	f	class:InputBuffer_c
GetBytes	sphinx.cpp	/^void CSphReader::GetBytes ( void * pData, int iSize )$/;"	f	class:CSphReader
GetBytesZerocopy	sphinx.cpp	/^int CSphReader::GetBytesZerocopy ( const BYTE ** ppData, int iMax )$/;"	f	class:CSphReader
GetCharIndex	sphinx.cpp	/^int CSphHTMLStripper::GetCharIndex ( int iCh ) const$/;"	f	class:CSphHTMLStripper
GetCodepoint	sphinx.cpp	/^	inline int GetCodepoint ()$/;"	f	class:CSphTokenizerTraits
GetCodepointLength	sphinx.cpp	/^	virtual int						GetCodepointLength ( int iCode ) const		{ return m_pTokenizer->GetCodepointLength ( iCode ); }$/;"	f	class:CSphTokenizer_Filter
GetCodepointLength	sphinx.cpp	/^	virtual int					GetCodepointLength ( int ) const { return 1; }$/;"	f	class:CSphTokenizer_SBCS
GetCodepointLength	sphinx.cpp	/^int CSphTokenizer_UTF8::GetCodepointLength ( int iCode ) const$/;"	f	class:CSphTokenizer_UTF8
GetCount	sphinxquery.h	/^	int GetCount () const$/;"	f	struct:XQNode_t
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const { m_pFirst->GetDependencyColumns ( dColumns ); }$/;"	f	struct:Expr_Unary_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:Expr_ArgVsSet_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:Expr_Bitdot_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:Expr_GeodistAttrConst_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:Expr_GeodistConst_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:Expr_Geodist_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:Expr_Interval_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:Expr_MVAIn_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	struct:ExprLocatorTraits_t
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	struct:Expr_Arglist_c
GetDependencyColumns	sphinxexpr.cpp	/^	virtual void GetDependencyColumns ( CSphVector<int> & dDeps ) const { ARRAY_FOREACH ( i, m_dArgs ) m_dArgs[i]->GetDependencyColumns ( dDeps ); }$/;"	f	class:Expr_Udf_c
GetDependencyColumns	sphinxexpr.h	/^	virtual void GetDependencyColumns ( CSphVector<int> & ) const {}$/;"	f	struct:ISphExpr
GetDependencyColumns	sphinxsort.cpp	/^void ExprGeodist_t::GetDependencyColumns ( CSphVector<int> & dColumns ) const$/;"	f	class:ExprGeodist_t
GetDictionary	sphinx.h	/^	CSphDict *					GetDictionary () const { return m_pDict; }$/;"	f	class:CSphIndex
GetDocid	sphinxint.h	/^	SphDocID_t	GetDocid ()		{ return GetDword(); }$/;"	f	class:CSphReader
GetDocid	sphinxint.h	/^	SphDocID_t	GetDocid ()		{ return GetOffset(); }$/;"	f	class:CSphReader
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtAndNot_c::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtAndNot_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtAnd_c::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtAnd_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtNWay_c<FSM>::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtNWay_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtNodeCached_t::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtNodeCached_t
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtOr_c::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtOr_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtOrder_c::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtOrder_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtQuorum_c::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtQuorum_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtTermPos_c<T>::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtTermPos_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtTerm_c::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtTerm_c
GetDocsChunk	sphinxsearch.cpp	/^const ExtDoc_t * ExtUnit_c::GetDocsChunk ( SphDocID_t * pMaxID )$/;"	f	class:ExtUnit_c
GetDocsCount	sphinxsearch.cpp	/^	virtual int					GetDocsCount () { return INT_MAX; }$/;"	f	class:ExtNode_i
GetDocsCount	sphinxsearch.cpp	/^	virtual int					GetDocsCount () { return m_pQword->m_iDocs; }$/;"	f	class:ExtTerm_c
GetDword	searchd.cpp	/^	DWORD			GetDword () { return ntohl ( GetT<DWORD> () ); }$/;"	f	class:InputBuffer_c
GetDword	sphinx.cpp	/^DWORD CSphReader::GetDword ()$/;"	f	class:CSphReader
GetDwords	searchd.cpp	/^int InputBuffer_c::GetDwords ( DWORD ** ppBuffer, int iMax, const char * sErrorTemplate )$/;"	f	class:InputBuffer_c
GetDwords	searchd.cpp	/^template < typename T > bool InputBuffer_c::GetDwords ( CSphVector<T> & dBuffer, int iMax, const char * sErrorTemplate )$/;"	f	class:InputBuffer_c
GetDynamicSize	sphinx.h	/^	int						GetDynamicSize () const			{ return m_dDynamicUsed.GetLength(); }$/;"	f	struct:CSphSchema
GetError	searchd.cpp	/^	bool			GetError () { return m_bError; }$/;"	f	class:InputBuffer_c
GetError	searchd.cpp	/^	bool		GetError () { return m_bError; }$/;"	f	class:NetOutputBuffer_c
GetError	sphinx.cpp	/^	const char *			GetError () const { return m_sError.cstr(); }$/;"	f	class:CSphArena
GetErrorFlag	sphinxint.h	/^	bool					GetErrorFlag () const		{ return m_bError; }$/;"	f	class:CSphReader
GetErrorMessage	sphinxint.h	/^	const CSphString &		GetErrorMessage () const	{ return m_sError; }$/;"	f	class:CSphReader
GetExpectedSize	sphinxint.h	/^	inline DWORD GetExpectedSize ( DWORD uMaxDocs ) const$/;"	f	class:AttrIndexBuilder_t
GetFD	searchd.cpp	/^	int GetFD () const$/;"	f	struct:PipeReader_t
GetFD	sphinxint.h	/^	int				GetFD () const { return m_iFD; }$/;"	f	class:CSphAutofile
GetFD	sphinxint.h	/^	int			GetFD () { return m_iFD; }$/;"	f	class:CSphAutoreader
GetFNV	sphinx.cpp	/^uint64_t CSphLowercaser::GetFNV () const$/;"	f	class:CSphLowercaser
GetField	sphinx.h	/^	static inline int GetField ( Hitpos_t uHitpos )$/;"	f	class:Hitman_c
GetFieldIndex	sphinx.cpp	/^int CSphSchema::GetFieldIndex ( const char * sName ) const$/;"	f	class:CSphSchema
GetFileStats	sphinx.cpp	/^static void GetFileStats ( const char * szFilename, CSphSavedFile & tInfo )$/;"	f	file:
GetFilename	sphinx.cpp	/^const char * CSphAutofile::GetFilename () const$/;"	f	class:CSphAutofile
GetFilename	sphinxint.h	/^	const CSphString &		GetFilename() const			{ return m_sFilename; }$/;"	f	class:CSphReader
GetFilesize	sphinx.cpp	/^SphOffset_t CSphAutoreader::GetFilesize ()$/;"	f	class:CSphAutoreader
GetFilteredDocs	sphinxsearch.cpp	/^const ExtDoc_t * ExtRanker_c::GetFilteredDocs ()$/;"	f	class:ExtRanker_c
GetFloat	searchd.cpp	/^	float			GetFloat () { return sphDW2F ( ntohl ( GetT<DWORD> () ) ); }$/;"	f	class:InputBuffer_c
GetFloat	sphinxutils.h	/^	float GetFloat ( const char * sKey, float fDefault=0.0f ) const$/;"	f	class:CSphConfigSection
GetHash	sphinxquery.cpp	/^uint64_t XQNode_t::GetHash() const$/;"	f	class:XQNode_t
GetHitlist	sphinxexcerpt.cpp	/^	virtual const CSphVector<int> * GetHitlist ( const XQKeyword_t & ) const$/;"	f	class:HighlightPlain_c
GetHitlist	sphinxexcerpt.cpp	/^	virtual const CSphVector<int> * GetHitlist ( const XQKeyword_t & tWord ) const$/;"	f	class:HitCollector_c
GetHitlistEntry	sphinx.cpp	/^	void GetHitlistEntry ()$/;"	f	class:DiskIndexQword_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtAndNot_c::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t uMaxID )$/;"	f	class:ExtAndNot_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtAnd_c::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t uMaxID )$/;"	f	class:ExtAnd_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtNWay_c<FSM>::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t uMaxID )$/;"	f	class:ExtNWay_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtNodeCached_t::GetHitsChunk ( const ExtDoc_t * pMatched, SphDocID_t uMaxID )$/;"	f	class:ExtNodeCached_t
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtOr_c::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t uMaxID )$/;"	f	class:ExtOr_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtOrder_c::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t )$/;"	f	class:ExtOrder_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtQuorum_c::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t uMaxID )$/;"	f	class:ExtQuorum_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtTermHitless_c::GetHitsChunk ( const ExtDoc_t * pMatched, SphDocID_t uMaxID )$/;"	f	class:ExtTermHitless_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtTermPos_c<T>::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t uMaxID )$/;"	f	class:ExtTermPos_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtTerm_c::GetHitsChunk ( const ExtDoc_t * pMatched, SphDocID_t uMaxID )$/;"	f	class:ExtTerm_c
GetHitsChunk	sphinxsearch.cpp	/^const ExtHit_t * ExtUnit_c::GetHitsChunk ( const ExtDoc_t * pDocs, SphDocID_t )$/;"	f	class:ExtUnit_c
GetIOStats	sphinx.cpp	/^static CSphIOStats * GetIOStats ()$/;"	f	file:
GetIdentType	sphinxsearch.cpp	/^	ESphAttr GetIdentType ( int iID )$/;"	f	class:ExprRankerHook_c
GetIndexFileName	sphinx.cpp	/^CSphString CSphIndex_VLN::GetIndexFileName ( const char * sExt ) const$/;"	f	class:CSphIndex_VLN
GetIndexWeight	sphinx.cpp	/^int CSphQuery::GetIndexWeight ( const char * sName ) const$/;"	f	class:CSphQuery
GetInt	searchd.cpp	/^	int				GetInt () { return ntohl ( GetT<int> () ); }$/;"	f	class:InputBuffer_c
GetInt	searchd.cpp	/^	int GetInt ()$/;"	f	struct:PipeReader_t
GetInt	sphinxutils.h	/^	int GetInt ( const char * sKey, int iDefault=0 ) const$/;"	f	class:CSphConfigSection
GetIntType	sphinxexpr.cpp	/^static inline ESphAttr GetIntType ( int64_t iValue )$/;"	f	file:
GetInternalSchema	sphinxrt.h	/^	virtual const CSphSchema & GetInternalSchema () const { return m_tSchema; }$/;"	f	class:ISphRtIndex
GetKey	searchd.cpp	/^const CSphString & IndexHashIterator_c::GetKey ()$/;"	f	class:IndexHashIterator_c
GetKeyPtr	sphinxstd.h	/^	const KEY * GetKeyPtr ( const KEY & tKey ) const$/;"	f	class:CSphOrderedHash
GetKeywords	sphinx.cpp	/^bool CSphIndex_VLN::GetKeywords ( CSphVector <CSphKeywordInfo> & dKeywords, const char * szQuery, bool bGetStats, CSphString & sError ) const$/;"	f	class:CSphIndex_VLN
GetKillList	sphinx.cpp	/^SphAttr_t * CSphIndex_VLN::GetKillList () const$/;"	f	class:CSphIndex_VLN
GetKillListSize	sphinx.cpp	/^	virtual int					GetKillListSize () const { return m_iKillListSize; }$/;"	f	class:CSphIndex_VLN
GetLCS	sphinx.h	/^	static inline DWORD GetLCS ( Hitpos_t uHitpos )$/;"	f	class:Hitman_c
GetLSBDword	searchd.cpp	/^	DWORD			GetLSBDword () { return GetByte() + ( GetByte()<<8 ) + ( GetByte()<<16 ) + ( GetByte()<<24 ); }$/;"	f	class:InputBuffer_c
GetLastError	sphinx.cpp	/^const char * CSphCharsetDefinitionParser::GetLastError ()$/;"	f	class:CSphCharsetDefinitionParser
GetLastError	sphinx.h	/^	virtual const CSphString &	GetLastError () const { return m_sLastError; }$/;"	f	class:CSphIndex
GetLastTokenLen	sphinx.cpp	/^	virtual int						GetLastTokenLen () const					{ return m_pLastToken->m_iTokenLen; }$/;"	f	class:CSphTokenizer_Filter
GetLastTokenLen	sphinx.h	/^	virtual int						GetLastTokenLen () const { return m_iLastTokenLen; }$/;"	f	class:ISphTokenizer
GetLastWarning	sphinx.h	/^	virtual const CSphString &	GetLastWarning () const { return m_sLastWarning; }$/;"	f	class:CSphIndex
GetLength	searchd.cpp	/^	int						GetLength () const { return BASE::GetLength(); }$/;"	f	class:IndexHash_c
GetLength	sphinx.cpp	/^	inline int GetLength () const$/;"	f	class:CSphQueue
GetLength	sphinxsort.cpp	/^	int GetLength () const$/;"	f	class:CSphKBufferGroupSorter
GetLength	sphinxsort.cpp	/^	virtual int			GetLength () const										{ return m_iUsed; }$/;"	f	class:CSphMatchQueueTraits
GetLength	sphinxstd.h	/^	inline int GetLength () const$/;"	f	class:CSphVector
GetLength	sphinxstd.h	/^	int GetLength () const$/;"	f	class:CSphOrderedHash
GetLength	sphinxstd.h	/^	int GetLength() const$/;"	f	class:CSphFixedVector
GetLength	sphinxstd.h	/^	size_t GetLength () const$/;"	f	class:CSphSharedBuffer
GetLimit	sphinxstd.h	/^	inline int GetLimit () const$/;"	f	class:CSphVector
GetLine	sphinx.cpp	/^int CSphReader::GetLine ( char * sBuffer, int iMaxLen )$/;"	f	class:CSphReader
GetMVAPool	sphinx.cpp	/^	const DWORD *				GetMVAPool () const { return m_pMva.GetWritePtr(); }$/;"	f	class:CSphIndex_VLN	file:
GetMask	sphinxquery.cpp	/^	inline uint64_t GetMask() const { return m_uMask; }$/;"	f	class:BitMask_t
GetMask32	sphinxstd.h	/^	DWORD GetMask32 () const$/;"	f	class:CSphSmallBitvec
GetMatchSchema	sphinx.h	/^	virtual const CSphSchema &	GetMatchSchema () const { return m_tSchema; }			\/\/\/< match schema as returned in result set (possibly different from internal storage schema!)$/;"	f	class:CSphIndex
GetMatches	sphinxsearch.cpp	/^int ExtRanker_None_c::GetMatches ()$/;"	f	class:ExtRanker_None_c
GetMatches	sphinxsearch.cpp	/^int ExtRanker_T<STATE>::GetMatches ()$/;"	f	class:ExtRanker_T
GetMatches	sphinxsearch.cpp	/^int ExtRanker_WeightSum_c<USE_BM25>::GetMatches ()$/;"	f	class:ExtRanker_WeightSum_c
GetMatchesBuffer	sphinxsearch.cpp	/^	virtual CSphMatch *			GetMatchesBuffer () { return m_dMatches; }$/;"	f	class:ExtRanker_c
GetMatchingHits	sphinxsearch.cpp	/^int ExtOrder_c::GetMatchingHits ( SphDocID_t uDocid, ExtHit_t * pHitbuf, int iLimit )$/;"	f	class:ExtOrder_c
GetMaxRowitem	sphinx.h	/^	int GetMaxRowitem () const$/;"	f	struct:CSphAttrLocator
GetMultiWordforms	indexer.cpp	/^	virtual const CSphMultiformContainer * GetMultiWordforms () const { return NULL; }$/;"	f	class:CSphStopwordBuilderDict
GetMultiWordforms	sphinx.cpp	/^	virtual const CSphMultiformContainer * GetMultiWordforms () const { return m_pBase->GetMultiWordforms(); }$/;"	f	class:CRtDictKeywords
GetMultiWordforms	sphinx.cpp	/^	virtual const CSphMultiformContainer * GetMultiWordforms () const { return m_pWordforms ? m_pWordforms->m_pMultiWordforms : NULL; }$/;"	f	struct:CSphDictCRCTraits
GetMultiWordforms	sphinxint.h	/^	virtual const CSphMultiformContainer * GetMultiWordforms () const { return m_pDict->GetMultiWordforms (); }$/;"	f	class:CSphDictTraits
GetName	searchd.cpp	/^	CSphString GetName() const$/;"	f	struct:AgentConn_t
GetName	sphinx.h	/^	const char *				GetName () { return m_sIndexName.cstr(); }$/;"	f	class:CSphIndex
GetName	sphinxsearch.cpp	/^		inline static const char*	GetName() { return "ExtPhrase"; }$/;"	f	class:FSMphrase
GetName	sphinxsearch.cpp	/^	inline static const char*	GetName() { return "ExtMultinear"; }$/;"	f	class:FSMmultinear
GetName	sphinxsearch.cpp	/^	inline static const char*	GetName() { return "ExtProximity"; }$/;"	f	class:FSMproximity
GetNamedPipeName	searchd.cpp	/^static CSphString GetNamedPipeName ( int iPid )$/;"	f	file:
GetNamedVec	searchd.cpp	/^CSphVector<CSphNamedInt> & SqlParser_c::GetNamedVec ( int iIndex )$/;"	f	class:SqlParser_c
GetNextDoc	sphinx.cpp	/^	virtual const CSphMatch & GetNextDoc ( DWORD * pDocinfo )$/;"	f	class:DiskIndexQword_c
GetNextDoc	sphinxexcerpt.cpp	/^	virtual const CSphMatch & GetNextDoc ( DWORD * )$/;"	f	class:ISnippetsQword
GetNextDoc	sphinxexcerpt.cpp	/^	virtual const CSphMatch & GetNextDoc ( DWORD * )$/;"	f	class:SnippetsFastQword_c
GetNextHit	sphinx.cpp	/^	virtual Hitpos_t GetNextHit ()$/;"	f	class:DiskIndexQword_c
GetNextHit	sphinxexcerpt.cpp	/^	virtual Hitpos_t GetNextHit ()$/;"	f	class:SnippetsFastQword_c
GetNextHit	sphinxexcerpt.cpp	/^	virtual Hitpos_t GetNextHit ()$/;"	f	struct:SnippetsQword_Exact_c
GetNextHit	sphinxexcerpt.cpp	/^	virtual Hitpos_t GetNextHit ()$/;"	f	struct:SnippetsQword_c
GetNextHit	sphinxsearch.cpp	/^int ExtOrder_c::GetNextHit ( SphDocID_t uDocid )$/;"	f	class:ExtOrder_c
GetNumEntries	sphinxstd.h	/^	size_t GetNumEntries () const$/;"	f	class:CSphSharedBuffer
GetNumRules	spelldump.cpp	/^int CISpellAffix::GetNumRules () const$/;"	f	class:CISpellAffix
GetNumValues	sphinx.h	/^	int					GetNumValues () const		{ return m_pValues ? m_nValues : m_dValues.GetLength (); }$/;"	f	class:CSphFilterSettings
GetOffset	sphinx.cpp	/^SphOffset_t CSphReader::GetOffset ()$/;"	f	class:CSphReader
GetOp	sphinxquery.h	/^	XQOperator_e GetOp () const$/;"	f	struct:XQNode_t
GetOrder	sphinxquery.h	/^	DWORD GetOrder () const$/;"	f	struct:XQNode_t
GetOvershortCount	sphinx.cpp	/^	virtual int						GetOvershortCount ()						{ return m_pLastToken->m_iOvershortCount; }$/;"	f	class:CSphTokenizer_Filter
GetOvershortCount	sphinx.h	/^	virtual int						GetOvershortCount () { return ( !m_bBlended && m_bBlendedPart ? 0 : m_iOvershortCount ); }$/;"	f	class:ISphTokenizer
GetPackedKeywords	sphinx.cpp	/^	virtual const BYTE * GetPackedKeywords () { return m_dPackedKeywords.Begin(); }$/;"	f	class:CRtDictKeywords
GetPackedLen	sphinx.cpp	/^	virtual int GetPackedLen () { return m_dPackedKeywords.GetLength(); }$/;"	f	class:CRtDictKeywords
GetPercent	sphinx.cpp	/^static inline float GetPercent ( int64_t a, int64_t b )$/;"	f	file:
GetPos	sphinx.h	/^	static inline int GetPos ( Hitpos_t uHitpos )$/;"	f	class:Hitman_c
GetPos	sphinxint.h	/^	SphOffset_t		GetPos () const		{ return m_iPos; }$/;"	f	class:CSphWriter
GetPos	sphinxint.h	/^	SphOffset_t	GetPos () const { return m_iPos+m_iBuffPos; }$/;"	f	class:CSphReader
GetPrefixedWords	sphinx.cpp	/^void CWordlist::GetPrefixedWords ( const char * sWord, int iWordLen, CSphVector<CSphNamedInt> & dPrefixedWords, BYTE * pDictBuf, int iFD ) const$/;"	f	class:CWordlist
GetQuery	searchd.cpp	/^CrashQuery_t SphCrashLogger_c::GetQuery()$/;"	f	class:SphCrashLogger_c
GetQwords	searchd.cpp	/^template < typename T > bool InputBuffer_c::GetQwords ( CSphVector<T> & dBuffer, int iMax, const char * sErrorTemplate )$/;"	f	class:InputBuffer_c
GetQwords	sphinxsearch.cpp	/^	virtual void GetQwords ( ExtQwordsHash_t & hQwords )$/;"	f	class:ExtNodeCached_t
GetQwords	sphinxsearch.cpp	/^	void						GetQwords ( ExtQwordsHash_t & hQwords )					{ if ( m_pRoot ) m_pRoot->GetQwords ( hQwords ); }$/;"	f	class:ExtRanker_c
GetQwords	sphinxsearch.cpp	/^void ExtNWayT::GetQwords ( ExtQwordsHash_t & hQwords )$/;"	f	class:ExtNWayT
GetQwords	sphinxsearch.cpp	/^void ExtOrder_c::GetQwords ( ExtQwordsHash_t & hQwords )$/;"	f	class:ExtOrder_c
GetQwords	sphinxsearch.cpp	/^void ExtQuorum_c::GetQwords ( ExtQwordsHash_t & hQwords )$/;"	f	class:ExtQuorum_c
GetQwords	sphinxsearch.cpp	/^void ExtTerm_c::GetQwords ( ExtQwordsHash_t & hQwords )$/;"	f	class:ExtTerm_c
GetQwords	sphinxsearch.cpp	/^void ExtTwofer_c::GetQwords ( ExtQwordsHash_t & hQwords )$/;"	f	class:ExtTwofer_c
GetQwords	sphinxsearch.cpp	/^void ExtUnit_c::GetQwords ( ExtQwordsHash_t & hQwords )$/;"	f	class:ExtUnit_c
GetRawSnippetFlags	searchd.cpp	/^int GetRawSnippetFlags ( const ExcerptQuery_t& q )$/;"	f
GetRawString	searchd.cpp	/^CSphString InputBuffer_c::GetRawString ( int iLen )$/;"	f	class:InputBuffer_c
GetResultType	sphinxsort.cpp	/^	virtual ESphAttr GetResultType () const$/;"	f	class:CSphGrouperString
GetReturnType	sphinxsearch.cpp	/^	ESphAttr GetReturnType ( int iID, const CSphVector<ESphAttr> & dArgs, bool bAllConst, CSphString & sError )$/;"	f	class:ExprRankerHook_c
GetRlockedEntry	searchd.cpp	/^const ServedIndex_t * IndexHash_c::GetRlockedEntry ( const CSphString & tKey ) const$/;"	f	class:IndexHash_c
GetRowSize	sphinx.h	/^	int						GetRowSize () const				{ return m_iStaticSize + m_dDynamicUsed.GetLength(); }$/;"	f	struct:CSphSchema
GetRule	spelldump.cpp	/^CISpellAffixRule * CISpellAffix::GetRule ( int iRule )$/;"	f	class:CISpellAffix
GetSchema	sphinx.h	/^	virtual const CSphSchema &	GetSchema () const { return m_tSchema; }$/;"	f	class:ISphMatchSorter
GetSegment	sphinxsort.cpp	/^	static inline int GetSegment ( SphAttr_t iStamp, SphAttr_t iNow )$/;"	f	struct:MatchTimeSegments_fn
GetSentCount	searchd.cpp	/^	int			GetSentCount () { return m_iSent; }$/;"	f	class:NetOutputBuffer_c
GetSetMinMax	spelldump.cpp	/^bool GetSetMinMax ( const char * szSet, BYTE & uMin, BYTE & uMax )$/;"	f
GetSettings	indexer.cpp	/^	virtual const CSphDictSettings & GetSettings () const { return m_tSettings; }$/;"	f	class:CSphStopwordBuilderDict
GetSettings	sphinx.cpp	/^	virtual const CSphDictSettings & GetSettings () const { return m_pBase->GetSettings(); }$/;"	f	class:CRtDictKeywords
GetSettings	sphinx.cpp	/^	virtual const CSphDictSettings & GetSettings () const { return m_tSettings; }$/;"	f	struct:CSphDictCRCTraits
GetSettings	sphinx.cpp	/^	virtual const CSphTokenizerSettings &	GetSettings () const									{ return m_pTokenizer->GetSettings (); }$/;"	f	class:CSphTokenizer_Filter
GetSettings	sphinx.h	/^	const CSphIndexSettings &	GetSettings () const { return m_tSettings; }$/;"	f	class:CSphIndex
GetSettings	sphinx.h	/^	virtual const CSphTokenizerSettings &	GetSettings () const { return m_tSettings; }$/;"	f	class:ISphTokenizer
GetSettings	sphinxint.h	/^	virtual const CSphDictSettings & GetSettings () const { return m_pDict->GetSettings (); }$/;"	f	class:CSphDictTraits
GetSettingsFNV	sphinx.h	/^	uint64_t						GetSettingsFNV () const { return m_tLC.GetFNV(); }$/;"	f	class:ISphTokenizer
GetSize	sphinx.cpp	/^SphOffset_t CSphAutofile::GetSize ( SphOffset_t iMinSize, bool bCheckSizeT, CSphString & sError )$/;"	f	class:CSphAutofile
GetSize	sphinx.cpp	/^SphOffset_t CSphAutofile::GetSize ()$/;"	f	class:CSphAutofile
GetSize	sphinxutils.cpp	/^int CSphConfigSection::GetSize ( const char * sKey, int iDefault ) const$/;"	f	class:CSphConfigSection
GetSqlError	sphinx.cpp	/^void CSphSource_ODBC::GetSqlError ( SQLSMALLINT iHandleType, SQLHANDLE hHandle )$/;"	f	class:CSphSource_ODBC
GetStaticSize	sphinx.h	/^	int						GetStaticSize () const			{ return m_iStaticSize; }$/;"	f	struct:CSphSchema
GetStats	sphinx.cpp	/^	virtual const CSphSourceStats &		GetStats () const { return m_tStats; }$/;"	f	class:CSphIndex_VLN
GetStats	sphinx.cpp	/^const CSphSourceStats & CSphSource::GetStats ()$/;"	f	class:CSphSource
GetStopwordsFileInfos	indexer.cpp	/^	virtual const CSphVector <CSphSavedFile> & GetStopwordsFileInfos () { return m_dSWFileInfos; }$/;"	f	class:CSphStopwordBuilderDict
GetStopwordsFileInfos	sphinx.cpp	/^	virtual const CSphVector <CSphSavedFile> & GetStopwordsFileInfos () { return m_dSWFileInfos; }$/;"	f	struct:CSphDictCRCTraits
GetStopwordsFileInfos	sphinx.cpp	/^	virtual const CSphVector <CSphSavedFile> & GetStopwordsFileInfos () { return m_pBase->GetStopwordsFileInfos(); }$/;"	f	class:CRtDictKeywords
GetStopwordsFileInfos	sphinxint.h	/^	virtual const CSphVector <CSphSavedFile> & GetStopwordsFileInfos () { return m_pDict->GetStopwordsFileInfos (); }$/;"	f	class:CSphDictTraits
GetStr	sphinxutils.h	/^	const char * GetStr ( const char * sKey, const char * sDefault="" ) const$/;"	f	class:CSphConfigSection
GetString	searchd.cpp	/^	CSphString GetString ()$/;"	f	struct:PipeReader_t
GetString	searchd.cpp	/^CSphString InputBuffer_c::GetString ()$/;"	f	class:InputBuffer_c
GetString	sphinx.cpp	/^CSphString CSphReader::GetString ()$/;"	f	class:CSphReader
GetSynFileInfo	sphinx.cpp	/^	virtual const CSphSavedFile &	GetSynFileInfo () const											{ return m_pTokenizer->GetSynFileInfo (); }$/;"	f	class:CSphTokenizer_Filter
GetSynFileInfo	sphinx.h	/^	virtual const CSphSavedFile &	GetSynFileInfo () const { return m_tSynFileInfo; }$/;"	f	class:ISphTokenizer
GetT	searchd.cpp	/^template < typename T > T InputBuffer_c::GetT ()$/;"	f	class:InputBuffer_c
GetToken	sphinx.cpp	/^BYTE * CSphTokenizer_Filter::GetToken ()$/;"	f	class:CSphTokenizer_Filter
GetToken	sphinx.cpp	/^BYTE * CSphTokenizer_SBCS::GetToken ()$/;"	f	class:CSphTokenizer_SBCS
GetToken	sphinx.cpp	/^BYTE * CSphTokenizer_UTF8::GetToken ()$/;"	f	class:CSphTokenizer_UTF8
GetToken	sphinx.cpp	/^BYTE * CSphTokenizer_UTF8Ngram::GetToken ()$/;"	f	class:CSphTokenizer_UTF8Ngram
GetToken	sphinx.cpp	/^int SelectParser_t::GetToken ( YYSTYPE * lvalp )$/;"	f	class:SelectParser_t
GetToken	sphinxexpr.cpp	/^int ExprParser_t::GetToken ( YYSTYPE * lvalp )$/;"	f	class:ExprParser_t
GetToken	sphinxquery.cpp	/^int XQParser_t::GetToken ( YYSTYPE * lvalp )$/;"	f	class:XQParser_t
GetToken	sphinxsort.cpp	/^	const char * GetToken ()$/;"	f	class:SortClauseTokenizer_t
GetTokenEnd	sphinx.cpp	/^	virtual const char *			GetTokenEnd () const		{ return m_pLastToken->m_szTokenEnd; }$/;"	f	class:CSphTokenizer_Filter
GetTokenEnd	sphinx.cpp	/^	virtual const char *	GetTokenEnd () const		{ return (const char *) m_pTokenEnd; }$/;"	f	class:CSphTokenizerTraits
GetTokenStart	sphinx.cpp	/^	virtual const char *			GetTokenStart () const		{ return m_pLastToken->m_szTokenStart; }$/;"	f	class:CSphTokenizer_Filter
GetTokenStart	sphinx.cpp	/^	virtual const char *	GetTokenStart () const		{ return (const char *) m_pTokenStart; }$/;"	f	class:CSphTokenizerTraits
GetTokenSyn	sphinx.cpp	/^BYTE * CSphTokenizerTraits<IS_UTF8>::GetTokenSyn ()$/;"	f	class:CSphTokenizerTraits
GetTokenizedMultiform	sphinx.cpp	/^	virtual BYTE *					GetTokenizedMultiform ()					{ return m_sTokenizedMultiform[0] ? m_sTokenizedMultiform : NULL; }$/;"	f	class:CSphTokenizer_Filter
GetTokenizedMultiform	sphinx.h	/^	virtual BYTE *					GetTokenizedMultiform () { return NULL; }$/;"	f	class:ISphTokenizer
GetTokenizer	sphinx.h	/^	ISphTokenizer *				GetTokenizer () const { return m_pTokenizer; }$/;"	f	class:CSphIndex
GetTotalCount	sphinx.h	/^	virtual int64_t		GetTotalCount () const { return m_iTotal; }$/;"	f	class:ISphMatchSorter
GetTree	sphinxquery.cpp	/^	inline XQNode_t * GetTree() const { return m_pTree; }$/;"	f	class:BitMask_t
GetUint64	searchd.cpp	/^	uint64_t		GetUint64() { uint64_t uRes = GetDword(); return (uRes<<32)+GetDword(); }$/;"	f	class:InputBuffer_c
GetUnlockedEntry	searchd.cpp	/^ServedIndex_t & IndexHash_c::GetUnlockedEntry ( const CSphString & tKey ) const$/;"	f	class:IndexHash_c
GetValue	sphinx.h	/^	SphAttr_t			GetValue ( int iIdx ) const	{ assert ( iIdx<GetNumValues() ); return m_pValues ? m_pValues[iIdx] : m_dValues[iIdx]; }$/;"	f	class:CSphFilterSettings
GetValue	sphinxfilter.cpp	/^	inline const SphAttr_t GetValue ( int iIndex ) const$/;"	f	struct:IFilter_Values
GetValue	sphinxsort.cpp	/^DWORD IAggrFuncTraits<DWORD>::GetValue ( const CSphMatch * pRow )$/;"	f	class:IAggrFuncTraits
GetValue	sphinxsort.cpp	/^float IAggrFuncTraits<float>::GetValue ( const CSphMatch * pRow )$/;"	f	class:IAggrFuncTraits
GetValue	sphinxsort.cpp	/^int64_t IAggrFuncTraits<int64_t>::GetValue ( const CSphMatch * pRow )$/;"	f	class:IAggrFuncTraits
GetValueArray	sphinx.h	/^	const SphAttr_t *	GetValueArray () const		{ return m_pValues ? m_pValues : &(m_dValues[0]); }$/;"	f	class:CSphFilterSettings
GetVirgin	searchd.cpp	/^	inline CSphSchemaMT * GetVirgin ()$/;"	f	class:CSphSchemaMT
GetWAttr	searchd.cpp	/^	inline CSphColumnInfo &	GetWAttr ( int iIndex ) { return m_dAttrs[iIndex]; }$/;"	f	class:CVirtualSchema
GetWAttrs	searchd.cpp	/^	inline CSphVector<CSphColumnInfo> & GetWAttrs () { return m_dAttrs; }$/;"	f	class:CVirtualSchema
GetWeight	sphinxexcerpt.cpp	/^		inline int GetWeight () const$/;"	f	struct:ExcerptGen_c::Passage_t
GetWeight	sphinxquery.cpp	/^	inline int GetWeight() const$/;"	f	class:BitAssociation_t	file:
GetWidestRet	sphinxexpr.cpp	/^ESphAttr ExprParser_t::GetWidestRet ( int iLeft, int iRight )$/;"	f	class:ExprParser_t
GetWlockedEntry	searchd.cpp	/^ServedIndex_t * IndexHash_c::GetWlockedEntry ( const CSphString & tKey ) const$/;"	f	class:IndexHash_c
GetWord	searchd.cpp	/^	WORD			GetWord () { return ntohs ( GetT<WORD> () ); }$/;"	f	class:InputBuffer_c
GetWord	sphinx.cpp	/^	BYTE * GetWord () const { return (BYTE *)m_sWord; }$/;"	f	class:CSphDictReader
GetWord	sphinx.cpp	/^bool CWordlist::GetWord ( const BYTE * pBuf, SphWordID_t iWordID, WordDictInfo_t & tWord ) const$/;"	f	class:CWordlist
GetWord	sphinx.cpp	/^const BYTE * CWordlist::GetWord ( const BYTE * pBuf, const char * pStr, int iLen, WordDictInfo_t & tWord, bool bStarMode, WordReaderContext_t & tCtx ) const$/;"	f	class:CWordlist
GetWordID	indexer.cpp	/^SphWordID_t CSphStopwordBuilderDict::GetWordID ( BYTE * pWord )$/;"	f	class:CSphStopwordBuilderDict
GetWordID	indexer.cpp	/^SphWordID_t CSphStopwordBuilderDict::GetWordID ( const BYTE * pWord, int iLen, bool )$/;"	f	class:CSphStopwordBuilderDict
GetWordID	sphinx.cpp	/^	virtual SphWordID_t		GetWordID ( const BYTE * pWord, int iLen, bool bFilterStops )$/;"	f	class:CRtDictKeywords
GetWordID	sphinx.cpp	/^	virtual SphWordID_t GetWordID ( BYTE * pWord )$/;"	f	class:CRtDictKeywords
GetWordID	sphinx.cpp	/^SphWordID_t	CSphDictStarV8::GetWordID ( BYTE * pWord )$/;"	f	class:CSphDictStarV8
GetWordID	sphinx.cpp	/^SphWordID_t CSphDictCRC<CRC32DICT>::GetWordID ( BYTE * pWord )$/;"	f	class:CSphDictCRC
GetWordID	sphinx.cpp	/^SphWordID_t CSphDictCRC<CRC32DICT>::GetWordID ( const BYTE * pWord, int iLen, bool bFilterStops )$/;"	f	class:CSphDictCRC
GetWordID	sphinx.cpp	/^SphWordID_t CSphDictExact::GetWordID ( BYTE * pWord )$/;"	f	class:CSphDictExact
GetWordID	sphinx.cpp	/^SphWordID_t CSphDictKeywords::GetWordID ( BYTE * pWord )$/;"	f	class:CSphDictKeywords
GetWordID	sphinx.cpp	/^SphWordID_t CSphDictKeywords::GetWordID ( const BYTE * pWord, int iLen, bool bFilterStops )$/;"	f	class:CSphDictKeywords
GetWordID	sphinx.cpp	/^SphWordID_t CSphDictStar::GetWordID ( BYTE * pWord )$/;"	f	class:CSphDictStar
GetWordID	sphinxint.h	/^	virtual SphWordID_t	GetWordID ( const BYTE * pWord, int iLen, bool bFilterStops ) { return m_pDict->GetWordID ( pWord, iLen, bFilterStops ); }$/;"	f	class:CSphDictTraits
GetWordIDNonStemmed	sphinx.cpp	/^	virtual SphWordID_t GetWordIDNonStemmed ( BYTE * pWord )$/;"	f	class:CRtDictKeywords
GetWordIDNonStemmed	sphinx.cpp	/^SphWordID_t	CSphDictStar::GetWordIDNonStemmed ( BYTE * pWord )$/;"	f	class:CSphDictStar
GetWordIDNonStemmed	sphinx.cpp	/^SphWordID_t CSphDictCRC<CRC32DICT>::GetWordIDNonStemmed ( BYTE * pWord )$/;"	f	class:CSphDictCRC
GetWordIDNonStemmed	sphinx.cpp	/^SphWordID_t CSphDictKeywords::GetWordIDNonStemmed ( BYTE * pWord )$/;"	f	class:CSphDictKeywords
GetWordIDNonStemmed	sphinx.h	/^	virtual SphWordID_t	GetWordIDNonStemmed ( BYTE * pWord ) { return GetWordID ( pWord ); }$/;"	f	struct:CSphDict
GetWordIDWithMarkers	sphinx.cpp	/^	virtual SphWordID_t GetWordIDWithMarkers ( BYTE * pWord )$/;"	f	class:CRtDictKeywords
GetWordIDWithMarkers	sphinx.cpp	/^SphWordID_t CSphDictCRC<CRC32DICT>::GetWordIDWithMarkers ( BYTE * pWord )$/;"	f	class:CSphDictCRC
GetWordIDWithMarkers	sphinx.cpp	/^SphWordID_t CSphDictKeywords::GetWordIDWithMarkers ( BYTE * pWord )$/;"	f	class:CSphDictKeywords
GetWordIDWithMarkers	sphinx.h	/^	virtual SphWordID_t	GetWordIDWithMarkers ( BYTE * pWord ) { return GetWordID ( pWord ); }$/;"	f	struct:CSphDict
GetWordchar	spelldump.cpp	/^BYTE GetWordchar ( const char * & szSet )$/;"	f
GetWordformContainer	sphinx.cpp	/^WordformContainer_t * CSphDictCRCTraits::GetWordformContainer ( const char * szFile, DWORD uCRC32, const ISphTokenizer * pTokenizer, const char * sIndex )$/;"	f	class:CSphDictCRCTraits
GetWordformsFileInfo	indexer.cpp	/^	virtual const CSphSavedFile & GetWordformsFileInfo () { return m_tWFFileInfo; }$/;"	f	class:CSphStopwordBuilderDict
GetWordformsFileInfo	sphinx.cpp	/^	virtual const CSphSavedFile & GetWordformsFileInfo () { return m_pBase->GetWordformsFileInfo(); }$/;"	f	class:CRtDictKeywords
GetWordformsFileInfo	sphinx.cpp	/^	virtual const CSphSavedFile & GetWordformsFileInfo () { return m_tWFFileInfo; }$/;"	f	struct:CSphDictCRCTraits
GetWordformsFileInfo	sphinxint.h	/^	virtual const CSphSavedFile & GetWordformsFileInfo () { return m_pDict->GetWordformsFileInfo (); }$/;"	f	class:CSphDictTraits
GetWordpart	sphinx.cpp	/^ESphWordpart CSphSourceSettings::GetWordpart ( const char * sField, bool bWordDict )$/;"	f	class:CSphSourceSettings
GetWordsLimit	sphinxexcerpt.cpp	/^static int GetWordsLimit ( const ExcerptQuery_t & q, int iQwords )$/;"	f	file:
GetWritePtr	sphinxstd.h	/^	T * GetWritePtr () const$/;"	f	class:CSphSharedBuffer
GetZoneIndex	sphinxquery.cpp	/^static int GetZoneIndex ( XQQuery_t * pQuery, const CSphString & sZone )$/;"	f	file:
GetZoneVec	sphinxquery.cpp	/^	const CSphVector<int> & GetZoneVec ( int iZoneVec ) const$/;"	f	class:XQParser_t
GetZones	sphinxexcerpt.cpp	/^	const CSphVector<ZonePacked_t> & GetZones () const { return m_dZones; }$/;"	f	class:ExcerptGen_c
GetZonesName	sphinxexcerpt.cpp	/^	const SmallStringHash_T<int> & GetZonesName () const { return m_hZones; }$/;"	f	class:ExcerptGen_c
GotHitless	sphinxsearch.cpp	/^	virtual bool				GotHitless () { return false; }$/;"	f	class:ExtNWayT
GotHitless	sphinxsearch.cpp	/^	virtual bool				GotHitless () { return false; }$/;"	f	class:ExtOrder_c
GotHitless	sphinxsearch.cpp	/^	virtual bool				GotHitless () { return false; }$/;"	f	class:ExtQuorum_c
GotHitless	sphinxsearch.cpp	/^	virtual bool				GotHitless () { return false; }$/;"	f	class:ExtTermPos_c
GotHitless	sphinxsearch.cpp	/^	virtual bool				GotHitless () { return false; }$/;"	f	class:ExtTerm_c
GotHitless	sphinxsearch.cpp	/^	virtual bool				GotHitless () { return m_pChildren[0]->GotHitless() || m_pChildren[1]->GotHitless(); }$/;"	f	class:ExtTwofer_c
GotHitless	sphinxsearch.cpp	/^	virtual bool				GotHitless () { return true; }$/;"	f	class:ExtTermHitless_c
GotHitless	sphinxsearch.cpp	/^	virtual bool GotHitless ()$/;"	f	class:ExtNodeCached_t
GotHitless	sphinxsearch.cpp	/^	virtual bool GotHitless ()$/;"	f	class:ExtUnit_c
GroupSorter_fn	sphinxsort.cpp	/^	GroupSorter_fn ()$/;"	f	struct:GroupSorter_fn
GroupSorter_fn	sphinxsort.cpp	/^struct GroupSorter_fn : public CSphMatchComparatorState, public SphAccessor_T<CSphMatch>$/;"	s	file:
Grow	sphinxstd.h	/^	void Grow ( int iLen )$/;"	f	class:CSphStringBuilder
H	md5.cpp	254;"	d	file:
H	sphinxstemru.cpp	/^		H	= 0x85D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
H	sphinxstemru.cpp	/^		H	= 0xD185U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
H	sphinxstemru.cpp	/^		H	= 0xF5,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
HASH_DELETED	sphinxsort.cpp	/^	static const int			HASH_DELETED	= -2;$/;"	m	class:CSphFixedHash	file:
HASH_FOREACH	indexer.cpp	167;"	d	file:
HASH_LIST_END	sphinxsort.cpp	/^	static const int			HASH_LIST_END	= -1;$/;"	m	class:CSphFixedHash	file:
HAVE_DLOPEN	sphinxexpr.cpp	3058;"	d	file:
HITMAN	sphinx.cpp	/^typedef Hitman_c<8> HITMAN;$/;"	t	file:
HITMAN	sphinxexcerpt.cpp	/^typedef Hitman_c<8> HITMAN;$/;"	t	file:
HITMAN	sphinxrt.cpp	/^typedef Hitman_c<8> HITMAN;$/;"	t	file:
HITMAN	sphinxsearch.cpp	/^typedef Hitman_c<8> HITMAN;$/;"	t	file:
HandleClient	searchd.cpp	/^void HandleClient ( ProtocolType_e eProto, int iSock, const char * sClientIP, ThdDesc_t * pThd )$/;"	f
HandleClientMySQL	searchd.cpp	/^void HandleClientMySQL ( int iSock, const char * sClientIP, ThdDesc_t * pThd )$/;"	f
HandleClientSphinx	searchd.cpp	/^void HandleClientSphinx ( int iSock, const char * sClientIP, ThdDesc_t * pThd )$/;"	f
HandleCommandExcerpt	searchd.cpp	/^void HandleCommandExcerpt ( int iSock, int iVer, InputBuffer_c & tReq )$/;"	f
HandleCommandFlush	searchd.cpp	/^void HandleCommandFlush ( int iSock, int iVer, InputBuffer_c & tReq )$/;"	f
HandleCommandKeywords	searchd.cpp	/^void HandleCommandKeywords ( int iSock, int iVer, InputBuffer_c & tReq )$/;"	f
HandleCommandSearch	searchd.cpp	/^void HandleCommandSearch ( int iSock, int iVer, InputBuffer_c & tReq )$/;"	f
HandleCommandSphinxql	searchd.cpp	/^void HandleCommandSphinxql ( int iSock, int iVer, InputBuffer_c & tReq )$/;"	f
HandleCommandStatus	searchd.cpp	/^void HandleCommandStatus ( int iSock, int iVer, InputBuffer_c & tReq )$/;"	f
HandleCommandUpdate	searchd.cpp	/^void HandleCommandUpdate ( int iSock, int iVer, InputBuffer_c & tReq )$/;"	f
HandleCrash	searchd.cpp	/^void SphCrashLogger_c::HandleCrash ( int sig )$/;"	f	class:SphCrashLogger_c
HandleMysqlAttach	searchd.cpp	/^void HandleMysqlAttach ( const SqlStmt_t & tStmt, NetOutputBuffer_c & tOut, BYTE uPacketID )$/;"	f
HandleMysqlCallKeywords	searchd.cpp	/^void HandleMysqlCallKeywords ( NetOutputBuffer_c & tOut, BYTE uPacketID, SqlStmt_t & tStmt )$/;"	f
HandleMysqlCallSnippets	searchd.cpp	/^void HandleMysqlCallSnippets ( NetOutputBuffer_c & tOut, BYTE uPacketID, SqlStmt_t & tStmt )$/;"	f
HandleMysqlDelete	searchd.cpp	/^void HandleMysqlDelete ( NetOutputBuffer_c & tOut, BYTE & uPacketID, const SqlStmt_t & tStmt, bool bCommit )$/;"	f
HandleMysqlDescribe	searchd.cpp	/^void HandleMysqlDescribe ( NetOutputBuffer_c & tOut, BYTE uPacketID, SqlStmt_t & tStmt )$/;"	f
HandleMysqlFlush	searchd.cpp	/^void HandleMysqlFlush ( const SqlStmt_t & tStmt, NetOutputBuffer_c & tOut, BYTE uPacketID )$/;"	f
HandleMysqlInsert	searchd.cpp	/^void HandleMysqlInsert ( const SqlStmt_t & tStmt, NetOutputBuffer_c & tOut, BYTE uPacketID, bool bReplace, bool bCommit )$/;"	f
HandleMysqlMeta	searchd.cpp	/^void HandleMysqlMeta ( NetOutputBuffer_c & tOut, BYTE & uPacketID, const CSphQueryResultMeta & tLastMeta, SqlRowBuffer_c & dRows, bool bStatus, bool bMoreResultsFollow )$/;"	f
HandleMysqlMultiStmt	searchd.cpp	/^void HandleMysqlMultiStmt ( NetOutputBuffer_c & tOut, BYTE uPacketID, const CSphVector<SqlStmt_t> & dStmt, CSphQueryResultMeta & tLastMeta,$/;"	f
HandleMysqlSelect	searchd.cpp	/^bool HandleMysqlSelect ( NetOutputBuffer_c & tOut, BYTE & uPacketID, SearchHandler_c & tHandler )$/;"	f
HandleMysqlSet	searchd.cpp	/^void HandleMysqlSet ( NetOutputBuffer_c & tOut, BYTE & uPacketID, SqlStmt_t & tStmt, SessionVars_t & tVars )$/;"	f
HandleMysqlShowTables	searchd.cpp	/^void HandleMysqlShowTables ( NetOutputBuffer_c & tOut, BYTE uPacketID )$/;"	f
HandleMysqlShowVariables	searchd.cpp	/^void HandleMysqlShowVariables ( const SqlStmt_t &, NetOutputBuffer_c & tOut, BYTE uPacketID, SqlRowBuffer_c & dRows, SessionVars_t & tVars )$/;"	f
HandleMysqlUpdate	searchd.cpp	/^void HandleMysqlUpdate ( NetOutputBuffer_c & tOut, BYTE uPacketID, const SqlStmt_t & tStmt, const CSphString & sQuery, bool bCommit )$/;"	f
HandleMysqlWarning	searchd.cpp	/^void HandleMysqlWarning ( NetOutputBuffer_c & tOut, BYTE & uPacketID, const CSphQueryResultMeta & tLastMeta, SqlRowBuffer_c & dRows, bool bMoreResultsFollow )$/;"	f
HandlePipePreread	searchd.cpp	/^void HandlePipePreread ( PipeReader_t & tPipe, bool bFailure )$/;"	f
HandlerThread	searchd.cpp	/^void HandlerThread ( void * pArg )$/;"	f
HasAttrsConfigured	sphinx.cpp	/^	virtual bool	HasAttrsConfigured ()							{ return true; }	\/\/\/< xmlpipe always has some attrs for now$/;"	f	class:CSphSource_XMLPipe2
HasAttrsConfigured	sphinx.h	/^	virtual bool		HasAttrsConfigured () { return m_tParams.m_dAttrs.GetLength()!=0; }$/;"	f	struct:CSphSource_SQL
HasAttrsConfigured	sphinx.h	/^	virtual bool	HasAttrsConfigured ()							{ return true; }	\/\/\/< xmlpipe always has some attrs for now$/;"	f	class:CSphSource_XMLPipe
HasAttrsConfigured	tests.cpp	/^	bool HasAttrsConfigured () { return true; }$/;"	f	class:SphDocRandomizer_c
HasAttrsConfigured	tests.cpp	/^	bool HasAttrsConfigured () { return true; }$/;"	f	class:SphTestDoc_c
HasDocid	sphinx.cpp	/^bool CSphIndex_VLN::HasDocid ( SphDocID_t uDocid ) const$/;"	f	class:CSphIndex_VLN
HasExpresions	searchd.cpp	/^bool SearchHandler_c::HasExpresions ( int iStart, int iEnd ) const$/;"	f	class:SearchHandler_c
HasFiles	searchd.cpp	/^bool HasFiles ( const ServedIndex_t & tIndex, const char ** dExts )$/;"	f
HasHits	sphinxexcerpt.cpp	/^	bool HasHits () const$/;"	f	class:SnippetsFastQword_c
HasJoinedFields	sphinx.h	/^	virtual bool						HasJoinedFields () { return false; }$/;"	f	class:CSphSource
HasJoinedFields	sphinx.h	/^	virtual bool			HasJoinedFields () { return m_iPlainFieldsLength!=m_tSchema.m_dFields.GetLength(); }$/;"	f	class:CSphSource_Document
HasMorphology	sphinx.cpp	/^bool CSphDictCRCTraits::HasMorphology() const$/;"	f	class:CSphDictCRCTraits
HasMorphology	sphinx.h	/^	virtual bool		HasMorphology () const { return false; }$/;"	f	struct:CSphDict
HasQwordDupes	sphinxsearch.cpp	/^static bool HasQwordDupes ( XQNode_t * pNode )$/;"	f	file:
HasQwordDupes	sphinxsearch.cpp	/^static bool HasQwordDupes ( XQNode_t * pNode, SmallStringHash_T<int> & hQwords )$/;"	f	file:
HasState	sphinx.cpp	/^bool CSphDictCRCTraits::HasState() const$/;"	f	class:CSphDictCRCTraits
HasState	sphinx.h	/^	virtual bool			HasState () const { return false; }$/;"	f	struct:CSphDict
HasString	sphinxsort.cpp	/^static bool HasString ( const CSphMatchComparatorState * pState )$/;"	f	file:
Hash	indexer.cpp	/^		static inline DWORD Hash ( const char * sKey )$/;"	f	struct:CSphStopwordBuilderDict::HashFunc_t
Hash	sphinx.cpp	/^int CSphStrHashFunc::Hash ( const CSphString & sKey )$/;"	f	class:CSphStrHashFunc
Hash	sphinxsearch.cpp	/^	static inline int Hash ( const CSphString & sKey )$/;"	f	struct:QwordsHash_fn
Hash	sphinxsearch.cpp	/^	static inline int Hash ( const ZoneKey_t & tKey )$/;"	f	struct:ZoneHash_fn
Hash	sphinxsort.cpp	/^	uint64_t Hash ( const BYTE * pStr, int iLen ) const$/;"	f	class:BinaryHash_fn
Hash	sphinxsort.cpp	/^	uint64_t Hash ( const BYTE * pStr, int iLen ) const$/;"	f	class:LibcCIHash_fn
Hash	sphinxsort.cpp	/^	uint64_t Hash ( const BYTE * pStr, int iLen ) const$/;"	f	class:LibcCSHash_fn
Hash	sphinxsort.cpp	/^	uint64_t Hash ( const BYTE * pStr, int iLen ) const$/;"	f	class:Utf8CIHash_fn
Hash	sphinxstd.h	/^	static inline INT Hash ( INT iValue )	{ return iValue; }$/;"	f	struct:IdentityHash_fn
HashEntry_t	sphinxsort.cpp	/^	struct HashEntry_t$/;"	s	class:CSphFixedHash	file:
HashEntry_t	sphinxstd.h	/^	struct HashEntry_t$/;"	s	class:CSphOrderedHash
HashFunc_t	indexer.cpp	/^	struct HashFunc_t$/;"	s	class:CSphStopwordBuilderDict	file:
HexDigit	sphinx.cpp	/^int CSphCharsetDefinitionParser::HexDigit ( int c )$/;"	f	class:CSphCharsetDefinitionParser
HighlightAll	sphinxexcerpt.cpp	/^void ExcerptGen_c::HighlightAll ( const ExcerptQuery_t & q )$/;"	f	class:ExcerptGen_c
HighlightAllFastpath	sphinxexcerpt.cpp	/^static char * HighlightAllFastpath ( const ExcerptQuery_t & tQuerySettings,$/;"	f	file:
HighlightBestPassages	sphinxexcerpt.cpp	/^bool ExcerptGen_c::HighlightBestPassages ( const ExcerptQuery_t & tQuery )$/;"	f	class:ExcerptGen_c
HighlightPhrase	sphinxexcerpt.cpp	/^void ExcerptGen_c::HighlightPhrase ( const ExcerptQuery_t & q, int iTok, int iEnd )$/;"	f	class:ExcerptGen_c
HighlightPlain_c	sphinxexcerpt.cpp	/^	HighlightPlain_c ( SnippetsDocIndex_c & tContainer, ISphTokenizer * pTokenizer, CSphDict * pDict, const ExcerptQuery_t & tQuery, const CSphIndexSettings & tSettingsIndex, const char * sDoc, int iDocLen )$/;"	f	class:HighlightPlain_c
HighlightPlain_c	sphinxexcerpt.cpp	/^class HighlightPlain_c : public TokenFunctorTraits_c$/;"	c	file:
HighlightQuery_c	sphinxexcerpt.cpp	/^	HighlightQuery_c ( SnippetsDocIndex_c & tContainer, ISphTokenizer * pTokenizer, CSphDict * pDict, const ExcerptQuery_t & tQuery, const CSphIndexSettings & tSettingsIndex, const char * sDoc, int iDocLen, const CSphVector<SphHitMark_t> & dHits )$/;"	f	class:HighlightQuery_c
HighlightQuery_c	sphinxexcerpt.cpp	/^class HighlightQuery_c : public HighlightPlain_c$/;"	c	file:
HighlightStart	sphinxexcerpt.cpp	/^void ExcerptGen_c::HighlightStart ( const ExcerptQuery_t & q )$/;"	f	class:ExcerptGen_c
HitCollector_c	sphinxexcerpt.cpp	/^	explicit HitCollector_c ( SnippetsDocIndex_c & tContainer, ISphTokenizer * pTokenizer, CSphDict * pDict, const ExcerptQuery_t & tQuery, const CSphIndexSettings & tSettingsIndex, const char * sDoc, int iDocLen )$/;"	f	class:HitCollector_c
HitCollector_c	sphinxexcerpt.cpp	/^class HitCollector_c : public TokenFunctorTraits_c$/;"	c	file:
HitFSM	sphinxsearch.cpp	/^inline bool FSMmultinear::HitFSM ( const ExtHit_t* pHit, ExtHit_t* dTarget )$/;"	f	class:FSMmultinear
HitFSM	sphinxsearch.cpp	/^inline bool FSMphrase::HitFSM ( const ExtHit_t* pHit, ExtHit_t* dTarget )$/;"	f	class:FSMphrase
HitFSM	sphinxsearch.cpp	/^inline bool FSMproximity::HitFSM ( const ExtHit_t* pHit, ExtHit_t* dTarget )$/;"	f	class:FSMproximity
HitblockAddKeyword	sphinx.cpp	/^CSphDictKeywords::HitblockKeyword_t * CSphDictKeywords::HitblockAddKeyword ( DWORD uHash, const char * sWord, int iLen, SphWordID_t uID )$/;"	f	class:CSphDictKeywords
HitblockBegin	sphinx.cpp	/^	virtual void			HitblockBegin () { m_bHitblock = true; }$/;"	f	class:CSphDictKeywords
HitblockBegin	sphinx.h	/^	virtual void			HitblockBegin () {}$/;"	f	struct:CSphDict
HitblockException_t	sphinx.cpp	/^	struct HitblockException_t$/;"	s	class:CSphDictKeywords	file:
HitblockGetID	sphinx.cpp	/^SphWordID_t CSphDictKeywords::HitblockGetID ( const char * sWord, int iLen, SphWordID_t uCRC )$/;"	f	class:CSphDictKeywords
HitblockGetKeyword	sphinx.cpp	/^const char * CSphDictKeywords::HitblockGetKeyword ( SphWordID_t uWordID )$/;"	f	class:CSphDictKeywords
HitblockGetKeyword	sphinx.h	/^	virtual const char *	HitblockGetKeyword ( SphWordID_t ) { return NULL; }$/;"	f	struct:CSphDict
HitblockGetMemUse	sphinx.cpp	/^	virtual int				HitblockGetMemUse () { return m_iMemUse; }$/;"	f	class:CSphDictKeywords
HitblockGetMemUse	sphinx.h	/^	virtual int				HitblockGetMemUse () { return 0; }$/;"	f	struct:CSphDict
HitblockKeyword_t	sphinx.cpp	/^	struct HitblockKeyword_t$/;"	s	class:CSphDictKeywords	file:
HitblockPatch	sphinx.cpp	/^void CSphDictKeywords::HitblockPatch ( CSphWordHit * pHits, int iHits )$/;"	f	class:CSphDictKeywords
HitblockPatch	sphinx.h	/^	virtual void			HitblockPatch ( CSphWordHit *, int ) {}$/;"	f	struct:CSphDict
HitblockPatchSort_fn	sphinx.cpp	/^	explicit HitblockPatchSort_fn ( const CSphDictKeywords::HitblockException_t * pExc )$/;"	f	struct:HitblockPatchSort_fn
HitblockPatchSort_fn	sphinx.cpp	/^struct HitblockPatchSort_fn$/;"	s	file:
HitblockReset	sphinx.cpp	/^void CSphDictKeywords::HitblockReset()$/;"	f	class:CSphDictKeywords
HitblockReset	sphinx.h	/^	virtual void			HitblockReset () {}$/;"	f	struct:CSphDict
Hitman_c	sphinx.h	/^class Hitman_c$/;"	c
Hitpos_t	sphinx.h	/^typedef DWORD Hitpos_t;$/;"	t
HookCheck_fn	sphinxexpr.cpp	/^	explicit HookCheck_fn ( ISphExprHook * pHook )$/;"	f	struct:HookCheck_fn
HookCheck_fn	sphinxexpr.cpp	/^struct HookCheck_fn$/;"	s	file:
HtmlEntityHash	sphinx.cpp	/^static inline DWORD HtmlEntityHash ( const BYTE * str, int len )$/;"	f	file:
HtmlEntityLookup	sphinx.cpp	/^static inline int HtmlEntityLookup ( const BYTE * str, int len )$/;"	f	file:
HtmlEntity_t	sphinx.cpp	/^struct HtmlEntity_t$/;"	s	file:
I	md5.cpp	280;"	d	file:
I	sphinxstemru.cpp	/^		I	= 0xB8D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
I	sphinxstemru.cpp	/^		I	= 0xD0B8U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
I	sphinxstemru.cpp	/^		I	= 0xE8,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
I64C	sphinxstd.h	130;"	d
I64C	sphinxstd.h	146;"	d
IABS	sphinxexpr.cpp	415;"	d	file:
IAggrFunc	sphinxsort.cpp	/^class IAggrFunc$/;"	c	file:
IAggrFuncTraits	sphinxsort.cpp	/^	explicit		IAggrFuncTraits ( const CSphAttrLocator & tLocator ) : m_tLocator ( tLocator ) {}$/;"	f	class:IAggrFuncTraits
IAggrFuncTraits	sphinxsort.cpp	/^class IAggrFuncTraits : public IAggrFunc$/;"	c	file:
ICONV_INBUF_CONST	sphinx.cpp	88;"	d	file:
IED_ACTION	sphinxstemen.cpp	237;"	d	file:
IELEMENTS	sphinxstd.h	/^	static const int IELEMENTS = iTOTALBITS \/ iELEMBITS;$/;"	m	class:CSphSmallBitvec
IFFLT	sphinxexpr.cpp	469;"	d	file:
IFINT	sphinxexpr.cpp	470;"	d	file:
IFilter_Attr	sphinxfilter.cpp	/^struct IFilter_Attr: virtual ISphFilter$/;"	s	file:
IFilter_MVA	sphinxfilter.cpp	/^	IFilter_MVA ()$/;"	f	struct:IFilter_MVA
IFilter_MVA	sphinxfilter.cpp	/^struct IFilter_MVA: virtual IFilter_Attr$/;"	s	file:
IFilter_Range	sphinxfilter.cpp	/^struct IFilter_Range: virtual ISphFilter$/;"	s	file:
IFilter_Values	sphinxfilter.cpp	/^	IFilter_Values ()$/;"	f	struct:IFilter_Values
IFilter_Values	sphinxfilter.cpp	/^struct IFilter_Values: virtual ISphFilter$/;"	s	file:
INDEX_FORMAT_VERSION	sphinxint.h	/^const DWORD		INDEX_FORMAT_VERSION		= 26;				\/\/\/< my format version$/;"	v
INDEX_MAGIC_HEADER	sphinxint.h	/^const DWORD		INDEX_MAGIC_HEADER			= 0x58485053;		\/\/\/< my magic 'SPHX' header$/;"	v
INITIAL	llsphinxql.c	771;"	d	file:
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INT16_MAX	llsphinxql.c	72;"	d	file:
INT16_MIN	llsphinxql.c	63;"	d	file:
INT32_MAX	llsphinxql.c	75;"	d	file:
INT32_MIN	llsphinxql.c	66;"	d	file:
INT64FIRST	sphinxexpr.cpp	390;"	d	file:
INT64SECOND	sphinxexpr.cpp	391;"	d	file:
INT64THIRD	sphinxexpr.cpp	392;"	d	file:
INT64_FMT	sphinxstd.h	158;"	d
INT64_MAX	sphinxstd.h	165;"	d
INT8_MAX	llsphinxql.c	69;"	d	file:
INT8_MIN	llsphinxql.c	60;"	d	file:
INTFIRST	sphinxexpr.cpp	386;"	d	file:
INTSECOND	sphinxexpr.cpp	387;"	d	file:
INTTHIRD	sphinxexpr.cpp	388;"	d	file:
IReplyParser_t	searchd.cpp	/^struct IReplyParser_t$/;"	s	file:
IRequestBuilder_t	searchd.cpp	/^struct IRequestBuilder_t : public ISphNoncopyable$/;"	s	file:
ISnippetsQword	sphinxexcerpt.cpp	/^	ISnippetsQword()$/;"	f	class:ISnippetsQword
ISnippetsQword	sphinxexcerpt.cpp	/^class ISnippetsQword : public ISphQword$/;"	c	file:
ISphBinlog	sphinxint.h	/^class ISphBinlog : ISphNoncopyable$/;"	c
ISphExpr	sphinxexpr.h	/^struct ISphExpr : public ISphRefcounted$/;"	s
ISphExprHook	sphinxexpr.h	/^struct ISphExprHook$/;"	s
ISphFilter	sphinxfilter.h	/^	ISphFilter() : m_bUsesAttrs ( true ) {}$/;"	f	struct:ISphFilter
ISphFilter	sphinxfilter.h	/^struct ISphFilter$/;"	s
ISphHits	sphinx.h	/^class ISphHits$/;"	c
ISphMatchComparator	sphinxsort.cpp	/^struct ISphMatchComparator$/;"	s	file:
ISphMatchSorter	sphinx.h	/^						ISphMatchSorter () : m_bRandomize ( false ), m_iTotal ( 0 ) {}$/;"	f	class:ISphMatchSorter
ISphMatchSorter	sphinx.h	/^class ISphMatchSorter$/;"	c
ISphNoncopyable	sphinxstd.h	/^								ISphNoncopyable ( const ISphNoncopyable & ) {}$/;"	f	class:ISphNoncopyable
ISphNoncopyable	sphinxstd.h	/^								ISphNoncopyable () {}$/;"	f	class:ISphNoncopyable
ISphNoncopyable	sphinxstd.h	/^class ISphNoncopyable$/;"	c
ISphQword	sphinxsearch.h	/^	ISphQword ()$/;"	f	class:ISphQword
ISphQword	sphinxsearch.h	/^class ISphQword$/;"	c
ISphQwordSetup	sphinxsearch.h	/^	ISphQwordSetup ()$/;"	f	class:ISphQwordSetup
ISphQwordSetup	sphinxsearch.h	/^class ISphQwordSetup : ISphNoncopyable$/;"	c
ISphRanker	sphinxsearch.h	/^class ISphRanker$/;"	c
ISphRefcounted	sphinxstd.h	/^					ISphRefcounted () : m_iRefCount ( 1 ) {}$/;"	f	struct:ISphRefcounted
ISphRefcounted	sphinxstd.h	/^struct ISphRefcounted : public ISphNoncopyable$/;"	s
ISphRefcountedMT	sphinxstd.h	/^	ISphRefcountedMT ()$/;"	f	struct:ISphRefcountedMT
ISphRefcountedMT	sphinxstd.h	/^struct ISphRefcountedMT : public ISphNoncopyable$/;"	s
ISphRtDictWraper	sphinxint.h	/^class ISphRtDictWraper : public CSphDict$/;"	c
ISphRtIndex	sphinxrt.h	/^	explicit ISphRtIndex ( const char * sIndexName, const char * sName ) : CSphIndex ( sIndexName, sName ) {}$/;"	f	class:ISphRtIndex
ISphRtIndex	sphinxrt.h	/^class ISphRtIndex : public CSphIndex$/;"	c
ISphTokenizer	sphinx.cpp	/^ISphTokenizer::ISphTokenizer ()$/;"	f	class:ISphTokenizer
ISphTokenizer	sphinx.h	/^class ISphTokenizer$/;"	c
ISphWordlist	sphinxint.h	/^class ISphWordlist$/;"	c
ISphZoneCheck	sphinxint.h	/^class ISphZoneCheck$/;"	c
IY	sphinxstemru.cpp	/^		IY	= 0xB9D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
IY	sphinxstemru.cpp	/^		IY	= 0xD0B9U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
IY	sphinxstemru.cpp	/^		IY	= 0xE9,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
IdValuePair_t	sphinx.h	/^	struct IdValuePair_t$/;"	s	class:CSphAttrOverride
IdentityHash_fn	sphinxstd.h	/^struct IdentityHash_fn$/;"	s
IncPtr	searchd.cpp	/^	void IncPtr ( int iLen	)$/;"	f	class:SqlRowBuffer_c
IndexHashIterator_c	searchd.cpp	/^IndexHashIterator_c::IndexHashIterator_c ( const IndexHash_c * pHash, bool bWrite )$/;"	f	class:IndexHashIterator_c
IndexHashIterator_c	searchd.cpp	/^class IndexHashIterator_c : public ISphNoncopyable$/;"	c	file:
IndexHash_c	searchd.cpp	/^IndexHash_c::IndexHash_c ()$/;"	f	class:IndexHash_c
IndexHash_c	searchd.cpp	/^class IndexHash_c : protected SmallStringHash_T<ServedIndex_t>$/;"	c	file:
IndexNameLess_fn	searchd.cpp	/^struct IndexNameLess_fn$/;"	s	file:
IndexRotationDone	searchd.cpp	/^void IndexRotationDone ()$/;"	f
IndexingThread	testrt.cpp	/^void IndexingThread ( void * pArg )$/;"	f
Init	searchd.cpp	/^bool ThreadsOnlyMutex_t::Init ()$/;"	f	class:ThreadsOnlyMutex_t
Init	searchd.cpp	/^void SphCrashLogger_c::Init ()$/;"	f	class:SphCrashLogger_c
Init	sphinx.cpp	/^DWORD * CSphArena::Init ( int uMaxBytes )$/;"	f	class:CSphArena
Init	sphinx.cpp	/^void CSphBin::Init ( int iFD, SphOffset_t * pSharedOffset, const int iBinSize )$/;"	f	class:CSphBin
Init	sphinxquery.cpp	/^	void Init ( XQNode_t * pTree, uint64_t uMask )$/;"	f	class:BitMask_t
Init	sphinxquery.cpp	/^	void Init ( uint64_t uMask, const Associations_t* dNodes )$/;"	f	class:BitAssociation_t
Init	sphinxsearch.cpp	/^	bool Init ( int iFields, const int * pWeights, ExtRanker_c * pRanker, CSphString & )$/;"	f	struct:RankerState_ProximityBM25Exact_fn
Init	sphinxsearch.cpp	/^	bool Init ( int iFields, const int * pWeights, ExtRanker_c * pRanker, CSphString & sError )$/;"	f	struct:RankerState_MatchAny_fn
Init	sphinxsearch.cpp	/^	bool Init ( int iFields, const int * pWeights, ExtRanker_c * pRanker, CSphString & sError )$/;"	f	struct:RankerState_ProximityPayload_fn
Init	sphinxsearch.cpp	/^	bool Init ( int iFields, const int * pWeights, ExtRanker_c *, CSphString & )$/;"	f	struct:RankerState_Proximity_fn
Init	sphinxsearch.cpp	/^	bool Init ( int iFields, const int * pWeights, ExtRanker_c *, CSphString & )$/;"	f	struct:RankerState_Wordcount_fn
Init	sphinxsearch.cpp	/^	bool Init ( int, const int *, ExtRanker_c *, CSphString & )$/;"	f	struct:RankerState_Fieldmask_fn
Init	sphinxsearch.cpp	/^bool RankerState_Expr_fn::Init ( int iFields, const int * pWeights, ExtRanker_c * pRanker, CSphString & sError )$/;"	f	class:RankerState_Expr_fn
Init	sphinxstd.h	/^	void Init ( int iElements )$/;"	f	class:CSphBitvec
InitLock	searchd.cpp	/^bool ServedIndex_t::InitLock () const$/;"	f	class:ServedIndex_t
InitMorph	sphinx.cpp	/^bool CSphDictCRCTraits::InitMorph ( const char * szMorph, int iLength, bool bUseUTF8, CSphString & sError )$/;"	f	class:CSphDictCRCTraits
InitSharedBuffer	searchd.cpp	/^T * InitSharedBuffer ( CSphSharedBuffer<T> & tBuffer, int iLen )$/;"	f
InitState	sphinxsearch.cpp	/^	virtual bool				InitState ( const CSphQueryContext &, CSphString & )	{ return true; }$/;"	f	class:ExtRanker_c
InitState	sphinxsearch.cpp	/^	virtual bool InitState ( const CSphQueryContext & tCtx, CSphString & )$/;"	f	class:ExtRanker_WeightSum_c
InitState	sphinxsearch.cpp	/^	virtual bool InitState ( const CSphQueryContext & tCtx, CSphString & sError )$/;"	f	class:ExtRanker_T
InputBuffer_c	searchd.cpp	/^InputBuffer_c::InputBuffer_c ( const BYTE * pBuf, int iLen )$/;"	f	class:InputBuffer_c
InputBuffer_c	searchd.cpp	/^class InputBuffer_c$/;"	c	file:
Insert	sphinxstd.h	/^	void Insert ( int iIndex, const T & tValue )$/;"	f	class:CSphVector
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & ) const { assert ( 0 ); return 0; }$/;"	f	struct:Expr_GetStrConst_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & ) const { return (int64_t)m_fValue; }$/;"	f	struct:Expr_GetConst_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & ) const { return m_iValue; }$/;"	f	struct:Expr_GetInt64Const_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & ) const { return m_iValue; }$/;"	f	struct:Expr_GetIntConst_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return (int)tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetSint_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return (int64_t) Eval ( tMatch ); }$/;"	f	class:Expr_UdfFloat_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return (int64_t)tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetBits_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return (int64_t)tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetInt_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return (int64_t)tMatch.m_iDocID; }$/;"	f	struct:Expr_GetId_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return (int64_t)tMatch.m_iWeight; }$/;"	f	struct:Expr_GetWeight_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return IntEval ( tMatch ); }$/;"	f	class:Expr_ArgVsSet_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return IntEval ( tMatch ); }$/;"	f	struct:Expr_Crc32_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { return IntEval ( tMatch ); }$/;"	f	struct:Expr_Fibonacci_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const$/;"	f
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_Bitdot_c
Int64Eval	sphinxexpr.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_UdfInt_c
Int64Eval	sphinxexpr.h	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const { assert ( 0 ); return (int64_t) Eval ( tMatch ); }$/;"	f	struct:ISphExpr
Int64Eval	sphinxsearch.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & ) const { return m_iValue; }$/;"	f	struct:Expr_GetIntConst_c
Int64Eval	sphinxsort.cpp	/^	virtual int64_t Int64Eval ( const CSphMatch & tMatch ) const$/;"	f	struct:ExprSortStringAttrFixup_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & ) const { assert ( 0 ); return (int)m_iValue; }$/;"	f	struct:Expr_GetInt64Const_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & ) const { assert ( 0 ); return 0; }$/;"	f	struct:Expr_GetStrConst_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & ) const { return (int)m_fValue; }$/;"	f	struct:Expr_GetConst_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & ) const { return m_iValue; }$/;"	f	struct:Expr_GetIntConst_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { const BYTE * pStr; return sphCRC32 ( pStr, m_pFirst->StringEval ( tMatch, &pStr ) ); }$/;"	f	struct:Expr_Crc32_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return (int) Eval ( tMatch ); }$/;"	f	class:Expr_UdfFloat_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return (int) Int64Eval ( tMatch ); }$/;"	f	class:Expr_UdfInt_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return (int)tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetBits_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return (int)tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetInt_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return (int)tMatch.GetAttr ( m_tLocator ); }$/;"	f	struct:Expr_GetSint_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return (int)tMatch.m_iDocID; }$/;"	f	struct:Expr_GetId_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return (int)tMatch.m_iWeight; }$/;"	f	struct:Expr_GetWeight_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { return Fibonacci ( m_pFirst->IntEval ( tMatch ) ); }$/;"	f	struct:Expr_Fibonacci_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const$/;"	f
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_Bitdot_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_InUservar_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_In_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_IntervalConst_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_Interval_c
IntEval	sphinxexpr.cpp	/^	virtual int IntEval ( const CSphMatch & tMatch ) const$/;"	f	class:Expr_MVAIn_c
IntEval	sphinxexpr.h	/^	virtual int IntEval ( const CSphMatch & tMatch ) const { assert ( 0 ); return (int) Eval ( tMatch ); }$/;"	f	struct:ISphExpr
IntEval	sphinxsearch.cpp	/^	int IntEval ( const CSphMatch & ) const$/;"	f	struct:Expr_FieldFactor_c
IntEval	sphinxsearch.cpp	/^	int IntEval ( const CSphMatch & ) const$/;"	f	struct:Expr_IntPtr_c
IntEval	sphinxsearch.cpp	/^	int IntEval ( const CSphMatch & tMatch ) const$/;"	f	struct:Expr_Sum_c
IntEval	sphinxsearch.cpp	/^	virtual int IntEval ( const CSphMatch & ) const { return m_iValue; }$/;"	f	struct:Expr_GetIntConst_c
Invalidate	sphinxsearch.cpp	/^void NodeCacheContainer_t::Invalidate()$/;"	f	class:NodeCacheContainer_t
IsAcceptableHit	sphinxsearch.cpp	/^inline bool ExtTermPos_c<TERM_POS_FIELD_END>::IsAcceptableHit ( const ExtHit_t * pHit ) const$/;"	f	class:ExtTermPos_c
IsAcceptableHit	sphinxsearch.cpp	/^inline bool ExtTermPos_c<TERM_POS_FIELD_LIMIT>::IsAcceptableHit ( const ExtHit_t * pHit ) const$/;"	f	class:ExtTermPos_c
IsAcceptableHit	sphinxsearch.cpp	/^inline bool ExtTermPos_c<TERM_POS_FIELD_START>::IsAcceptableHit ( const ExtHit_t * pHit ) const$/;"	f	class:ExtTermPos_c
IsAcceptableHit	sphinxsearch.cpp	/^inline bool ExtTermPos_c<TERM_POS_FIELD_STARTEND>::IsAcceptableHit ( const ExtHit_t * pHit ) const$/;"	f	class:ExtTermPos_c
IsAcceptableHit	sphinxsearch.cpp	/^inline bool ExtTermPos_c<TERM_POS_ZONES>::IsAcceptableHit ( const ExtHit_t * pHit ) const$/;"	f	class:ExtTermPos_c
IsAddSub	sphinxexpr.cpp	/^static inline bool IsAddSub ( const ExprNode_t * pNode )$/;"	f	file:
IsAppropriate	sphinxquery.cpp	/^static bool IsAppropriate ( XQNode_t * pTree )$/;"	f	file:
IsArglist	sphinxexpr.cpp	/^	virtual bool IsArglist () const$/;"	f	struct:Expr_Arglist_c
IsArglist	sphinxexpr.h	/^	virtual bool IsArglist () const { return false; }$/;"	f	struct:ISphExpr
IsAri	sphinxexpr.cpp	/^static inline bool IsAri ( const ExprNode_t * pNode )$/;"	f	file:
IsBitfield	sphinx.h	/^	inline bool IsBitfield () const$/;"	f	struct:CSphAttrLocator
IsBoundary	sphinx.cpp	/^static inline bool IsBoundary ( BYTE c, bool bPhrase )$/;"	f	file:
IsCapital	sphinx.cpp	/^static inline bool IsCapital ( int iCh )$/;"	f	file:
IsConst	sphinxexpr.cpp	/^static inline bool IsConst ( const ExprNode_t * pNode )$/;"	f	file:
IsCount	sphinxsort.cpp	/^static bool IsCount ( const CSphString & s )$/;"	f	file:
IsCrossProduct	spelldump.cpp	/^bool CISpellAffixRule::IsCrossProduct () const$/;"	f	class:CISpellAffixRule
IsDeprecatedSyntax	searchd.cpp	/^	inline bool IsDeprecatedSyntax () const$/;"	f	struct:SqlParser_c
IsDone	sphinx.cpp	/^bool CSphBin::IsDone () const$/;"	f	class:CSphBin
IsEOF	sphinx.cpp	/^bool CSphBin::IsEOF () const$/;"	f	class:CSphBin
IsEarly	sphinxfilter.cpp	/^	virtual bool IsEarly () { return false; }$/;"	f	struct:Filter_WeightRange
IsEmpty	searchd.cpp	/^	bool IsEmpty ()$/;"	f	class:SearchFailuresLog_c
IsEmpty	sphinxquery.h	/^	bool IsEmpty () const$/;"	f	struct:XQNode_t
IsEmpty	sphinxstd.h	/^	bool IsEmpty () const$/;"	f	class:CSphSharedBuffer
IsEmpty	sphinxstd.h	/^	bool IsEmpty () const$/;"	f	struct:CSphString
IsEnabled	sphinx.h	/^	bool		IsEnabled() { return m_bEnabled; }$/;"	f	class:CSphIOStats
IsEnd	sphinx.h	/^	static inline bool IsEnd ( Hitpos_t uHitpos )$/;"	f	class:Hitman_c
IsEof	sphinx.cpp	/^bool CSphCharsetDefinitionParser::IsEof ()$/;"	f	class:CSphCharsetDefinitionParser
IsEqual	sphinx.cpp	/^bool WordformContainer_t::IsEqual ( const char * szFile, DWORD uCRC32 )$/;"	f	class:WordformContainer_t
IsEqualTo	sphinxquery.cpp	/^bool XQNode_t::IsEqualTo ( const XQNode_t * pNode )$/;"	f	class:XQNode_t
IsError	searchd.cpp	/^	bool IsError () const$/;"	f	struct:PipeReader_t
IsError	sphinx.cpp	/^	bool				IsError () const { return m_bError; }$/;"	f	struct:CSphBin
IsError	sphinxint.h	/^	bool			IsError () const	{ return m_bError; }$/;"	f	class:CSphWriter
IsGoodSyntax	searchd.cpp	/^bool SqlParser_c::IsGoodSyntax ()$/;"	f	class:SqlParser_c
IsGroupby	sphinxsort.cpp	/^	virtual bool IsGroupby () const$/;"	f	class:CSphKBufferGroupSorter
IsGroupby	sphinxsort.cpp	/^	virtual bool IsGroupby () const$/;"	f	class:CSphMatchQueue
IsGroupby	sphinxsort.cpp	/^	virtual bool IsGroupby () const$/;"	f	class:CSphUpdateQueue
IsGroupby	sphinxsort.cpp	/^	virtual bool IsGroupby ()$/;"	f	class:CSphKBufferMVAGroupSorter
IsGroupby	sphinxsort.cpp	/^static bool IsGroupby ( const CSphString & s )$/;"	f	file:
IsGroupbyMagic	sphinxsort.cpp	/^static bool IsGroupbyMagic ( const CSphString & s )$/;"	f	file:
IsID	sphinx.h	/^	bool IsID () const$/;"	f	struct:CSphAttrLocator
IsIDAttribute	searchd.cpp	/^inline bool IsIDAttribute ( const CSphColumnInfo & tTarget )$/;"	f
IsInSet	spelldump.cpp	/^bool IsInSet ( BYTE uLetter, const char * szSet )$/;"	f
IsInZone	sphinxexcerpt.cpp	/^	virtual SphZoneHit_e IsInZone ( int iZone, const ExtHit_t * pHit )$/;"	f	class:SnippetZoneChecker_c
IsInZone	sphinxsearch.cpp	/^SphZoneHit_e ExtRanker_c::IsInZone ( int iZone, const ExtHit_t * pHit )$/;"	f	class:ExtRanker_c
IsIntr	searchd.cpp	/^	bool			IsIntr () const { return m_bIntr; }$/;"	f	class:NetInputBuffer_c
IsKeyDataSynced	tests.cpp	/^	bool IsKeyDataSynced ( const DWORD * pData ) const$/;"	f	struct:TestAccCmp_fn
IsKnownFunc	sphinxsearch.cpp	/^	int IsKnownFunc ( const char * sFunc )$/;"	f	class:ExprRankerHook_c
IsKnownIdent	sphinxsearch.cpp	/^	int IsKnownIdent ( const char * sIdent )$/;"	f	class:ExprRankerHook_c
IsLess	searchd.cpp	/^	bool IsLess ( const CSphMatch & a, const CSphMatch & b ) const$/;"	f	struct:TaggedMatchSorter_fn
IsLess	searchd.cpp	/^	inline bool IsLess ( const CSphNamedInt & a, const CSphNamedInt & b ) const$/;"	f	struct:IndexNameLess_fn
IsLess	searchd.cpp	/^	inline bool IsLess ( const CSphString & a, const CSphString & b ) const$/;"	f	struct:CmpColumns_fn
IsLess	spelldump.cpp	/^	inline bool IsLess ( const char * a, const char * b ) const$/;"	f	struct:WordLess
IsLess	sphinx.cpp	/^	bool IsLess ( SphDocID_t a, SphDocID_t b ) const$/;"	f	struct:DocinfoSort_fn
IsLess	sphinx.cpp	/^	bool IsLess ( int a, int b ) const$/;"	f	struct:HitblockPatchSort_fn
IsLess	sphinx.cpp	/^	inline bool IsLess ( CSphDictKeywords::DictKeyword_t * a, CSphDictKeywords::DictKeyword_t * b ) const$/;"	f	struct:DictKeywordCmp_fn
IsLess	sphinx.cpp	/^	inline bool IsLess ( const CSphNamedInt & a, const CSphNamedInt & b )$/;"	f	struct:WordDocsGreaterOp_t
IsLess	sphinx.cpp	/^	inline bool IsLess ( const CSphWordHit & a, const CSphWordHit & b ) const$/;"	f	struct:CmpHit_fn
IsLess	sphinx.cpp	/^	inline bool IsLess ( const ISphMatchSorter * a, const ISphMatchSorter * b ) const$/;"	f	struct:CmpPSortersByRandom_fn
IsLess	sphinx.cpp	/^	inline bool IsLess ( const MvaEntry_t & a, const MvaEntry_t & b ) const$/;"	f	struct:CmpMvaEntries_fn
IsLess	sphinx.cpp	/^	inline bool IsLess ( const OrdinalId_t & a, const OrdinalId_t & b ) const$/;"	f	struct:CmpOrdinalsDocid_fn
IsLess	sphinx.cpp	/^	inline bool IsLess ( const Ordinal_t & a, const Ordinal_t & b ) const$/;"	f	struct:CmpOrdinalsValue_fn
IsLess	sphinx.cpp	/^	static inline bool IsLess ( const DictKeywordTagged_t & a, const DictKeywordTagged_t & b )$/;"	f	struct:DictKeywordTaggedCmp_fn
IsLess	sphinx.cpp	/^	static inline bool IsLess ( const MvaEntry_t & a, const MvaEntry_t & b )$/;"	f	struct:MvaEntryCmp_fn
IsLess	sphinx.cpp	/^	static inline bool IsLess ( const OrdinalEntry_t & a, const OrdinalEntry_t & b )$/;"	f	struct:CmpOrdinalsEntry_fn
IsLess	sphinx.cpp	/^	static inline bool IsLess ( const OrdinalIdEntry_t & a, const OrdinalIdEntry_t & b )$/;"	f	struct:CmpOrdinalIdEntry_fn
IsLess	sphinx.cpp	/^	static inline bool IsLess ( const int a, const int b )$/;"	f	struct:CmpQueuedDocinfo_fn
IsLess	sphinxexcerpt.cpp	/^	inline bool IsLess ( const ExcerptGen_c::Passage_t & a, const ExcerptGen_c::Passage_t & b ) const$/;"	f	struct:PassageOrder_fn
IsLess	sphinxsearch.cpp	/^	bool IsLess ( ExtNode_i * pA, ExtNode_i * pB ) const$/;"	f	struct:ExtNodeTF_fn
IsLess	sphinxsearch.cpp	/^	bool IsLess ( WORD uA, WORD uB ) const$/;"	f	struct:ExtNodeTFExt_fn
IsLess	sphinxsearch.cpp	/^	bool IsLess ( const ExtQword_t * pA, const ExtQword_t * pB ) const$/;"	f	struct:ExtQwordOrderbyQueryPos_t
IsLess	sphinxsort.cpp	/^	bool IsLess ( const CSphMatch & a, const CSphMatch & b ) const$/;"	f	struct:GroupSorter_fn
IsLess	sphinxsort.cpp	/^	static bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & )$/;"	f	struct:MatchRelevanceLt_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchAttrGt_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchAttrLt_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchCustom_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchExpr_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchGeneric2_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchGeneric3_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchGeneric4_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchGeneric5_fn
IsLess	sphinxsort.cpp	/^	static inline bool IsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t )$/;"	f	struct:MatchTimeSegments_fn
IsLess	sphinxstd.h	/^	inline bool IsLess ( const C & a, const C & b ) const$/;"	f	struct:SphMemberLess_T
IsLess	sphinxstd.h	/^	inline bool IsLess ( const CLASS & a, const CLASS & b ) const$/;"	f	struct:SphMemberFunctor_T
IsLess	sphinxstd.h	/^	inline bool IsLess ( const T & a, const T & b ) const$/;"	f	struct:SphGreater_T
IsLess	sphinxstd.h	/^	inline bool IsLess ( const T & a, const T & b ) const$/;"	f	struct:SphLess_T
IsLess	tests.cpp	/^	bool IsLess ( DWORD a, DWORD b ) const$/;"	f	struct:TestAccCmp_fn
IsNamedSection	sphinxutils.cpp	/^bool CSphConfigParser::IsNamedSection ( const char * sKey )$/;"	f	class:CSphConfigParser
IsPlainSection	sphinxutils.cpp	/^bool CSphConfigParser::IsPlainSection ( const char * sKey )$/;"	f	class:CSphConfigParser
IsPortInRange	searchd.cpp	/^inline bool IsPortInRange ( int iPort )$/;"	f
IsPrefix	spelldump.cpp	/^bool CISpellAffixRule::IsPrefix () const$/;"	f	class:CISpellAffixRule
IsRT	sphinx.h	/^	virtual bool				IsRT() const { return false; }$/;"	f	class:CSphIndex
IsSeparator	sphinx.cpp	/^static inline bool IsSeparator ( int iFolded, bool bFirst )$/;"	f	file:
IsSorted	tests.cpp	/^static bool IsSorted ( DWORD * pData, int iCount, const TestAccCmp_fn & fn )$/;"	f	file:
IsSpecial	sphinxquery.cpp	/^bool XQParser_t::IsSpecial ( char c )$/;"	f	class:XQParser_t
IsStarEnabled	sphinx.h	/^	bool						IsStarEnabled () const { return m_bEnableStar; }$/;"	f	class:CSphIndex
IsStopWord	indexer.cpp	/^	virtual bool IsStopWord ( const BYTE * ) const { return false; }$/;"	f	class:CSphStopwordBuilderDict
IsStopWord	sphinx.cpp	/^	virtual bool IsStopWord ( const BYTE * pWord ) const { return m_pBase->IsStopWord ( pWord ); }$/;"	f	class:CRtDictKeywords
IsStopWord	sphinx.cpp	/^bool CSphDictCRC<CRC32DICT>::IsStopWord ( const BYTE * pWord ) const$/;"	f	class:CSphDictCRC
IsStopWord	sphinxint.h	/^	virtual bool IsStopWord ( const BYTE * pWord ) const { return m_pDict->IsStopWord ( pWord ); }$/;"	f	class:CSphDictTraits
IsStripperInited	sphinx.h	/^	bool						IsStripperInited () const { return m_bStripperInited; }$/;"	f	class:CSphIndex
IsUtf8	sphinx.cpp	/^	virtual bool					IsUtf8 () const				{ return m_pTokenizer->IsUtf8 (); }$/;"	f	class:CSphTokenizer_Filter
IsUtf8	sphinx.cpp	/^	virtual bool				IsUtf8 () const { return false; }$/;"	f	class:CSphTokenizer_SBCS
IsUtf8	sphinx.cpp	/^	virtual bool				IsUtf8 () const { return true; }$/;"	f	class:CSphTokenizer_UTF8
IsValidTagStart	sphinx.cpp	/^bool CSphHTMLStripper::IsValidTagStart ( int iCh ) const$/;"	f	class:CSphHTMLStripper
IsVowel	sphinxmetaphone.cpp	/^static bool IsVowel ( BYTE c )$/;"	f	file:
IsWeightColumn	sphinx.cpp	/^static bool IsWeightColumn ( const CSphString & sAttr, const CSphSchema & tSchema )$/;"	f	file:
IsWhitespace	sphinx.cpp	/^static inline bool IsWhitespace ( BYTE c )$/;"	f	file:
IsWhitespace	sphinx.cpp	/^static inline bool IsWhitespace ( int c )$/;"	f	file:
IterateDocument	sphinx.cpp	/^bool CSphSource_Document::IterateDocument ( CSphString & sError )$/;"	f	class:CSphSource_Document
IterateDocument	sphinx.cpp	/^bool CSphSource_XMLPipe::IterateDocument ( CSphString & sError )$/;"	f	class:CSphSource_XMLPipe
IterateFieldMVANext	tests.cpp	/^	bool IterateFieldMVANext () { return false; }$/;"	f	class:SphDocRandomizer_c
IterateFieldMVANext	tests.cpp	/^	bool IterateFieldMVANext () { return false; }$/;"	f	class:SphTestDoc_c
IterateFieldMVAStart	sphinx.cpp	/^SphRange_t	CSphSource_XMLPipe::IterateFieldMVAStart ( int )$/;"	f	class:CSphSource_XMLPipe
IterateFieldMVAStart	sphinx.cpp	/^SphRange_t CSphSource_Document::IterateFieldMVAStart ( int iAttr )$/;"	f	class:CSphSource_Document
IterateFieldMVAStart	tests.cpp	/^	bool IterateFieldMVAStart ( int, CSphString & ) { return false; }$/;"	f	class:SphDocRandomizer_c
IterateFieldMVAStart	tests.cpp	/^	bool IterateFieldMVAStart ( int, CSphString & ) { return false; }$/;"	f	class:SphTestDoc_c
IterateGet	sphinxstd.h	/^	T & IterateGet () const$/;"	f	class:CSphOrderedHash
IterateGet	sphinxstd.h	/^	static T & IterateGet ( void ** ppCookie )$/;"	f	class:CSphOrderedHash
IterateGetKey	sphinxstd.h	/^	const KEY & IterateGetKey () const$/;"	f	class:CSphOrderedHash
IterateGetKey	sphinxstd.h	/^	static const KEY & IterateGetKey ( void ** ppCookie )$/;"	f	class:CSphOrderedHash
IterateHits	sphinx.cpp	/^ISphHits * CSphSource_Document::IterateHits ( CSphString & sError )$/;"	f	class:CSphSource_Document
IterateHits	sphinx.cpp	/^ISphHits * CSphSource_XMLPipe::IterateHits ( CSphString & )$/;"	f	class:CSphSource_XMLPipe
IterateJoinedHits	sphinx.cpp	/^ISphHits * CSphSource::IterateJoinedHits ( CSphString & )$/;"	f	class:CSphSource
IterateJoinedHits	sphinx.cpp	/^ISphHits * CSphSource_SQL::IterateJoinedHits ( CSphString & sError )$/;"	f	class:CSphSource_SQL
IterateKillListNext	sphinx.cpp	/^bool CSphSource_SQL::IterateKillListNext ( SphDocID_t & tDocId )$/;"	f	class:CSphSource_SQL
IterateKillListNext	sphinx.cpp	/^bool CSphSource_XMLPipe2::IterateKillListNext ( SphDocID_t & tDocId )$/;"	f	class:CSphSource_XMLPipe2
IterateKillListNext	sphinx.h	/^	virtual bool	IterateKillListNext ( SphDocID_t & )			{ return false; }$/;"	f	class:CSphSource_XMLPipe
IterateKillListNext	tests.cpp	/^	bool IterateKillListNext ( SphDocID_t & ) { return false; }$/;"	f	class:SphDocRandomizer_c
IterateKillListNext	tests.cpp	/^	bool IterateKillListNext ( SphDocID_t & ) { return false; }$/;"	f	class:SphTestDoc_c
IterateKillListStart	sphinx.cpp	/^bool CSphSource_SQL::IterateKillListStart ( CSphString & sError )$/;"	f	class:CSphSource_SQL
IterateKillListStart	sphinx.cpp	/^bool CSphSource_XMLPipe2::IterateKillListStart ( CSphString & )$/;"	f	class:CSphSource_XMLPipe2
IterateKillListStart	sphinx.h	/^	virtual bool	IterateKillListStart ( CSphString & )			{ return false; }$/;"	f	class:CSphSource_XMLPipe
IterateKillListStart	tests.cpp	/^	bool IterateKillListStart ( CSphString & ) { return false; }$/;"	f	class:SphDocRandomizer_c
IterateKillListStart	tests.cpp	/^	bool IterateKillListStart ( CSphString & ) { return false; }$/;"	f	class:SphTestDoc_c
IterateMultivaluedNext	sphinx.cpp	/^	virtual bool	IterateMultivaluedNext ()						{ return false; }$/;"	f	class:CSphSource_XMLPipe2
IterateMultivaluedNext	sphinx.cpp	/^bool CSphSource_SQL::IterateMultivaluedNext ()$/;"	f	class:CSphSource_SQL
IterateMultivaluedNext	sphinx.h	/^	virtual bool	IterateMultivaluedNext ()						{ return false; }	\/\/\/< xmlpipe does not support multi-valued attrs for now$/;"	f	class:CSphSource_XMLPipe
IterateMultivaluedNext	tests.cpp	/^	bool IterateMultivaluedNext () { return false; }$/;"	f	class:SphDocRandomizer_c
IterateMultivaluedNext	tests.cpp	/^	bool IterateMultivaluedNext () { return false; }$/;"	f	class:SphTestDoc_c
IterateMultivaluedStart	sphinx.cpp	/^	virtual bool	IterateMultivaluedStart ( int, CSphString & )	{ return false; }$/;"	f	class:CSphSource_XMLPipe2
IterateMultivaluedStart	sphinx.cpp	/^bool CSphSource_SQL::IterateMultivaluedStart ( int iAttr, CSphString & sError )$/;"	f	class:CSphSource_SQL
IterateMultivaluedStart	sphinx.h	/^	virtual bool	IterateMultivaluedStart ( int, CSphString & )	{ return false; }	\/\/\/< xmlpipe does not support multi-valued attrs for now$/;"	f	class:CSphSource_XMLPipe
IterateMultivaluedStart	tests.cpp	/^	bool IterateMultivaluedStart ( int, CSphString & ) { return false; }$/;"	f	class:SphDocRandomizer_c
IterateMultivaluedStart	tests.cpp	/^	bool IterateMultivaluedStart ( int, CSphString & ) { return false; }$/;"	f	class:SphTestDoc_c
IterateNext	spelldump.cpp	/^const CISpellDict::CISpellDictWord * CISpellDict::IterateNext ()$/;"	f	class:CISpellDict
IterateNext	sphinxstd.h	/^	bool IterateNext ( void ** ppCookie ) const$/;"	f	class:CSphOrderedHash
IterateNext	sphinxstd.h	/^	bool IterateNext () const$/;"	f	class:CSphOrderedHash
IterateStart	spelldump.cpp	/^void CISpellDict::IterateStart ()$/;"	f	class:CISpellDict
IterateStart	sphinx.cpp	/^	virtual bool	IterateStart ( CSphString & ) { m_iPlainFieldsLength = m_tSchema.m_dFields.GetLength(); return true; }	\/\/\/< Connect() starts getting documents automatically, so this one is empty$/;"	f	class:CSphSource_XMLPipe2
IterateStart	sphinx.cpp	/^bool CSphSource_PgSQL::IterateStart ( CSphString & sError )$/;"	f	class:CSphSource_PgSQL
IterateStart	sphinx.cpp	/^bool CSphSource_SQL::IterateStart ( CSphString & sError )$/;"	f	class:CSphSource_SQL
IterateStart	sphinx.h	/^	virtual bool		IterateStart ( CSphString & ) { return true; }	\/\/\/< Connect() starts getting documents automatically, so this one is empty$/;"	f	class:CSphSource_XMLPipe
IterateStart	sphinxstd.h	/^	bool IterateStart ( const KEY & tKey ) const$/;"	f	class:CSphOrderedHash
IterateStart	sphinxstd.h	/^	void IterateStart () const$/;"	f	class:CSphOrderedHash
IterateStart	tests.cpp	/^	bool IterateStart ( CSphString & ) { m_tDocInfo.Reset ( m_tSchema.GetRowSize() ); m_iPlainFieldsLength = m_tSchema.m_dFields.GetLength(); return true; }$/;"	f	class:SphDocRandomizer_c
IterateStart	tests.cpp	/^	bool IterateStart ( CSphString & ) { m_tDocInfo.Reset ( m_tSchema.GetRowSize() ); m_iPlainFieldsLength = m_tSchema.m_dFields.GetLength(); return true; }$/;"	f	class:SphTestDoc_c
Join	sphinxfilter.cpp	/^	virtual ISphFilter * Join ( ISphFilter * pFilter )$/;"	f	struct:Filter_And
Join	sphinxfilter.cpp	/^ISphFilter * ISphFilter::Join ( ISphFilter * pFilter )$/;"	f	class:ISphFilter
JuggleFile	sphinx.cpp	/^bool CSphIndex_VLN::JuggleFile ( const char* szExt, bool bNeedOrigin )$/;"	f	class:CSphIndex_VLN
K	sphinxstemru.cpp	/^		K	= 0xBAD0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
K	sphinxstemru.cpp	/^		K	= 0xD0BAU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
K	sphinxstemru.cpp	/^		K	= 0xEA,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
KEYWORD_CHUNK	sphinx.cpp	/^	static const int				KEYWORD_CHUNK	= 1048576;$/;"	m	class:CSphDictKeywords	file:
KEY_DEPRECATED	sphinxutils.cpp	/^	KEY_DEPRECATED		= 1UL<<0,$/;"	e	enum:__anon13	file:
KEY_LIST	sphinxutils.cpp	/^	KEY_LIST			= 1UL<<1$/;"	e	enum:__anon13	file:
Key	sphinx.cpp	/^	SphDocID_t Key ( DWORD * pData ) const$/;"	f	struct:DocinfoSort_fn
Key	sphinxstd.h	/^	MEDIAN_TYPE & Key ( T * a ) const$/;"	f	struct:SphAccessor_T
Key	tests.cpp	/^	DWORD Key ( DWORD * pData ) const$/;"	f	struct:TestAccCmp_fn
KeyDesc_t	sphinxutils.cpp	/^struct KeyDesc_t$/;"	s	file:
KeyFromValue	sphinxsort.cpp	/^	virtual SphGroupKey_t KeyFromValue ( SphAttr_t uValue ) const$/;"	f	class:CSphGrouperString
KeywordStar_e	sphinxexcerpt.cpp	/^	enum KeywordStar_e$/;"	g	class:ExcerptGen_c	file:
Keyword_t	sphinxexcerpt.cpp	/^	struct Keyword_t$/;"	s	class:ExcerptGen_c	file:
KeywordsEqual	sphinxsearch.cpp	/^static bool KeywordsEqual ( const XQNode_t * pA, const XQNode_t * pB )$/;"	f	file:
KillAllDupes	searchd.cpp	/^static int KillAllDupes ( ISphMatchSorter * pSorter, AggrResult_t & tRes, const CSphQuery & tQuery )$/;"	f	file:
L	sphinxstemru.cpp	/^		L	= 0xBBD0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
L	sphinxstemru.cpp	/^		L	= 0xD0BBU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
L	sphinxstemru.cpp	/^		L	= 0xEB,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
LDADD	Makefile	/^LDADD = $(COMMON_LIBS)$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBRARIES	Makefile	/^LIBRARIES = $(noinst_LIBRARIES)$/;"	m
LIBRT	Makefile	/^LIBRT = -lrt $/;"	m
LIBS	Makefile	/^LIBS = -lexpat -ldl -lm -lz  -L\/usr\/local\/lib -lrt  -lpthread$/;"	m
LIBSTEMMER_CFLAGS	Makefile	/^LIBSTEMMER_CFLAGS = $/;"	m
LIBSTEMMER_LIBS	Makefile	/^LIBSTEMMER_LIBS = $/;"	m
LLONG_MAX	sphinxint.h	467;"	d
LLONG_MIN	sphinxint.h	471;"	d
LOCALE_SAFE_GAP	sphinxsort.cpp	/^	static const int LOCALE_SAFE_GAP = 16;$/;"	m	class:LibcCSHash_fn	file:
LOCK_EX	searchd.cpp	624;"	d	file:
LOCK_UN	searchd.cpp	625;"	d	file:
LOC_BACK	sphinxutils.cpp	642;"	d	file:
LOC_CHAR_TYPE	sphinxstemru.cpp	155;"	d	file:
LOC_CHAR_TYPE	sphinxstemru.cpp	63;"	d	file:
LOC_CHECK	indexer.cpp	383;"	d	file:
LOC_CHECK	indexer.cpp	842;"	d	file:
LOC_CHECK	sphinx.cpp	5217;"	d	file:
LOC_CHECK	sphinx.cpp	5235;"	d	file:
LOC_CHECK	sphinxsort.cpp	2954;"	d	file:
LOC_CHECK	sphinxsort.cpp	2986;"	d	file:
LOC_CHECK_RANGE	sphinx.cpp	2330;"	d	file:
LOC_CHECK_RANGE	sphinx.cpp	2335;"	d	file:
LOC_CLEANUP	sphinx.cpp	18033;"	d	file:
LOC_CLEANUP	sphinx.cpp	18124;"	d	file:
LOC_CLOCK	searchd.cpp	6296;"	d	file:
LOC_ENCODE	sphinx.cpp	8811;"	d	file:
LOC_ENCODE	sphinx.cpp	8834;"	d	file:
LOC_ERR	indexer.cpp	321;"	d	file:
LOC_ERR	indexer.cpp	372;"	d	file:
LOC_ERR	indexer.cpp	485;"	d	file:
LOC_ERR	indexer.cpp	565;"	d	file:
LOC_ERROR	sphinx.cpp	18724;"	d	file:
LOC_ERROR	sphinx.cpp	18802;"	d	file:
LOC_ERROR	sphinx.cpp	20857;"	d	file:
LOC_ERROR	sphinx.cpp	21116;"	d	file:
LOC_ERROR	sphinxutils.cpp	635;"	d	file:
LOC_ERROR	sphinxutils.cpp	822;"	d	file:
LOC_ERROR2	sphinx.cpp	20858;"	d	file:
LOC_ERROR2	sphinx.cpp	21117;"	d	file:
LOC_ERROR2	sphinxutils.cpp	636;"	d	file:
LOC_ERROR3	sphinxutils.cpp	637;"	d	file:
LOC_ERROR4	sphinxutils.cpp	638;"	d	file:
LOC_FAIL	sphinx.cpp	15365;"	d	file:
LOC_FIX_NULL	sphinx.cpp	20711;"	d	file:
LOC_FIX_NULL	sphinx.cpp	20716;"	d	file:
LOC_FIX_QARRAY	sphinx.cpp	20718;"	d	file:
LOC_FIX_QARRAY	sphinx.cpp	20725;"	d	file:
LOC_GETA	indexer.cpp	411;"	d	file:
LOC_GETA	indexer.cpp	846;"	d	file:
LOC_GETB	indexer.cpp	406;"	d	file:
LOC_GETI	indexer.cpp	396;"	d	file:
LOC_GETI	indexer.cpp	844;"	d	file:
LOC_GETL	indexer.cpp	401;"	d	file:
LOC_GETL	indexer.cpp	845;"	d	file:
LOC_GETS	indexer.cpp	391;"	d	file:
LOC_GETS	indexer.cpp	843;"	d	file:
LOC_MYSQL_ERROR	search.cpp	424;"	d	file:
LOC_POP	sphinxutils.cpp	641;"	d	file:
LOC_POP	sphinxutils.cpp	820;"	d	file:
LOC_PREFIX	sphinxstemru.cpp	156;"	d	file:
LOC_PREFIX	sphinxstemru.cpp	64;"	d	file:
LOC_PUSH	sphinxutils.cpp	640;"	d	file:
LOC_PUSH	sphinxutils.cpp	821;"	d	file:
LOC_REFINE_BREAK	sphinx.cpp	3976;"	d	file:
LOC_RETURN_SYNONYM	sphinx.cpp	3966;"	d	file:
LOC_SKIP_SPACES	sphinx.cpp	19579;"	d	file:
LOC_SKIP_SPACES	sphinx.cpp	19662;"	d	file:
LOC_SPACE0	indexer.cpp	329;"	d	file:
LOC_SPACE0	indexer.cpp	373;"	d	file:
LOC_SPACE1	indexer.cpp	330;"	d	file:
LOC_SPACE1	indexer.cpp	374;"	d	file:
LOC_SPAWN_POLY	sphinxexpr.cpp	1584;"	d	file:
LOC_SPAWN_POLY	sphinxexpr.cpp	1705;"	d	file:
LOC_SQL_ERROR	sphinx.cpp	21118;"	d	file:
LOC_SQL_ERROR	sphinx.cpp	21289;"	d	file:
LOC_SQL_ERROR	sphinx.cpp	21315;"	d	file:
LOC_TEXT	indexer.cpp	333;"	d	file:
LOC_TEXT	indexer.cpp	377;"	d	file:
LOC_TEXT	indexer.cpp	490;"	d	file:
LOC_TEXT	indexer.cpp	566;"	d	file:
LOC_TOK	indexer.cpp	331;"	d	file:
LOC_TOK	indexer.cpp	375;"	d	file:
LOC_TOKEQ	indexer.cpp	332;"	d	file:
LOC_TOKEQ	indexer.cpp	376;"	d	file:
LOG_FORMAT_PLAIN	searchd.cpp	/^	LOG_FORMAT_PLAIN,$/;"	e	enum:LogFormat_e	file:
LOG_FORMAT_SPHINXQL	searchd.cpp	/^	LOG_FORMAT_SPHINXQL$/;"	e	enum:LogFormat_e	file:
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
Last	sphinx.h	/^	const CSphWordHit * Last () const$/;"	f	class:ISphHits
Last	sphinxstd.h	/^	T & Last () const$/;"	f	class:CSphFixedVector
Last	sphinxstd.h	/^	T & Last ()$/;"	f	class:CSphVector
Last	sphinxstd.h	/^	const T & Last () const$/;"	f	class:CSphVector
LastColumn	searchd.cpp	/^	inline CSphColumnInfo & LastColumn() { return m_dAttrs.Last(); }$/;"	f	class:CVirtualSchema
Leak	sphinxstd.h	/^	char * Leak ()$/;"	f	struct:CSphString
LeakData	sphinxstd.h	/^	T * LeakData ()$/;"	f	class:CSphVector
LeakDictionary	sphinx.cpp	/^CSphDict * CSphIndex::LeakDictionary ()$/;"	f	class:CSphIndex
LeakPtr	sphinxstd.h	/^	T *				LeakPtr ()					{ T * pPtr = m_pPtr; m_pPtr = NULL; return pPtr; }$/;"	f	class:CSphScopedPtr
LeakStorages	sphinx.cpp	/^void CSphQueryResult::LeakStorages ( CSphQueryResult & tDst )$/;"	f	class:CSphQueryResult
LeakTokenizer	sphinx.cpp	/^ISphTokenizer *	CSphIndex::LeakTokenizer ()$/;"	f	class:CSphIndex
Length	searchd.cpp	/^	int Length () const$/;"	f	class:SqlRowBuffer_c
Length	sphinx.h	/^	int Length () const$/;"	f	class:ISphHits
Length	sphinxstd.h	/^	int Length () const$/;"	f	struct:CSphString
Length	sphinxstd.h	/^	int Length ()$/;"	f	class:CSphStringBuilder
LibcCIHash_fn	sphinxsort.cpp	/^class LibcCIHash_fn$/;"	c	file:
LibcCSHash_fn	sphinxsort.cpp	/^	LibcCSHash_fn()$/;"	f	class:LibcCSHash_fn
LibcCSHash_fn	sphinxsort.cpp	/^class LibcCSHash_fn$/;"	c	file:
LimitBits	sphinxstd.h	/^	void LimitBits ( int iBits )$/;"	f	class:CSphSmallBitvec
ListenerDesc_t	searchd.cpp	/^struct ListenerDesc_t$/;"	s	file:
Listener_t	searchd.cpp	/^struct Listener_t$/;"	s	file:
Load	spelldump.cpp	/^bool CISpellAffix::Load ( const char * szFilename )$/;"	f	class:CISpellAffix
Load	spelldump.cpp	/^bool CISpellDict::Load ( const char * szFilename )$/;"	f	class:CISpellDict
LoadDictionarySettings	sphinx.cpp	/^void LoadDictionarySettings ( CSphReader & tReader, CSphDictSettings & tSettings, DWORD uVersion, CSphString & sWarning )$/;"	f
LoadFileField	sphinx.cpp	/^int CSphSource_Document::LoadFileField ( BYTE ** ppField, CSphString & sError )$/;"	f	class:CSphSource_Document
LoadHeader	sphinx.cpp	/^bool CSphIndex_VLN::LoadHeader ( const char * sHeaderName, bool bStripPath, CSphString & sWarning )$/;"	f	class:CSphIndex_VLN
LoadHitlessWords	sphinx.cpp	/^bool CSphIndex_VLN::LoadHitlessWords ()$/;"	f	class:CSphIndex_VLN
LoadISpell	spelldump.cpp	/^bool CISpellAffix::LoadISpell ( FILE * pFile )$/;"	f	class:CISpellAffix
LoadIndexSettings	sphinx.cpp	/^void LoadIndexSettings ( CSphIndexSettings & tSettings, CSphReader & tReader, DWORD uVersion )$/;"	f
LoadLocale	spelldump.cpp	/^void CISpellAffix::LoadLocale ()$/;"	f	class:CISpellAffix
LoadMVA	sphinxfilter.cpp	/^	inline bool LoadMVA ( const CSphMatch & tMatch, const DWORD ** pMva, const DWORD ** pMvaMax ) const$/;"	f	struct:IFilter_MVA
LoadMySpell	spelldump.cpp	/^bool CISpellAffix::LoadMySpell ( FILE * pFile )$/;"	f	class:CISpellAffix
LoadPersistentMVA	sphinx.cpp	/^bool CSphIndex_VLN::LoadPersistentMVA ( CSphString & sError )$/;"	f	class:CSphIndex_VLN
LoadStopwords	indexer.cpp	/^	virtual void		LoadStopwords ( const char *, ISphTokenizer * ) {}$/;"	f	class:CSphStopwordBuilderDict
LoadStopwords	sphinx.cpp	/^	virtual void LoadStopwords ( const char * sFiles, ISphTokenizer * pTokenizer ) { m_pBase->LoadStopwords ( sFiles, pTokenizer ); }$/;"	f	class:CRtDictKeywords
LoadStopwords	sphinx.cpp	/^void CSphDictCRCTraits::LoadStopwords ( const char * sFiles, ISphTokenizer * pTokenizer )$/;"	f	class:CSphDictCRCTraits
LoadStopwords	sphinxint.h	/^	virtual void		LoadStopwords ( const char * sFiles, ISphTokenizer * pTokenizer ) { m_pDict->LoadStopwords ( sFiles, pTokenizer ); }$/;"	f	class:CSphDictTraits
LoadSynonyms	sphinx.cpp	/^	virtual bool					LoadSynonyms ( const char * sFilename, CSphString & sError )	{ return m_pTokenizer->LoadSynonyms ( sFilename, sError ); }$/;"	f	class:CSphTokenizer_Filter
LoadSynonyms	sphinx.cpp	/^bool CSphTokenizerTraits<IS_UTF8>::LoadSynonyms ( const char * sFilename, CSphString & sError )$/;"	f	class:CSphTokenizerTraits
LoadTokenizerSettings	sphinx.cpp	/^void LoadTokenizerSettings ( CSphReader & tReader, CSphTokenizerSettings & tSettings, DWORD uVersion, CSphString & sWarning )$/;"	f
LoadWordformContainer	sphinx.cpp	/^WordformContainer_t * CSphDictCRCTraits::LoadWordformContainer ( const char * szFile, DWORD uCRC32, const ISphTokenizer * pTokenizer, const char * sIndex )$/;"	f	class:CSphDictCRCTraits
LoadWordforms	indexer.cpp	/^	virtual bool		LoadWordforms ( const char *, ISphTokenizer *, const char * ) { return true; }$/;"	f	class:CSphStopwordBuilderDict
LoadWordforms	sphinx.cpp	/^	virtual bool LoadWordforms ( const char * sFile, ISphTokenizer * pTokenizer, const char * sIndex ) { return m_pBase->LoadWordforms ( sFile, pTokenizer, sIndex ); }$/;"	f	class:CRtDictKeywords
LoadWordforms	sphinx.cpp	/^bool CSphDictCRCTraits::LoadWordforms ( const char * szFile, ISphTokenizer * pTokenizer, const char * sIndex )$/;"	f	class:CSphDictCRCTraits
LoadWordforms	sphinxint.h	/^	virtual bool		LoadWordforms ( const char * sFile, ISphTokenizer * pTokenizer, const char * sIndex ) { return m_pDict->LoadWordforms ( sFile, pTokenizer, sIndex ); }$/;"	f	class:CSphDictTraits
LocalSearchThreadContext_t	searchd.cpp	/^struct LocalSearchThreadContext_t$/;"	s	file:
LocalSearchThreadFunc	searchd.cpp	/^void LocalSearchThreadFunc ( void * pArg )$/;"	f
LocalSearch_t	searchd.cpp	/^struct LocalSearch_t$/;"	s	file:
LocatorPair_t	sphinxint.h	/^struct LocatorPair_t$/;"	s
Lock	searchd.cpp	/^void StaticThreadsOnlyMutex_t::Lock ()$/;"	f	class:StaticThreadsOnlyMutex_t
Lock	searchd.cpp	/^void ThreadsOnlyMutex_t::Lock ()$/;"	f	class:ThreadsOnlyMutex_t
Lock	sphinx.cpp	/^bool CSphIndex_VLN::Lock ()$/;"	f	class:CSphIndex_VLN
Lock	sphinxstd.h	/^	bool Lock ()$/;"	f	class:CSphStaticMutex
Log	sphinxutils.cpp	/^inline void Log ( ESphLogLevel eLevel, const char * sFmt, va_list ap )$/;"	f
LogFormat_e	searchd.cpp	/^enum LogFormat_e$/;"	g	file:
LogLevelName	searchd.cpp	/^static const char * LogLevelName ( ESphLogLevel eLevel )$/;"	f	file:
LogQuery	searchd.cpp	/^void LogQuery ( const CSphQuery & q, const CSphQueryResult & tRes, const CSphVector<int64_t> & dAgentTimes )$/;"	f
LogQueryPlain	searchd.cpp	/^void LogQueryPlain ( const CSphQuery & tQuery, const CSphQueryResult & tRes )$/;"	f
LogQuerySphinxql	searchd.cpp	/^void LogQuerySphinxql ( const CSphQuery & q, const CSphQueryResult & tRes, const CSphVector<int64_t> & dAgentTimes )$/;"	f
LogSphinxqlError	searchd.cpp	/^void LogSphinxqlError ( const char * sStmt, const char * sError )$/;"	f
LogWarning	searchd.cpp	/^void LogWarning ( const char * sWarning )$/;"	f
Logger	indexer.cpp	/^static void Logger ( ESphLogLevel eLevel, const char * sFmt, va_list ap )$/;"	f	file:
M	sphinxstemru.cpp	/^		M	= 0xBCD0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
M	sphinxstemru.cpp	/^		M	= 0xD0BCU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
M	sphinxstemru.cpp	/^		M	= 0xEC,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
MACRO_COUNT	sphinx.h	/^	static const int			MACRO_COUNT = 2;$/;"	m	struct:CSphSource_SQL
MACRO_VALUES	sphinx.cpp	/^const char * const CSphSource_SQL::MACRO_VALUES [ CSphSource_SQL::MACRO_COUNT ] =$/;"	m	class:CSphSource_SQL	file:
MACRO_VALUES	sphinx.h	/^	static const char * const	MACRO_VALUES [ MACRO_COUNT ];$/;"	m	struct:CSphSource_SQL
MAGIC_CODE_PARAGRAPH	sphinxint.h	/^const char		MAGIC_CODE_PARAGRAPH		= 3;				\/\/ emitted from stripper (and passed via tokenizer) on paragraph boundary$/;"	v
MAGIC_CODE_SENTENCE	sphinxint.h	/^const char		MAGIC_CODE_SENTENCE			= 2;				\/\/ emitted from tokenizer on sentence boundary$/;"	v
MAGIC_CODE_ZONE	sphinxint.h	/^const char		MAGIC_CODE_ZONE				= 4;				\/\/ emitted from stripper (and passed via tokenizer) on zone boundary; followed by zero-terminated zone name$/;"	v
MAGIC_INITIAL_LIMIT	sphinxstd.h	/^	static const int MAGIC_INITIAL_LIMIT = 8;$/;"	m	class:CSphVectorPolicy
MAGIC_SYNONYM_WHITESPACE	sphinxint.h	/^const char		MAGIC_SYNONYM_WHITESPACE	= 1;				\/\/ used internally in tokenizer only$/;"	v
MAGIC_WORD_HEAD	sphinxint.h	/^const char		MAGIC_WORD_HEAD				= 1;				\/\/ prepended to keyword by source, stored in (crc) dictionary$/;"	v
MAGIC_WORD_HEAD_NONSTEMMED	sphinxint.h	/^const char		MAGIC_WORD_HEAD_NONSTEMMED	= 2;				\/\/ prepended to keyword by source, stored in dictionary$/;"	v
MAGIC_WORD_PARAGRAPH	sphinx.cpp	/^const char *	MAGIC_WORD_PARAGRAPH		= "\\3paragraph";	\/\/ emitted from source on paragraph boundary, stored in dictionary$/;"	v
MAGIC_WORD_SENTENCE	sphinx.cpp	/^const char *	MAGIC_WORD_SENTENCE			= "\\3sentence";		\/\/ emitted from source on sentence boundary, stored in dictionary$/;"	v
MAGIC_WORD_TAIL	sphinxint.h	/^const char		MAGIC_WORD_TAIL				= 1;				\/\/ appended to keyword by source, stored in (crc) dictionary$/;"	v
MAINT	Makefile	/^MAINT = #$/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/xuliwei\/mycode\/sphinx\/config\/missing --run makeinfo$/;"	m
MASK_CODEPOINT	sphinx.cpp	/^	MASK_CODEPOINT			= 0x00ffffffUL,	\/\/ mask off codepoint flags$/;"	e	enum:__anon18	file:
MASK_FLAGS	sphinx.cpp	/^	MASK_FLAGS				= 0xff000000UL, \/\/ mask off codepoint value$/;"	e	enum:__anon18	file:
MATCH_ATTR	sphinxsort.cpp	1691;"	d	file:
MATCH_ATTR	sphinxsort.cpp	1706;"	d	file:
MATCH_ATTR	sphinxsort.cpp	1710;"	d	file:
MATCH_DECLARE_ATTR	sphinxsort.cpp	1692;"	d	file:
MATCH_DECLARE_ATTR	sphinxsort.cpp	1703;"	d	file:
MATCH_DECLARE_ATTR	sphinxsort.cpp	1707;"	d	file:
MATCH_FUNCTION	sphinxsort.cpp	1688;"	d	file:
MATCH_FUNCTION	sphinxsort.cpp	1714;"	d	file:
MATCH_FUNCTION	sphinxsort.cpp	1716;"	d	file:
MATCH_FUNCTION	sphinxsort.cpp	1721;"	d	file:
MATCH_FUNCTION	sphinxsort.cpp	1723;"	d	file:
MATCH_NOW	sphinxsort.cpp	1690;"	d	file:
MATCH_NOW	sphinxsort.cpp	1705;"	d	file:
MATCH_NOW	sphinxsort.cpp	1709;"	d	file:
MATCH_VAR	sphinxsort.cpp	1715;"	d	file:
MATCH_VAR	sphinxsort.cpp	1717;"	d	file:
MATCH_VAR	sphinxsort.cpp	1722;"	d	file:
MATCH_VAR	sphinxsort.cpp	1724;"	d	file:
MATCH_WEIGHT	sphinxsort.cpp	1689;"	d	file:
MATCH_WEIGHT	sphinxsort.cpp	1704;"	d	file:
MATCH_WEIGHT	sphinxsort.cpp	1708;"	d	file:
MAX_ATTRS	sphinx.h	/^	static const int	MAX_ATTRS = 5;$/;"	m	struct:CSphMatchComparatorState
MAX_BITS	sphinx.cpp	/^	static const int		MAX_BITS	= 12;$/;"	m	class:CSphArena	file:
MAX_CHAR_INDEX	sphinx.h	/^	static const int			MAX_CHAR_INDEX = 28;		\/\/\/< max valid char index (a-z, underscore, colon)$/;"	m	class:CSphHTMLStripper
MAX_CODE	sphinx.h	/^	static const int	MAX_CODE	= CHUNK_COUNT * CHUNK_SIZE;$/;"	m	class:CSphLowercaser
MAX_COL_SIZE	sphinx.h	/^	static const int		MAX_COL_SIZE		= 8*1048576;	\/\/\/< hard limit on column buffer size$/;"	m	struct:CSphSource_ODBC
MAX_DOCS	sphinxsearch.cpp	/^	static const int			MAX_DOCS = 512;$/;"	m	class:ExtNode_i	file:
MAX_HIGHLIGHT_WORDS	sphinxexcerpt.cpp	/^static const int MAX_HIGHLIGHT_WORDS = 256;$/;"	v	file:
MAX_HITS	sphinxsearch.cpp	/^	static const int			MAX_HITS = 512;$/;"	m	class:ExtNode_i	file:
MAX_KEYWORD_BYTES	sphinx.cpp	/^static const int MAX_KEYWORD_BYTES = SPH_MAX_WORD_LEN*3+4;$/;"	v	file:
MAX_LOGENTRIES	sphinx.cpp	/^	static const int		MAX_LOGENTRIES	= 29;$/;"	m	class:CSphArena	file:
MAX_MULTINODES	sphinxquery.cpp	/^	static const int			MAX_MULTINODES = 64;$/;"	m	class:RevealCommon_t	file:
MAX_ORDINAL_STR_LEN	sphinx.cpp	/^	static const int MAX_ORDINAL_STR_LEN	= 4096;	\/\/\/< maximum ordinal string length in bytes$/;"	m	class:CSphIndex_VLN	file:
MAX_RETRY_COUNT	searchd.cpp	/^const int	MAX_RETRY_COUNT		= 8;$/;"	v
MAX_RETRY_DELAY	searchd.cpp	/^const int	MAX_RETRY_DELAY		= 1000;$/;"	v
MAX_SORT_FIELDS	sphinxsort.cpp	/^static const int MAX_SORT_FIELDS = 5; \/\/ MUST be in sync with CSphMatchComparatorState::m_iAttr$/;"	v	file:
MAX_SOURCE_HITS	sphinx.cpp	9035;"	d	file:
MAX_STR_LENGTH	spelldump.cpp	/^const int MAX_STR_LENGTH = 512;$/;"	v
MAX_SYNONYM_LEN	sphinx.h	/^	static const int				MAX_SYNONYM_LEN		= 1024;	\/\/\/< max synonyms map-from length, bytes$/;"	m	class:ISphTokenizer
MAX_TAGS	sphinx.cpp	/^	static const int		MAX_TAGS		= 1024;$/;"	m	class:CSphArena	file:
MEDIAN_TYPE	sphinx.cpp	/^	typedef SphDocID_t MEDIAN_TYPE;$/;"	t	struct:DocinfoSort_fn	file:
MEDIAN_TYPE	sphinxsort.cpp	/^	typedef CSphMatch MEDIAN_TYPE;$/;"	t	struct:GroupSorter_fn	file:
MEDIAN_TYPE	sphinxstd.h	/^	typedef T MEDIAN_TYPE;$/;"	t	struct:SphAccessor_T
MEDIAN_TYPE	tests.cpp	/^	typedef DWORD MEDIAN_TYPE;$/;"	t	struct:TestAccCmp_fn	file:
MEMORY	sphinxint.h	360;"	d
MEMORY	sphinxint.h	364;"	d
MEMORY_MAGIC_ARRAY	sphinxstd.cpp	/^const DWORD MEMORY_MAGIC_ARRAY		= 0xaaaaaaaaUL;$/;"	v
MEMORY_MAGIC_DELETED	sphinxstd.cpp	/^const DWORD MEMORY_MAGIC_DELETED	= 0xdedededeUL;$/;"	v
MEMORY_MAGIC_END	sphinxstd.cpp	/^const DWORD MEMORY_MAGIC_END		= 0xeeeeeeeeUL;$/;"	v
MEMORY_MAGIC_PLAIN	sphinxstd.cpp	/^const DWORD MEMORY_MAGIC_PLAIN		= 0xbbbbbbbbUL;$/;"	v
MEM_STACK_MAX_DEPHT	sphinxstd.cpp	415;"	d	file:
MINIBUFFER_LEN	sphinx.cpp	/^	static const int	MINIBUFFER_LEN = 1024;$/;"	m	class:DiskIndexQwordTraits_c	file:
MIN_BITS	sphinx.cpp	/^	static const int		MIN_BITS	= 4;$/;"	m	class:CSphArena	file:
MIN_KEYWORDS_DICT	sphinx.cpp	/^static const int MIN_KEYWORDS_DICT	= 4*1048576;	\/\/ FIXME! ideally must be in sync with impl (ENTRY_CHUNKS, KEYWORD_CHUNKS)$/;"	v	file:
MIN_READ_BUFFER	sphinx.cpp	/^static const int	MIN_READ_BUFFER			= 8192;$/;"	v	file:
MIN_READ_UNHINTED	sphinx.cpp	/^static const int	MIN_READ_UNHINTED		= 1024;$/;"	v	file:
MIN_SIZE	sphinx.cpp	/^	static const int	MIN_SIZE	= 8192;$/;"	m	struct:CSphBin	file:
MIN_WRITE_BUFFER	sphinx.cpp	/^	static const int			MIN_WRITE_BUFFER		= 262144;	\/\/\/< min write buffer size$/;"	m	class:CSphIndex_VLN	file:
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MPM_FORK	searchd.cpp	/^	MPM_FORK,		\/\/\/< fork a worker process for each query$/;"	e	enum:Mpm_e	file:
MPM_NONE	searchd.cpp	/^	MPM_NONE,		\/\/\/< process queries in a loop one by one (eg. in --console)$/;"	e	enum:Mpm_e	file:
MPM_PREFORK	searchd.cpp	/^	MPM_PREFORK,	\/\/\/< keep a number of pre-forked processes$/;"	e	enum:Mpm_e	file:
MPM_THREADS	searchd.cpp	/^	MPM_THREADS		\/\/\/< create a worker thread for each query$/;"	e	enum:Mpm_e	file:
MSG_NOSIGNAL	searchd.cpp	77;"	d	file:
MS_SQL_BUFFER_GAP	sphinx.cpp	23931;"	d	file:
MVA_ARENA_FLAG	sphinxint.h	42;"	d
MVA_DOWNSIZE	sphinxint.h	40;"	d
MVA_OFFSET_MASK	sphinxint.h	41;"	d
MVA_UPDATES_POOL	searchd.cpp	40;"	d	file:
MVA_UPSIZE	sphinxint.h	/^inline int64_t MVA_UPSIZE ( const DWORD * pMva )$/;"	f
MYA	sphinxstemru.cpp	/^		MYA	= 0x8CD1U, \/\/ MYAgkiy znak$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
MYA	sphinxstemru.cpp	/^		MYA	= 0xD18CU, \/\/ MYAgkiy znak$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
MYA	sphinxstemru.cpp	/^		MYA	= 0xFC, \/\/ MYAgkiy znak$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
MYSQL_CFLAGS	Makefile	/^MYSQL_CFLAGS = -I\/usr\/include\/mysql -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv$/;"	m
MYSQL_COL_DECIMAL	searchd.cpp	/^	MYSQL_COL_DECIMAL	= 0,$/;"	e	enum:MysqlColumnType_e	file:
MYSQL_COL_FLOAT	searchd.cpp	/^	MYSQL_COL_FLOAT	= 4,$/;"	e	enum:MysqlColumnType_e	file:
MYSQL_COL_LONG	searchd.cpp	/^	MYSQL_COL_LONG		= 3,$/;"	e	enum:MysqlColumnType_e	file:
MYSQL_COL_LONGLONG	searchd.cpp	/^	MYSQL_COL_LONGLONG	= 8,$/;"	e	enum:MysqlColumnType_e	file:
MYSQL_COL_STRING	searchd.cpp	/^	MYSQL_COL_STRING	= 254$/;"	e	enum:MysqlColumnType_e	file:
MYSQL_COM_INIT_DB	searchd.cpp	/^	MYSQL_COM_INIT_DB	= 2,$/;"	e	enum:__anon25	file:
MYSQL_COM_PING	searchd.cpp	/^	MYSQL_COM_PING		= 14,$/;"	e	enum:__anon25	file:
MYSQL_COM_QUERY	searchd.cpp	/^	MYSQL_COM_QUERY		= 3,$/;"	e	enum:__anon25	file:
MYSQL_COM_QUIT	searchd.cpp	/^	MYSQL_COM_QUIT		= 1,$/;"	e	enum:__anon25	file:
MYSQL_COM_SET_OPTION	searchd.cpp	/^	MYSQL_COM_SET_OPTION	= 27$/;"	e	enum:__anon25	file:
MYSQL_ERR_FIELD_SPECIFIED_TWICE	searchd.cpp	/^	MYSQL_ERR_FIELD_SPECIFIED_TWICE		= 1110,$/;"	e	enum:MysqlErrors_e	file:
MYSQL_ERR_NO_SUCH_TABLE	searchd.cpp	/^	MYSQL_ERR_NO_SUCH_TABLE				= 1146$/;"	e	enum:MysqlErrors_e	file:
MYSQL_ERR_PARSE_ERROR	searchd.cpp	/^	MYSQL_ERR_PARSE_ERROR				= 1064,$/;"	e	enum:MysqlErrors_e	file:
MYSQL_ERR_SERVER_SHUTDOWN	searchd.cpp	/^	MYSQL_ERR_SERVER_SHUTDOWN			= 1053,$/;"	e	enum:MysqlErrors_e	file:
MYSQL_ERR_UNKNOWN_COM_ERROR	searchd.cpp	/^	MYSQL_ERR_UNKNOWN_COM_ERROR			= 1047,$/;"	e	enum:MysqlErrors_e	file:
MYSQL_LIBS	Makefile	/^MYSQL_LIBS = -L\/usr\/lib64\/mysql -lmysqlclient -lz -lcrypt -lnsl -lm -L\/usr\/lib64 -lssl -lcrypto$/;"	m
M_DEBUG	spelldump.cpp	/^	M_DEBUG,$/;"	e	enum:OutputMode_e	file:
M_DEFAULT	spelldump.cpp	/^	M_DEFAULT = M_EXACT_OR_LONGEST$/;"	e	enum:OutputMode_e	file:
M_DUPLICATES	spelldump.cpp	/^	M_DUPLICATES,$/;"	e	enum:OutputMode_e	file:
M_EXACT_OR_LONGEST	spelldump.cpp	/^	M_EXACT_OR_LONGEST,$/;"	e	enum:OutputMode_e	file:
M_LAST	spelldump.cpp	/^	M_LAST,$/;"	e	enum:OutputMode_e	file:
M_LOG10E	sphinxexpr.cpp	39;"	d	file:
M_LOG2E	sphinxexpr.cpp	35;"	d	file:
MakeQueries	sphinxquery.cpp	/^	void MakeQueries()$/;"	f	class:RevealCommon_t	file:
MakeSnippets	searchd.cpp	/^bool MakeSnippets ( CSphString sIndex, CSphVector<ExcerptQuery_t> & dQueries, CSphString & sError )$/;"	f
MapInfo_t	spelldump.cpp	/^struct MapInfo_t$/;"	s	file:
Mark	sphinxsearch.cpp	/^void CSphHitMarker::Mark ( CSphVector<SphHitMark_t> & dMarked )$/;"	f	class:CSphHitMarker
MarkHits	sphinxexcerpt.cpp	/^void ExcerptGen_c::MarkHits ()$/;"	f	class:ExcerptGen_c
MarkIt	sphinxquery.cpp	/^	void MarkIt ( bool bMark=true )$/;"	f	struct:MarkedNode_t
MarkedNode_t	sphinxquery.cpp	/^	explicit MarkedNode_t ( XQNode_t * pTree=NULL )$/;"	f	struct:MarkedNode_t
MarkedNode_t	sphinxquery.cpp	/^struct MarkedNode_t$/;"	s	file:
Match	sphinxexcerpt.cpp	/^	inline bool Match ( const Token_t & tToken, BYTE * sToken )$/;"	f	struct:SnippetsQword_ExactForm_c
Match	sphinxexcerpt.cpp	/^	inline bool Match ( const Token_t & tToken, BYTE * sToken )$/;"	f	struct:SnippetsQword_StarBack_c
Match	sphinxexcerpt.cpp	/^	inline bool Match ( const Token_t & tToken, BYTE * sToken )$/;"	f	struct:SnippetsQword_StarBoth_c
Match	sphinxexcerpt.cpp	/^	inline bool Match ( const Token_t & tToken, BYTE * sToken )$/;"	f	struct:SnippetsQword_StarFront_c
MatchAttrGt_fn	sphinxsort.cpp	/^struct MatchAttrGt_fn : public ISphMatchComparator$/;"	s	file:
MatchAttrLt_fn	sphinxsort.cpp	/^struct MatchAttrLt_fn : public ISphMatchComparator$/;"	s	file:
MatchCustom_fn	sphinxsort.cpp	/^struct MatchCustom_fn : public ISphMatchComparator$/;"	s	file:
MatchExpr_fn	sphinxsort.cpp	/^struct MatchExpr_fn : public ISphMatchComparator$/;"	s	file:
MatchExtended	sphinx.cpp	/^bool CSphIndex_VLN::MatchExtended ( CSphQueryContext * pCtx, const CSphQuery * pQuery, int iSorters, ISphMatchSorter ** ppSorters, ISphRanker * pRanker, int iTag ) const$/;"	f	class:CSphIndex_VLN
MatchGeneric2_fn	sphinxsort.cpp	/^struct MatchGeneric2_fn : public ISphMatchComparator$/;"	s	file:
MatchGeneric3_fn	sphinxsort.cpp	/^struct MatchGeneric3_fn : public ISphMatchComparator$/;"	s	file:
MatchGeneric4_fn	sphinxsort.cpp	/^struct MatchGeneric4_fn : public ISphMatchComparator$/;"	s	file:
MatchGeneric5_fn	sphinxsort.cpp	/^struct MatchGeneric5_fn : public ISphMatchComparator$/;"	s	file:
MatchRelevanceLt_fn	sphinxsort.cpp	/^struct MatchRelevanceLt_fn : public ISphMatchComparator$/;"	s	file:
MatchStar	sphinxexcerpt.cpp	/^bool SnippetsDocIndex_c::MatchStar ( const ExcerptGen_c::Keyword_t & tTok, const BYTE * sWord, int iWordLen ) const$/;"	f	class:SnippetsDocIndex_c
MatchTimeSegments_fn	sphinxsort.cpp	/^struct MatchTimeSegments_fn : public ISphMatchComparator$/;"	s	file:
Max	sphinxstd.h	301;"	d
MemCategorized_t	sphinxstd.cpp	/^	MemCategorized_t()$/;"	f	struct:MemCategorized_t
MemCategorized_t	sphinxstd.cpp	/^struct MemCategorized_t$/;"	s	file:
MemInputBuffer_c	searchd.cpp	/^					MemInputBuffer_c ( const BYTE * pBuf, int iLen ) : InputBuffer_c ( pBuf, iLen ) {}$/;"	f	class:MemInputBuffer_c
MemInputBuffer_c	searchd.cpp	/^class MemInputBuffer_c : public InputBuffer_c$/;"	c	file:
MemTracker_c	sphinxint.h	/^	explicit MemTracker_c ( Memory::Category_e eCategory )$/;"	f	struct:MemTracker_c
MemTracker_c	sphinxint.h	/^struct MemTracker_c : ISphNoncopyable$/;"	s
Memory	sphinxint.h	/^namespace Memory$/;"	n
Merge	sphinx.cpp	/^bool CSphIndex_VLN::Merge ( CSphIndex * pSource, CSphVector<CSphFilterSettings> & dFilters, bool bMergeKillLists )$/;"	f	class:CSphIndex_VLN
Merge	sphinxquery.cpp	/^	void Merge ( const Associations_t& parents )$/;"	f	class:Associations_t
MergeAssociations	sphinxquery.cpp	/^	void MergeAssociations ( const Associations_t & chain, uint64_t uHash )$/;"	f	class:CAssociations_t
MergeWordStats	searchd.cpp	/^static void MergeWordStats ( CSphQueryResultMeta & tDstResult, const SmallStringHash_T<CSphQueryResultMeta::WordStat_t> & hSrc, SearchFailuresLog_c * pLog, const char * sIndex )$/;"	f	file:
MergeWords	sphinx.cpp	/^bool CSphIndex_VLN::MergeWords ( CSphIndex_VLN * pSrcIndex, ISphFilter * pFilter )$/;"	f	class:CSphIndex_VLN
MetaphAdd	sphinxmetaphone.cpp	/^static void MetaphAdd ( BYTE * pPrimary, BYTE * pSecondary, const char * szAddPrimary, const char * szAddSecondary )$/;"	f	file:
Min	sphinxstd.h	300;"	d
MinimizeAggrResult	searchd.cpp	/^bool MinimizeAggrResult ( AggrResult_t & tRes, const CSphQuery & tQuery, bool bHadLocalIndexes, CSphSchema* pExtraSchema, bool bFromSphinxql=false )$/;"	f
MinimizeAggrResultCompat	searchd.cpp	/^bool MinimizeAggrResultCompat ( AggrResult_t & tRes, const CSphQuery & tQuery, bool bHadLocalIndexes )$/;"	f
MinimizeSchema	searchd.cpp	/^bool MinimizeSchema ( CSphSchema & tDst, const CSphSchema & tSrc )$/;"	f
MkIdAttribute	searchd.cpp	/^void MkIdAttribute ( CSphColumnInfo * pId )$/;"	f
Mlock	sphinx.cpp	/^bool CSphIndex_VLN::Mlock ()$/;"	f	class:CSphIndex_VLN
Mlock	sphinxstd.h	/^	bool Mlock ( const char * sPrefix, CSphString & sError )$/;"	f	class:CSphSharedBuffer
Mlock	sphinxstd.h	/^	bool Mlock ( const char *, CSphString & )$/;"	f	class:CSphSharedBuffer
Mpm_e	searchd.cpp	/^enum Mpm_e$/;"	g	file:
MultiQuery	sphinx.cpp	/^bool CSphIndex_VLN::MultiQuery ( const CSphQuery * pQuery, CSphQueryResult * pResult, int iSorters, ISphMatchSorter ** ppSorters, const CSphVector<CSphFilterSettings> * pExtraFilters, int iTag ) const$/;"	f	class:CSphIndex_VLN
MultiQueryEx	sphinx.cpp	/^bool CSphIndex_VLN::MultiQueryEx ( int iQueries, const CSphQuery * pQueries, CSphQueryResult ** ppResults, ISphMatchSorter ** ppSorters, const CSphVector<CSphFilterSettings> * pExtraFilters, int iTag ) const$/;"	f	class:CSphIndex_VLN
MultiScan	sphinx.cpp	/^bool CSphIndex_VLN::MultiScan ( const CSphQuery * pQuery, CSphQueryResult * pResult, int iSorters, ISphMatchSorter ** ppSorters, const CSphVector<CSphFilterSettings> * pExtraFilters, int iTag ) const$/;"	f	class:CSphIndex_VLN
MutexBenchThread	tests.cpp	/^void MutexBenchThread ( void * pArg )$/;"	f
MvaEntryCmp_fn	sphinx.cpp	/^struct MvaEntryCmp_fn$/;"	s	file:
MvaEntryTag_t	sphinx.cpp	/^struct MvaEntryTag_t : public MvaEntry_t$/;"	s	file:
MvaEntry_t	sphinx.cpp	/^struct MvaEntry_t$/;"	s	file:
MvaEval	sphinxexpr.cpp	/^	virtual const DWORD * MvaEval ( const CSphMatch & tMatch ) const { return tMatch.GetAttrMVA ( m_tLocator, m_pMva ); }$/;"	f	struct:Expr_GetMva_c
MvaEval	sphinxexpr.cpp	/^int Expr_MVAIn_c<false>::MvaEval ( const DWORD * pMva ) const$/;"	f	class:Expr_MVAIn_c
MvaEval	sphinxexpr.cpp	/^int Expr_MVAIn_c<true>::MvaEval ( const DWORD * pMva ) const$/;"	f	class:Expr_MVAIn_c
MvaEval	sphinxexpr.h	/^	virtual const DWORD * MvaEval ( const CSphMatch & ) const { assert ( 0 ); return NULL; }$/;"	f	struct:ISphExpr
MvaEval	sphinxfilter.cpp	/^bool Filter_MVARange<false>::MvaEval ( const DWORD * pMva, const DWORD * pMvaMax ) const$/;"	f	class:Filter_MVARange
MvaEval	sphinxfilter.cpp	/^bool Filter_MVARange<true>::MvaEval ( const DWORD * pMva, const DWORD * pMvaMax ) const$/;"	f	class:Filter_MVARange
MvaEval	sphinxfilter.cpp	/^bool Filter_MVAValues<false>::MvaEval ( const DWORD * pMva, const DWORD * pMvaMax ) const$/;"	f	class:Filter_MVAValues
MvaEval	sphinxfilter.cpp	/^bool Filter_MVAValues<true>::MvaEval ( const DWORD * pMva, const DWORD * pMvaMax ) const$/;"	f	class:Filter_MVAValues
MySetServiceStatus	searchd.cpp	/^void MySetServiceStatus ( DWORD dwCurrentState, DWORD dwWin32ExitCode, DWORD dwWaitHint )$/;"	f
MysqlColumnType_e	searchd.cpp	/^enum MysqlColumnType_e$/;"	g	file:
MysqlErrors_e	searchd.cpp	/^enum MysqlErrors_e$/;"	g	file:
MysqlPack	searchd.cpp	/^void * MysqlPack ( void * pBuffer, int iValue )$/;"	f
MysqlPackedLen	searchd.cpp	/^int MysqlPackedLen ( const char * sStr )$/;"	f
MysqlUnpack	searchd.cpp	/^int MysqlUnpack ( InputBuffer_c & tReq, DWORD * pSize )$/;"	f
N	sphinxstemru.cpp	/^		N	= 0xBDD0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
N	sphinxstemru.cpp	/^		N	= 0xD0BDU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
N	sphinxstemru.cpp	/^		N	= 0xED,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
NETOUTBUF	searchd.cpp	41;"	d	file:
NET_MINIBUFFER_SIZE	searchd.cpp	/^	static const int	NET_MINIBUFFER_SIZE = 4096;$/;"	m	class:NetInputBuffer_c	file:
NOINLINE	tests.cpp	694;"	d	file:
NOINLINE	tests.cpp	696;"	d	file:
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NUM_SIZES	sphinx.cpp	/^	static const int		NUM_SIZES	= MAX_BITS-MIN_BITS+2;	\/\/\/< one for 0 (empty pages), and one for each size from min to max$/;"	m	class:CSphArena	file:
Negate	sphinxstd.h	/^	void Negate()$/;"	f	class:CSphSmallBitvec
NetInputBuffer_c	searchd.cpp	/^NetInputBuffer_c::NetInputBuffer_c ( int iSock )$/;"	f	class:NetInputBuffer_c
NetInputBuffer_c	searchd.cpp	/^class NetInputBuffer_c : public InputBuffer_c$/;"	c	file:
NetOutputBuffer_c	searchd.cpp	/^NetOutputBuffer_c::NetOutputBuffer_c ( int iSock )$/;"	f	class:NetOutputBuffer_c
NetOutputBuffer_c	searchd.cpp	/^class NetOutputBuffer_c$/;"	c	file:
Next	searchd.cpp	/^bool IndexHashIterator_c::Next ()$/;"	f	class:IndexHashIterator_c
NextDocument	sphinx.cpp	/^	static inline bool NextDocument ( QWORD & tQword, CSphIndex_VLN * pSourceIndex, CSphRowitem * pInline, ISphFilter * pFilter )$/;"	f	class:CSphMerger
NextDocument	sphinx.cpp	/^BYTE **	CSphSource_XMLPipe2::NextDocument ( CSphString & sError )$/;"	f	class:CSphSource_XMLPipe2
NextDocument	sphinx.cpp	/^BYTE ** CSphSource_SQL::NextDocument ( CSphString & sError )$/;"	f	class:CSphSource_SQL
NextDocument	tests.cpp	/^	virtual BYTE ** NextDocument ( CSphString & )$/;"	f	class:SphDocRandomizer_c
NextDocument	tests.cpp	/^	virtual BYTE ** NextDocument ( CSphString & )$/;"	f	class:SphTestDoc_c
NodeCacheContainer_t	sphinxsearch.cpp	/^	NodeCacheContainer_t ()$/;"	f	class:NodeCacheContainer_t
NodeCacheContainer_t	sphinxsearch.cpp	/^class NodeCacheContainer_t$/;"	c	file:
O	sphinxstemru.cpp	/^		O	= 0xBED0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
O	sphinxstemru.cpp	/^		O	= 0xD0BEU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
O	sphinxstemru.cpp	/^		O	= 0xEE,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
OPT	indextool.cpp	86;"	d	file:
OPT	search.cpp	165;"	d	file:
OPT	search.cpp	93;"	d	file:
OPT	searchd.cpp	15380;"	d	file:
OPT1	indextool.cpp	87;"	d	file:
OPT1	search.cpp	94;"	d	file:
OPT1	searchd.cpp	15381;"	d	file:
ORDINAL_READ_SIZE	sphinx.cpp	/^	static const int ORDINAL_READ_SIZE		= 262144;	\/\/\/< sorted ordinal id read buffer size in bytes$/;"	m	class:CSphIndex_VLN	file:
OdbcPostConnect	sphinx.cpp	/^void CSphSource_MSSQL::OdbcPostConnect ()$/;"	f	class:CSphSource_MSSQL
OdbcPostConnect	sphinx.h	/^	virtual void			OdbcPostConnect () {}$/;"	f	struct:CSphSource_ODBC
Off	searchd.cpp	/^	char * Off ( int iOff )$/;"	f	class:SqlRowBuffer_c
OnFinish	sphinxexcerpt.cpp	/^	virtual void OnFinish () {}$/;"	f	class:HighlightPlain_c
OnFinish	sphinxexcerpt.cpp	/^	virtual void OnFinish () {}$/;"	f	class:HitCollector_c
OnOverlap	sphinxexcerpt.cpp	/^	virtual void OnOverlap ( int iStart, int iLen )$/;"	f	class:HighlightPlain_c
OnOverlap	sphinxexcerpt.cpp	/^	virtual void OnOverlap ( int, int ) {}$/;"	f	class:HitCollector_c
OnRunFinished	searchd.cpp	/^void SearchHandler_c::OnRunFinished()$/;"	f	class:SearchHandler_c
OnSPZ	sphinxexcerpt.cpp	/^	virtual void OnSPZ ( BYTE , DWORD, char * ) {}$/;"	f	class:HighlightPlain_c
OnSPZ	sphinxexcerpt.cpp	/^	virtual void OnSPZ ( BYTE iSPZ, DWORD uPosition, char * sZoneName )$/;"	f	class:HitCollector_c
OnSetup	sphinxexcerpt.cpp	/^	virtual const char * OnSetup ( CSphDict * )$/;"	f	class:ISnippetsQword
OnSetup	sphinxexcerpt.cpp	/^	virtual const char * OnSetup ( CSphDict * )$/;"	f	struct:SnippetQword_Star_t
OnSetup	sphinxexcerpt.cpp	/^	virtual const char* OnSetup ( CSphDict * pDict )$/;"	f	struct:SnippetsQword_ExactForm_c
OnSkipHtml	sphinxexcerpt.cpp	/^	virtual void OnSkipHtml ( int iStart, int iLen )$/;"	f	class:HighlightPlain_c
OnSkipHtml	sphinxexcerpt.cpp	/^	virtual void OnSkipHtml ( int, int ) {}$/;"	f	class:HitCollector_c
OnTail	sphinxexcerpt.cpp	/^	virtual void OnTail ( int iStart, int iLen )$/;"	f	class:HighlightPlain_c
OnTail	sphinxexcerpt.cpp	/^	virtual void OnTail ( int, int ) {}$/;"	f	class:HitCollector_c
OnToken	sphinxexcerpt.cpp	/^	virtual void OnToken ( int iStart, int iLen, const BYTE * sWord, DWORD, const CSphVector<SphWordID_t> & dWordids )$/;"	f	class:HighlightPlain_c
OnToken	sphinxexcerpt.cpp	/^	virtual void OnToken ( int iStart, int iLen, const BYTE *, DWORD uPosition, const CSphVector<SphWordID_t> & )$/;"	f	class:HighlightQuery_c
OnToken	sphinxexcerpt.cpp	/^	virtual void OnToken ( int, int iLen, const BYTE * sWord, DWORD uPosition, const CSphVector<SphWordID_t> & dWordids )$/;"	f	class:HitCollector_c
Open	sphinx.cpp	/^bool CSphAutoreader::Open ( const CSphString & sFilename, CSphString & sError )$/;"	f	class:CSphAutoreader
Open	sphinx.cpp	/^int CSphAutofile::Open ( const CSphString & sName, int iMode, CSphString & sError, bool bTemp )$/;"	f	class:CSphAutofile
OpenDaemonLog	searchd.cpp	/^void OpenDaemonLog ( const CSphConfigSection & hSearchd, bool bCloseIfOpened=false )$/;"	f
OpenFile	sphinx.cpp	/^bool CSphWriter::OpenFile ( const CSphString & sName, CSphString & sErrorBuffer )$/;"	f	class:CSphWriter
Optimize	sphinxexpr.cpp	/^void ExprParser_t::Optimize ( int iNode )$/;"	f	class:ExprParser_t
OrdinalEntry_t	sphinx.cpp	/^struct OrdinalEntry_t : public Ordinal_t$/;"	s	file:
OrdinalIdEntry_t	sphinx.cpp	/^struct OrdinalIdEntry_t : public OrdinalId_t$/;"	s	file:
OrdinalId_t	sphinx.cpp	/^struct OrdinalId_t$/;"	s	file:
Ordinal_t	sphinx.cpp	/^struct Ordinal_t$/;"	s	file:
OutputMode_e	spelldump.cpp	/^enum OutputMode_e$/;"	g	file:
P	sphinxstemru.cpp	/^		P	= 0xBFD0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
P	sphinxstemru.cpp	/^		P	= 0xD0BFU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
P	sphinxstemru.cpp	/^		P	= 0xEF,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
PACKAGE	Makefile	/^PACKAGE = sphinx$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = shodan(at)sphinxsearch.com$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = sphinx$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = sphinx 2.0.8$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = sphinx$/;"	m
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 2.0.8$/;"	m
PAGE_ALLOCS	sphinx.cpp	/^	static const int		PAGE_ALLOCS	= 1<<( MAX_BITS-MIN_BITS);$/;"	m	class:CSphArena	file:
PAGE_BITMAP	sphinx.cpp	/^	static const int		PAGE_BITMAP	= ( PAGE_ALLOCS+8*sizeof(DWORD)-1 )\/( 8*sizeof(DWORD) );$/;"	m	class:CSphArena	file:
PAGE_SIZE	sphinx.cpp	/^	static const int		PAGE_SIZE	= 1<<MAX_BITS;$/;"	m	class:CSphArena	file:
PARANOID	sphinxrt.cpp	77;"	d	file:
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PGSQL_CFLAGS	Makefile	/^PGSQL_CFLAGS = $/;"	m
PGSQL_LIBS	Makefile	/^PGSQL_LIBS = $/;"	m
PHASE_COLLECT	sphinx.h	/^		PHASE_COLLECT,				\/\/\/< document collection phase$/;"	e	enum:CSphIndexProgress::Phase_e
PHASE_COLLECT_MVA	sphinx.h	/^		PHASE_COLLECT_MVA,			\/\/\/< multi-valued attributes collection phase$/;"	e	enum:CSphIndexProgress::Phase_e
PHASE_MERGE	sphinx.h	/^		PHASE_MERGE,				\/\/\/< index merging$/;"	e	enum:CSphIndexProgress::Phase_e
PHASE_PRECOMPUTE	sphinx.h	/^		PHASE_PRECOMPUTE			\/\/\/< searchd startup, indexing attributes$/;"	e	enum:CSphIndexProgress::Phase_e
PHASE_PREREAD	sphinx.h	/^		PHASE_PREREAD,				\/\/\/< searchd startup, prereading data$/;"	e	enum:CSphIndexProgress::Phase_e
PHASE_SORT	sphinx.h	/^		PHASE_SORT,					\/\/\/< final sorting phase$/;"	e	enum:CSphIndexProgress::Phase_e
PHASE_SORT_MVA	sphinx.h	/^		PHASE_SORT_MVA,				\/\/\/< multi-valued attributes collection phase$/;"	e	enum:CSphIndexProgress::Phase_e
POOLSIZE	tests.cpp	/^const int POOLSIZE = 80*1048576;$/;"	v
PORTER1	tests.cpp	27;"	d	file:
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
POS_BITS	sphinx.h	/^		POS_BITS		= 31 - FIELD_BITS,$/;"	e	enum:Hitman_c::__anon7
POS_MASK	sphinx.h	/^		POS_MASK		= (1UL << POS_BITS) - 1,$/;"	e	enum:Hitman_c::__anon7
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PRIi64	sphinxstd.h	132;"	d
PRIi64	sphinxstd.h	154;"	d
PRIu64	sphinxstd.h	131;"	d
PRIu64	sphinxstd.h	150;"	d
PROCESSED_ITEM	searchd.cpp	/^	PROCESSED_ITEM					= -2,$/;"	e	enum:__anon24	file:
PROFILE	sphinx.cpp	452;"	d	file:
PROFILE	sphinx.cpp	461;"	d	file:
PROFILER_DONE	sphinx.cpp	448;"	d	file:
PROFILER_DONE	sphinx.cpp	457;"	d	file:
PROFILER_INIT	sphinx.cpp	447;"	d	file:
PROFILER_INIT	sphinx.cpp	456;"	d	file:
PROFILE_BEGIN	sphinx.cpp	449;"	d	file:
PROFILE_BEGIN	sphinx.cpp	458;"	d	file:
PROFILE_END	sphinx.cpp	450;"	d	file:
PROFILE_END	sphinx.cpp	459;"	d	file:
PROFILE_SHOW	sphinx.cpp	451;"	d	file:
PROFILE_SHOW	sphinx.cpp	460;"	d	file:
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
PROTO_MYSQL41	searchd.cpp	/^	PROTO_MYSQL41,$/;"	e	enum:ProtocolType_e	file:
PROTO_SPHINX	searchd.cpp	/^	PROTO_SPHINX = 0,$/;"	e	enum:ProtocolType_e	file:
PROTO_TOTAL	searchd.cpp	/^	PROTO_TOTAL$/;"	e	enum:ProtocolType_e	file:
PTR_TYPE	tests.cpp	/^	typedef DWORD * PTR_TYPE;$/;"	t	struct:TestAccCmp_fn	file:
PageDesc_t	sphinx.cpp	/^	struct PageDesc_t$/;"	s	class:CSphArena	file:
Palatalize	sphinxstemcz.cpp	/^static void Palatalize ( BYTE * word )$/;"	f	file:
Parse	sphinx.cpp	/^bool CSphCharsetDefinitionParser::Parse ( const char * sConfig, CSphVector<CSphRemapRange> & dRanges )$/;"	f	class:CSphCharsetDefinitionParser
Parse	sphinxexpr.cpp	/^ISphExpr * ExprParser_t::Parse ( const char * sExpr, const CSphSchema & tSchema, ESphAttr * pAttrType, bool * pUsesWeight, CSphString & sError )$/;"	f	class:ExprParser_t
Parse	sphinxquery.cpp	/^bool XQParser_t::Parse ( XQQuery_t & tParsed, const char * sQuery, const ISphTokenizer * pTokenizer, const CSphSchema * pSchema, CSphDict * pDict, int iStopwordStep )$/;"	f	class:XQParser_t
Parse	sphinxutils.cpp	/^bool CSphConfigParser::Parse ( const char * sFileName, const char * pBuffer )$/;"	f	class:CSphConfigParser
ParseAttr	sphinxexpr.cpp	/^int ExprParser_t::ParseAttr ( int iAttr, const char* sTok, YYSTYPE * lvalp )$/;"	f	class:ExprParser_t
ParseCharsetCode	sphinx.cpp	/^int CSphCharsetDefinitionParser::ParseCharsetCode ()$/;"	f	class:CSphCharsetDefinitionParser
ParseFieldMVA	sphinx.cpp	/^int CSphSource_Document::ParseFieldMVA ( CSphVector < DWORD > & dMva, const char * szValue, bool bMva64 )$/;"	f	class:CSphSource_Document
ParseFields	sphinxquery.cpp	/^bool XQParser_t::ParseFields ( CSphSmallBitvec & dFields, int & iMaxFieldPos, bool & bIgnore )$/;"	f	class:XQParser_t
ParseIndexList	searchd.cpp	/^void ParseIndexList ( const CSphString & sIndexes, CSphVector<CSphString> & dOut )$/;"	f
ParseJoinedField	indexer.cpp	/^bool ParseJoinedField ( const char * sBuf, CSphJoinedField * pField, const char * sSourceName )$/;"	f
ParseListener	searchd.cpp	/^ListenerDesc_t ParseListener ( const char * sSpec )$/;"	f
ParseMorphology	sphinx.cpp	/^bool CSphDictCRCTraits::ParseMorphology ( const char * szMorph, bool bUseUTF8, CSphString & sError )$/;"	f	class:CSphDictCRCTraits
ParseMultiAttr	indexer.cpp	/^bool ParseMultiAttr ( const char * sBuf, CSphColumnInfo & tAttr, const char * sSourceName )$/;"	f
ParseNextChunk	sphinx.cpp	/^bool CSphSource_XMLPipe2::ParseNextChunk ( int iBufferLen, CSphString & sError )$/;"	f	class:CSphSource_XMLPipe2
ParseNextChunk	sphinx.cpp	/^int CSphSource_XMLPipe2::ParseNextChunk ( CSphString & sError )$/;"	f	class:CSphSource_XMLPipe2
ParseNumeric	sphinxexpr.cpp	/^static int ParseNumeric ( YYSTYPE * lvalp, const char ** ppStr )$/;"	f	file:
ParseQuery	sphinxexcerpt.cpp	/^void SnippetsDocIndex_c::ParseQuery ( const char * sQuery, ISphTokenizer * pTokenizer, CSphDict * pDict, DWORD eExtQuerySPZ )$/;"	f	class:SnippetsDocIndex_c
ParseReply	searchd.cpp	/^	virtual bool ParseReply ( MemInputBuffer_c & tReq, AgentConn_t &, int ) const$/;"	f	struct:SphinxqlReplyParser_t
ParseReply	searchd.cpp	/^	virtual bool ParseReply ( MemInputBuffer_c & tReq, AgentConn_t &, int ) const$/;"	f	struct:UpdateReplyParser_t
ParseReply	searchd.cpp	/^bool SearchReplyParser_t::ParseReply ( MemInputBuffer_c & tReq, AgentConn_t & tAgent, int ) const$/;"	f	class:SearchReplyParser_t
ParseReply	searchd.cpp	/^bool SnippetReplyParser_t::ParseReply ( MemInputBuffer_c & tReq, AgentConn_t &, int iNumAgent ) const$/;"	f	class:SnippetReplyParser_t
ParseSearchQuery	searchd.cpp	/^bool ParseSearchQuery ( InputBuffer_c & tReq, CSphQuery & tQuery, int iVer, int iMasterVer )$/;"	f
ParseSelectList	sphinx.cpp	/^bool CSphQuery::ParseSelectList ( CSphString & sError )$/;"	f	class:CSphQuery
ParseSqlQuery	searchd.cpp	/^bool ParseSqlQuery ( const CSphString & sQuery, CSphVector<SqlStmt_t> & dStmt, CSphString & sError, ESphCollation eCollation )$/;"	f
ParseZone	sphinxquery.cpp	/^int XQParser_t::ParseZone ( const char * pZone )$/;"	f	class:XQParser_t
ParsedMultiQuery	sphinx.cpp	/^bool CSphIndex_VLN::ParsedMultiQuery ( const CSphQuery * pQuery, CSphQueryResult * pResult, int iSorters, ISphMatchSorter ** ppSorters, const XQQuery_t & tXQ, CSphDict * pDict, const CSphVector<CSphFilterSettings> * pExtraFilters, CSphQueryNodeCache * pNodeCache, int iTag ) const$/;"	f	class:CSphIndex_VLN
PassageOrder_fn	sphinxexcerpt.cpp	/^struct PassageOrder_fn$/;"	s	file:
Passage_t	sphinxexcerpt.cpp	/^	struct Passage_t$/;"	s	class:ExcerptGen_c	file:
Phase_e	sphinx.h	/^	enum Phase_e$/;"	g	struct:CSphIndexProgress
PipeAndFork	searchd.cpp	/^int PipeAndFork ( bool bFatal, int iHandler )$/;"	f
PipeAndFork	searchd.cpp	/^int PipeAndFork ( bool, int )	{ return -1; }$/;"	f
PipeInfo_t	searchd.cpp	/^	PipeInfo_t () : m_iFD ( -1 ), m_iHandler ( -1 ) {}$/;"	f	struct:PipeInfo_t
PipeInfo_t	searchd.cpp	/^struct PipeInfo_t$/;"	s	file:
PipeReader_t	searchd.cpp	/^	explicit PipeReader_t ( int iFD )$/;"	f	struct:PipeReader_t
PipeReader_t	searchd.cpp	/^struct PipeReader_t$/;"	s	file:
PoolPtrs_t	searchd.cpp	/^	PoolPtrs_t ()$/;"	f	struct:PoolPtrs_t
PoolPtrs_t	searchd.cpp	/^struct PoolPtrs_t$/;"	s	file:
Pop	sphinx.cpp	/^	virtual void Pop ()$/;"	f	class:CSphQueue
Pop	sphinx.cpp	/^	void Pop ()$/;"	f	struct:CSphHitQueue
Pop	sphinxsort.cpp	/^	virtual void Pop ()$/;"	f	class:CSphMatchQueue
Pop	sphinxstd.h	/^	const T & Pop ()$/;"	f	class:CSphVector
PostIndex	sphinx.cpp	/^void CSphSource_SQL::PostIndex ()$/;"	f	class:CSphSource_SQL
PostIndex	sphinx.h	/^	virtual void						PostIndex () {}$/;"	f	class:CSphSource
PostSetup	sphinx.cpp	/^	virtual void				PostSetup() {}$/;"	f	class:CSphIndex_VLN
PreCreatePlainIndex	searchd.cpp	/^void PreCreatePlainIndex ( ServedDesc_t & tServed, const char * sName )$/;"	f
Prealloc	sphinx.cpp	/^bool CSphIndex_VLN::Prealloc ( bool bMlock, bool bStripPath, CSphString & sWarning )$/;"	f	class:CSphIndex_VLN
Precache	sphinx.cpp	/^ESphBinRead CSphBin::Precache ()$/;"	f	class:CSphBin
PrecomputeMinMax	sphinx.cpp	/^bool CSphIndex_VLN::PrecomputeMinMax()$/;"	f	class:CSphIndex_VLN
PreforkChild	searchd.cpp	/^int PreforkChild ()$/;"	f
Prepare	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::Prepare ( DWORD * pOutBuffer, DWORD * pOutMax )$/;"	f	class:AttrIndexBuilder_t
PrepareQueryEmulation	searchd.cpp	/^void PrepareQueryEmulation ( CSphQuery * pQuery )$/;"	f
PrepareQword	sphinx.cpp	/^	void PrepareQword ( QWORD & tQword, const CSphDictReader & tReader, int iDynamic, SphDocID_t iMinID, bool bWordDict ) \/\/NOLINT$/;"	f	class:CSphMerger
PreprocessReplace	sphinxstemcz.cpp	/^static void PreprocessReplace ()$/;"	f	file:
PreprocessRules	sphinxstemcz.cpp	/^static void PreprocessRules ( ClampRule_t * pRules, int nRules )$/;"	f	file:
Preread	sphinx.cpp	/^bool CSphIndex_VLN::Preread ()$/;"	f	class:CSphIndex_VLN
PrereadNewIndex	searchd.cpp	/^bool PrereadNewIndex ( ServedIndex_t & tIdx, const CSphConfigSection & hIndex, const char * szIndexName )$/;"	f
PrereadSharedBuffer	sphinx.cpp	/^template < typename T > bool CSphIndex_VLN::PrereadSharedBuffer ( CSphSharedBuffer<T> & pBuffer, const char * sExt, size_t uExpected, DWORD uOffset )$/;"	f	class:CSphIndex_VLN
ProcessCode	sphinxmetaphone.cpp	/^static int ProcessCode ( int iCode, int iCur, CurrentWord_t & Word, BYTE * sPrimary, BYTE * sSecondary )$/;"	f	file:
ProcessNode	sphinx.cpp	/^void CSphSource_XMLPipe2::ProcessNode ( xmlTextReaderPtr pReader )$/;"	f	class:CSphSource_XMLPipe2
ProgressCallbackSimple_t	sphinxrt.h	/^typedef void ProgressCallbackSimple_t ();$/;"	t
ProgressCallback_t	sphinx.h	/^	typedef void ProgressCallback_t ( const CSphIndexProgress * pStat, bool bPhaseEnd );$/;"	t	class:CSphIndex
ProtoByName	searchd.cpp	/^ProtocolType_e ProtoByName ( const CSphString & sProto )$/;"	f
ProtocolType_e	searchd.cpp	/^enum ProtocolType_e$/;"	g	file:
Ptr	sphinxstd.h	/^	T *				Ptr () const					{ return m_pPtr; }$/;"	f	class:CSphRefcountedPtr
Ptr	sphinxstd.h	/^	T *				Ptr () const				{ return m_pPtr; }$/;"	f	class:CSphScopedPtr
Push	sphinx.cpp	/^	virtual bool Push ( const T & tEntry )$/;"	f	class:CSphQueue
Push	sphinx.cpp	/^	void Push ( CSphAggregateHit & tHit, int iBin )$/;"	f	struct:CSphHitQueue
Push	sphinxsort.cpp	/^	virtual bool Push ( const CSphMatch & tEntry )$/;"	f	class:CSphKBufferGroupSorter
Push	sphinxsort.cpp	/^	virtual bool Push ( const CSphMatch & tEntry )$/;"	f	class:CSphKBufferMVAGroupSorter
Push	sphinxsort.cpp	/^	virtual bool Push ( const CSphMatch & tEntry )$/;"	f	class:CSphMatchQueue
Push	sphinxsort.cpp	/^	virtual bool Push ( const CSphMatch & tEntry )$/;"	f	class:CSphUpdateQueue
PushEx	sphinxsort.cpp	/^	virtual bool PushEx ( const CSphMatch & tEntry, const SphGroupKey_t uGroupKey, bool bGrouped )$/;"	f	class:CSphKBufferGroupSorter
PushGrouped	sphinxsort.cpp	/^	virtual bool PushGrouped ( const CSphMatch & )$/;"	f	class:CSphMatchQueue
PushGrouped	sphinxsort.cpp	/^	virtual bool PushGrouped ( const CSphMatch & )$/;"	f	class:CSphUpdateQueue
PushGrouped	sphinxsort.cpp	/^	virtual bool PushGrouped ( const CSphMatch & tEntry )$/;"	f	class:CSphKBufferGroupSorter
PushGrouped	sphinxsort.cpp	/^	virtual bool PushGrouped ( const CSphMatch & tEntry )$/;"	f	class:CSphKBufferMVAGroupSorter
PushQuery	searchd.cpp	/^void SqlParser_c::PushQuery ()$/;"	f	class:SqlParser_c
PutByte	sphinx.cpp	/^void CSphWriter::PutByte ( int data )$/;"	f	class:CSphWriter
PutBytes	sphinx.cpp	/^void CSphWriter::PutBytes ( const void * pData, int iSize )$/;"	f	class:CSphWriter
PutDelta	sphinxint.h	/^	void PutDelta ( F & WRITER, const BYTE * pWord, int iLen )$/;"	f	class:CSphKeywordDeltaWriter
PutDocid	sphinxint.h	/^	void			PutDocid ( SphDocID_t uValue ) { PutDword ( uValue ); }$/;"	f	class:CSphWriter
PutDocid	sphinxint.h	/^	void			PutDocid ( SphDocID_t uValue ) { PutOffset ( uValue ); }$/;"	f	class:CSphWriter
PutDword	sphinxint.h	/^	void			PutDword ( DWORD uValue ) { PutBytes ( &uValue, sizeof(DWORD) ); }$/;"	f	class:CSphWriter
PutNumeric	searchd.cpp	/^	void PutNumeric ( const char * sFormat, T tVal )$/;"	f	class:SqlRowBuffer_c
PutOffset	sphinxint.h	/^	void			PutOffset ( SphOffset_t uValue ) { PutBytes ( &uValue, sizeof(SphOffset_t) ); }$/;"	f	class:CSphWriter
PutString	searchd.cpp	/^	void PutString ( const char * sMsg )$/;"	f	class:SqlRowBuffer_c
PutString	sphinx.cpp	/^void CSphWriter::PutString ( const CSphString & sString )$/;"	f	class:CSphWriter
PutString	sphinx.cpp	/^void CSphWriter::PutString ( const char * szString )$/;"	f	class:CSphWriter
QueryColumn_t	sphinx.h	/^	struct QueryColumn_t$/;"	s	struct:CSphSource_ODBC
QueryCopyState_t	searchd.cpp	/^struct QueryCopyState_t$/;"	s	file:
QueryRemoteAgents	searchd.cpp	/^int QueryRemoteAgents ( CSphVector<AgentConn_t> & dAgents, int iTimeout, const IRequestBuilder_t & tBuilder, int64_t * pWaited )$/;"	f
QueryStatus	searchd.cpp	/^void QueryStatus ( CSphVariant * v )$/;"	f
QwordSetup	sphinx.cpp	/^bool DiskIndexQwordSetup_c::QwordSetup ( ISphQword * pWord ) const$/;"	f	class:DiskIndexQwordSetup_c
QwordSetup	sphinxexcerpt.cpp	/^	virtual bool QwordSetup ( ISphQword * pQword ) const$/;"	f	class:SnippetsFastQwordSetup_c
QwordSetup	sphinxexcerpt.cpp	/^bool SnippetsQwordSetup::QwordSetup ( ISphQword * pQword ) const$/;"	f	class:SnippetsQwordSetup
QwordSpawn	sphinx.cpp	/^ISphQword * DiskIndexQwordSetup_c::QwordSpawn ( const XQKeyword_t & tWord ) const$/;"	f	class:DiskIndexQwordSetup_c
QwordSpawn	sphinxexcerpt.cpp	/^	virtual ISphQword * QwordSpawn ( const XQKeyword_t & tWord ) const$/;"	f	class:SnippetsFastQwordSetup_c
QwordSpawn	sphinxexcerpt.cpp	/^ISphQword * SnippetsQwordSetup::QwordSpawn ( const XQKeyword_t & tWord ) const$/;"	f	class:SnippetsQwordSetup
QwordsHash_fn	sphinxsearch.cpp	/^struct QwordsHash_fn$/;"	s	file:
R	sphinxstemru.cpp	/^		R	= 0x80D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
R	sphinxstemru.cpp	/^		R	= 0xD180U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
R	sphinxstemru.cpp	/^		R	= 0xF0,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
READ_NO_SIZE_HINT	sphinx.cpp	990;"	d	file:
REJECT	llsphinxql.c	747;"	d	file:
RLock	searchd.cpp	/^	inline CSphSchemaMT * RLock()$/;"	f	class:CSphSchemaMT
ROTATE_LEFT	md5.cpp	197;"	d	file:
ROTATE_MIN_INTERVAL	indexer.cpp	58;"	d	file:
ROWITEM_BITS	sphinx.h	/^const int				ROWITEM_BITS	= 8*sizeof(CSphRowitem);$/;"	v
ROWITEM_MAX	sphinx.h	/^const CSphRowitem		ROWITEM_MAX		= UINT_MAX;$/;"	v
ROWITEM_SHIFT	sphinx.h	/^const int				ROWITEM_SHIFT	= 5;$/;"	v
RSort	sphinxstd.h	/^	void RSort ( int iStart=0, int iEnd=-1 )$/;"	f	class:CSphVector
RTLD_LAZY	sphinxexpr.cpp	3059;"	d	file:
RTLD_LOCAL	sphinxexpr.cpp	3060;"	d	file:
RT_INDEX_FILE_NAME	tests.cpp	1731;"	d	file:
RT_PASS_COUNT	tests.cpp	1732;"	d	file:
RULE_NONE	spelldump.cpp	/^	RULE_NONE,$/;"	e	enum:RuleType_e	file:
RULE_PREFIXES	spelldump.cpp	/^	RULE_PREFIXES,$/;"	e	enum:RuleType_e	file:
RULE_SUFFIXES	spelldump.cpp	/^	RULE_SUFFIXES$/;"	e	enum:RuleType_e	file:
RUS	sphinxstemru.cpp	157;"	d	file:
RUS	sphinxstemru.cpp	65;"	d	file:
RandomFill	tests.cpp	/^void RandomFill ( DWORD * pData, int iCount, const TestAccCmp_fn & fn, bool bChainsaw )$/;"	f
RankerState_Expr_fn	sphinxsearch.cpp	/^RankerState_Expr_fn::RankerState_Expr_fn ()$/;"	f	class:RankerState_Expr_fn
RankerState_Expr_fn	sphinxsearch.cpp	/^struct RankerState_Expr_fn$/;"	s	file:
RankerState_Fieldmask_fn	sphinxsearch.cpp	/^struct RankerState_Fieldmask_fn$/;"	s	file:
RankerState_MatchAny_fn	sphinxsearch.cpp	/^struct RankerState_MatchAny_fn : public RankerState_Proximity_fn<false,false>$/;"	s	file:
RankerState_ProximityBM25Exact_fn	sphinxsearch.cpp	/^struct RankerState_ProximityBM25Exact_fn$/;"	s	file:
RankerState_ProximityPayload_fn	sphinxsearch.cpp	/^struct RankerState_ProximityPayload_fn : public RankerState_Proximity_fn<USE_BM25,false>$/;"	s	file:
RankerState_Proximity_fn	sphinxsearch.cpp	/^struct RankerState_Proximity_fn$/;"	s	file:
RankerState_Wordcount_fn	sphinxsearch.cpp	/^struct RankerState_Wordcount_fn$/;"	s	file:
RawAlloc	sphinx.cpp	/^int CSphArena::RawAlloc ( int iBytes )$/;"	f	class:CSphArena
RawFree	sphinx.cpp	/^void CSphArena::RawFree ( int iIndex )$/;"	f	class:CSphArena
ReInit	sphinx.cpp	/^DWORD * CSphArena::ReInit ( int uMaxBytes )$/;"	f	class:CSphArena
ReParse	sphinxutils.cpp	/^bool CSphConfigParser::ReParse ( const char * sFileName, const char * pBuffer )$/;"	f	class:CSphConfigParser
Read	sphinx.cpp	/^	bool Read()$/;"	f	class:CSphDictReader
Read	sphinx.cpp	/^bool CSphAutofile::Read ( void * pBuf, size_t uCount, CSphString & sError )$/;"	f	class:CSphAutofile
Read	sphinx.cpp	/^void CSphDocMVA::Read ( CSphReader & tReader )$/;"	f	class:CSphDocMVA
ReadBuffer	sphinx.cpp	/^int CSphSource_XMLPipe2::ReadBuffer ( BYTE * pBuffer, int iLen )$/;"	f	class:CSphSource_XMLPipe2
ReadByte	sphinx.cpp	/^int CSphBin::ReadByte ()$/;"	f	class:CSphBin
ReadBytes	sphinx.cpp	/^ESphBinRead CSphBin::ReadBytes ( void * pDest, int iBytes )$/;"	f	class:CSphBin
ReadCP	sphinx.cpp	/^bool CWordlist::ReadCP ( CSphAutofile & tFile, DWORD uVer, bool bWordDict, CSphString & sError )$/;"	f	class:CWordlist
ReadFileInfo	sphinx.cpp	/^static void ReadFileInfo ( CSphReader & tReader, const char * szFilename, CSphString & sWarning )$/;"	f	file:
ReadFrom	searchd.cpp	/^	bool			ReadFrom ( int iLen ) { return ReadFrom ( iLen, g_iReadTimeout ); }$/;"	f	class:NetInputBuffer_c
ReadFrom	searchd.cpp	/^bool NetInputBuffer_c::ReadFrom ( int iLen, int iTimeout, bool bIntr, bool bAppend )$/;"	f	class:NetInputBuffer_c
ReadHit	sphinx.cpp	/^int CSphBin::ReadHit ( CSphAggregateHit * pOut, int iRowitems, CSphRowitem * pRowitems )$/;"	f	class:CSphBin
ReadLock	searchd.cpp	/^void ServedIndex_t::ReadLock () const$/;"	f	class:ServedIndex_t
ReadOrdinal	sphinx.cpp	/^ESphBinRead CSphIndex_VLN::ReadOrdinal ( CSphBin & Reader, Ordinal_t & Ordinal )$/;"	f	class:CSphIndex_VLN
ReadSchema	sphinx.cpp	/^void ReadSchema ( CSphReader & rdInfo, CSphSchema & m_tSchema, DWORD uVersion, bool bDynamic )$/;"	f
ReadSchemaColumn	sphinx.cpp	/^static void ReadSchemaColumn ( CSphReader & rdInfo, CSphColumnInfo & tCol, DWORD uVersion )$/;"	f	file:
ReadVLB	sphinx.cpp	/^SphWordID_t CSphBin::ReadVLB ()$/;"	f	class:CSphBin
ReadValue	sphinxstd.h	/^	T ReadValue() const$/;"	f	class:CSphProcessSharedVariable
ReconstructNode	tests.cpp	/^CSphString ReconstructNode ( const XQNode_t * pNode, const CSphSchema & tSchema )$/;"	f
RecoverAggregateFunctions	searchd.cpp	/^static void RecoverAggregateFunctions ( const CSphQuery & tQuery, const AggrResult_t & tRes )$/;"	f	file:
RefcountedVector_c	searchd.cpp	/^class RefcountedVector_c : public CSphVector<T>, public ISphRefcounted$/;"	c	file:
Release	sphinxsearch.cpp	/^	void Release()$/;"	f	class:NodeCacheContainer_t
Release	sphinxstd.h	/^	void			Release () const	{ --m_iRefCount; assert ( m_iRefCount>=0 ); if ( m_iRefCount==0 ) delete this; }$/;"	f	struct:ISphRefcounted
Release	sphinxstd.h	/^	void Release () const$/;"	f	struct:ISphRefcountedMT
ReleaseIndex	searchd.cpp	/^void SearchHandler_c::ReleaseIndex ( int iLocal ) const$/;"	f	class:SearchHandler_c
ReleaseTTYFlag	searchd.cpp	/^void ReleaseTTYFlag()$/;"	f
Relimit	sphinxstd.h	/^	static inline int Relimit ( int iLimit, int iNewLimit )$/;"	f	class:CSphTightVectorPolicy
Relimit	sphinxstd.h	/^	static inline int Relimit ( int iLimit, int iNewLimit )$/;"	f	class:CSphVectorPolicy
ReloadIndexSettings	searchd.cpp	/^void ReloadIndexSettings ( CSphConfigParser & tCP )$/;"	f
RelocateBlock	sphinx.cpp	/^bool CSphIndex_VLN::RelocateBlock ( int iFile, BYTE * pBuffer, int iRelocationSize, SphOffset_t * pFileSize, CSphBin * pMinBin, SphOffset_t * pSharedOffset )$/;"	f	class:CSphIndex_VLN
RemapCharacters	sphinx.cpp	/^bool ISphTokenizer::RemapCharacters ( const char * sConfig, DWORD uFlags, const char * sSource, bool bCanRemap, CSphString & sError )$/;"	f	class:ISphTokenizer
RemapResult	searchd.cpp	/^void RemapResult ( CSphSchema * pTarget, AggrResult_t * pRes, bool bMultiSchema=true )$/;"	f
RemapStrings	searchd.cpp	/^static void RemapStrings ( ISphMatchSorter * pSorter, AggrResult_t & tRes )$/;"	f	file:
Remove	sphinxsort.cpp	/^	void Remove ( const KEY & tKey )$/;"	f	class:CSphFixedHash
Remove	sphinxstd.h	/^	void Remove ( int iIndex )$/;"	f	class:CSphVector
RemoveAttr	sphinx.cpp	/^void CSphSchema::RemoveAttr ( int iIndex )$/;"	f	class:CSphSchema
RemoveChars	sphinxstemcz.cpp	/^static void RemoveChars ( char * szString, char cChar )$/;"	f	file:
RemoveFast	sphinxstd.h	/^	void RemoveFast ( int iIndex )$/;"	f	class:CSphVector
RemoveTag	sphinx.cpp	/^void CSphArena::RemoveTag ( TagDesc_t * pTag )$/;"	f	class:CSphArena
RemoveValue	sphinxstd.h	/^	bool RemoveValue ( T tValue )$/;"	f	class:CSphVector
Rename	sphinx.cpp	/^bool CSphIndex_VLN::Rename ( const char * sNewBase )$/;"	f	class:CSphIndex_VLN
Reorganize	sphinxquery.cpp	/^	void Reorganize ( XQNode_t * pTree )$/;"	f	class:RevealCommon_t	file:
ReplaceRule_t	sphinxstemcz.cpp	/^struct ReplaceRule_t$/;"	s	file:
ReportError	sphinxfilter.cpp	/^static inline ISphFilter * ReportError ( CSphString & sError, const char * sMessage, ESphFilter eFilterType )$/;"	f	file:
ReportIOStats	indexer.cpp	/^void ReportIOStats ( const char * sType, int iReads, int64_t iReadTime, int64_t iReadBytes )$/;"	f
ReportUnpackError	sphinx.cpp	/^void CSphSource_SQL::ReportUnpackError ( int iIndex, int iError )$/;"	f	class:CSphSource_SQL
Reserve	searchd.cpp	/^	char * Reserve ( int iLen )$/;"	f	class:SqlRowBuffer_c
Reserve	sphinxstd.h	/^	void Reserve ( int iLen )$/;"	f	struct:CSphString
Reserve	sphinxstd.h	/^	void Reserve ( int iNewLimit )$/;"	f	class:CSphVector
Reset	searchd.cpp	/^	void					Reset () { BASE::Reset(); }$/;"	f	class:IndexHash_c
Reset	searchd.cpp	/^	void Reset ()$/;"	f	class:SqlRowBuffer_c
Reset	sphinx.cpp	/^	virtual void Reset ()$/;"	f	class:DiskIndexQword_c
Reset	sphinx.cpp	/^	virtual void Reset()$/;"	f	class:tDocCollector
Reset	sphinx.cpp	/^	void		Reset ()						{ SafeDeleteArray ( m_pData ); }$/;"	f	class:CSphAutoArray
Reset	sphinx.cpp	/^void CSphLowercaser::Reset()$/;"	f	class:CSphLowercaser
Reset	sphinx.cpp	/^void CSphReader::Reset ()$/;"	f	class:CSphReader
Reset	sphinx.cpp	/^void CSphSchema::Reset ()$/;"	f	class:CSphSchema
Reset	sphinx.cpp	/^void CWordlist::Reset ()$/;"	f	class:CWordlist
Reset	sphinx.h	/^	void Reset ( int iDynamic )$/;"	f	class:CSphMatch
Reset	sphinx.h	/^	void Reset ()$/;"	f	struct:CSphSourceStats
Reset	sphinxexcerpt.cpp	/^		void Reset ()$/;"	f	struct:ExcerptGen_c::Passage_t
Reset	sphinxexcerpt.cpp	/^		void Reset ()$/;"	f	struct:ExcerptGen_c::TokenSpan_t
Reset	sphinxexcerpt.cpp	/^		void Reset ()$/;"	f	struct:ExcerptGen_c::Token_t
Reset	sphinxint.h	/^	void Reset ()$/;"	f	class:CSphKeywordDeltaWriter
Reset	sphinxquery.h	/^	inline void Reset ()$/;"	f	struct:XQLimitSpec_t
Reset	sphinxsearch.cpp	/^	virtual void				Reset ( const ISphQwordSetup & )$/;"	f	class:ExtTermHitless_c
Reset	sphinxsearch.cpp	/^	virtual void Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtNodeCached_t
Reset	sphinxsearch.cpp	/^void ExtAndNot_c::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtAndNot_c
Reset	sphinxsearch.cpp	/^void ExtNWayT::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtNWayT
Reset	sphinxsearch.cpp	/^void ExtOrder_c::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtOrder_c
Reset	sphinxsearch.cpp	/^void ExtQuorum_c::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtQuorum_c
Reset	sphinxsearch.cpp	/^void ExtRanker_c::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtRanker_c
Reset	sphinxsearch.cpp	/^void ExtTermPos_c<T>::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtTermPos_c
Reset	sphinxsearch.cpp	/^void ExtTerm_c::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtTerm_c
Reset	sphinxsearch.cpp	/^void ExtTwofer_c::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtTwofer_c
Reset	sphinxsearch.cpp	/^void ExtUnit_c::Reset ( const ISphQwordSetup & tSetup )$/;"	f	class:ExtUnit_c
Reset	sphinxsearch.h	/^	virtual void Reset ()$/;"	f	class:ISphQword
Reset	sphinxsort.cpp	/^	void Reset ()$/;"	f	class:CSphFixedHash
Reset	sphinxstd.h	/^	void			Reset ()					{ SafeDelete ( m_pPtr ); }$/;"	f	class:CSphScopedPtr
Reset	sphinxstd.h	/^	void Reset ( int iSize )$/;"	f	class:CSphFixedVector
Reset	sphinxstd.h	/^	void Reset ()$/;"	f	class:CSphOrderedHash
Reset	sphinxstd.h	/^	void Reset ()$/;"	f	class:CSphSharedBuffer
Reset	sphinxstd.h	/^	void Reset ()$/;"	f	class:CSphStringBuilder
Reset	sphinxstd.h	/^	void Reset ()$/;"	f	class:CSphVector
ResetAttrs	sphinx.cpp	/^void CSphSchema::ResetAttrs ()$/;"	f	class:CSphSchema
ResetFSM	sphinxsearch.cpp	/^		inline void ResetFSM()$/;"	f	class:FSMphrase
ResetFSM	sphinxsearch.cpp	/^	inline void ResetFSM()$/;"	f	class:FSMmultinear
ResetFSM	sphinxsearch.cpp	/^	inline void ResetFSM()$/;"	f	class:FSMproximity
ResetKeywords	sphinx.cpp	/^	virtual void ResetKeywords()$/;"	f	class:CRtDictKeywords
ResetLocal	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::ResetLocal()$/;"	f	class:AttrIndexBuilder_t
ResetSeparator	sphinxstd.h	/^	void ResetSeparator ()$/;"	f	class:CSphStringBuilder
Resize	sphinxstd.h	/^	void Resize ( int iNewLength )$/;"	f	class:CSphVector
ResultEmit	sphinxexcerpt.cpp	/^	void ResultEmit ( const char * pSrc, int iLen, bool bHasPassageMacro=false, int iPassageId=0, const char * pPost=NULL, int iPostLen=0 )$/;"	f	class:TokenFunctorTraits_c
ResultEmit	sphinxexcerpt.cpp	/^void ExcerptGen_c::ResultEmit ( const Token_t & sTok )$/;"	f	class:ExcerptGen_c
ResultEmit	sphinxexcerpt.cpp	/^void ExcerptGen_c::ResultEmit ( const char * sLine, bool bHasMacro, int iPassageId, const char * sPostPassage )$/;"	f	class:ExcerptGen_c
ReturnDocsChunk	sphinxsearch.cpp	/^	inline const ExtDoc_t *		ReturnDocsChunk ( int iCount, SphDocID_t * pMaxID )$/;"	f	class:ExtNode_i
ReturnDocsChunk	sphinxsearch.cpp	/^	inline const ExtDoc_t * ReturnDocsChunk ( int iDocs, int iMyHit, SphDocID_t * pMaxID )$/;"	f	class:ExtUnit_c
RevealCommon_t	sphinxquery.cpp	/^	explicit RevealCommon_t ( XQOperator_e eOp )$/;"	f	class:RevealCommon_t
RevealCommon_t	sphinxquery.cpp	/^class RevealCommon_t : ISphNoncopyable$/;"	c	file:
RingTail	sphinxsearch.cpp	/^	inline int RingTail() const$/;"	f	class:FSMmultinear	file:
Rlock	searchd.cpp	/^void IndexHash_c::Rlock () const$/;"	f	class:IndexHash_c
Root	sphinx.cpp	/^	inline const T & Root () const$/;"	f	class:CSphQueue
RotateIndexGreedy	searchd.cpp	/^bool RotateIndexGreedy ( ServedIndex_t & tIndex, const char * sIndex )$/;"	f
RotateIndexMT	searchd.cpp	/^static void RotateIndexMT ( const CSphString & sIndex )$/;"	f	file:
RotationThreadFunc	searchd.cpp	/^void RotationThreadFunc ( void * )$/;"	f
RtFlushThreadFunc	searchd.cpp	/^static void RtFlushThreadFunc ( void * )$/;"	f	file:
RuleType_e	spelldump.cpp	/^enum RuleType_e$/;"	g	file:
RunLocalSearch	searchd.cpp	/^bool SearchHandler_c::RunLocalSearch ( int iLocal, ISphMatchSorter ** ppSorters, CSphQueryResult ** ppResults, bool * pMulti ) const$/;"	f	class:SearchHandler_c
RunLocalSearches	searchd.cpp	/^void SearchHandler_c::RunLocalSearches ( ISphMatchSorter * pLocalSorter, const char * sDistName )$/;"	f	class:SearchHandler_c
RunLocalSearchesMT	searchd.cpp	/^void SearchHandler_c::RunLocalSearchesMT ()$/;"	f	class:SearchHandler_c
RunQueries	searchd.cpp	/^void SearchHandler_c::RunQueries ()$/;"	f	class:SearchHandler_c
RunQueryStep	sphinx.cpp	/^bool CSphSource_SQL::RunQueryStep ( const char * sQuery, CSphString & sError )$/;"	f	class:CSphSource_SQL
RunSubset	searchd.cpp	/^void SearchHandler_c::RunSubset ( int iStart, int iEnd )$/;"	f	class:SearchHandler_c
RunUpdates	searchd.cpp	/^void SearchHandler_c::RunUpdates ( const CSphQuery & tQuery, const CSphString & sIndex, CSphAttrUpdateEx * pUpdates )$/;"	f	class:SearchHandler_c
RussianAlphabetUTF8_t	sphinxstemru.cpp	/^struct RussianAlphabetUTF8_t$/;"	s	file:
RussianAlphabetWin1251_t	sphinxstemru.cpp	/^struct RussianAlphabetWin1251_t$/;"	s	file:
RwlockReader	tests.cpp	/^void RwlockReader ( void * pArg )$/;"	f
RwlockWriter	tests.cpp	/^void RwlockWriter ( void * pArg )$/;"	f
S	sphinxstemru.cpp	/^		S	= 0x81D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
S	sphinxstemru.cpp	/^		S	= 0xD181U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
S	sphinxstemru.cpp	/^		S	= 0xF1,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
SAFETY_GAP	sphinxstd.h	/^	static const int	SAFETY_GAP	= 4;$/;"	m	struct:CSphString
SCH	sphinxstemru.cpp	/^		SCH	= 0x89D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
SCH	sphinxstemru.cpp	/^		SCH	= 0xD189U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
SCH	sphinxstemru.cpp	/^		SCH	= 0xF9,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
SEARCHD_BACKLOG	searchd.cpp	35;"	d	file:
SEARCHD_COMMAND_EXCERPT	searchd.cpp	/^	SEARCHD_COMMAND_EXCERPT		= 1,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_FLUSHATTRS	searchd.cpp	/^	SEARCHD_COMMAND_FLUSHATTRS	= 7,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_KEYWORDS	searchd.cpp	/^	SEARCHD_COMMAND_KEYWORDS	= 3,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_PERSIST	searchd.cpp	/^	SEARCHD_COMMAND_PERSIST		= 4,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_SEARCH	searchd.cpp	/^	SEARCHD_COMMAND_SEARCH		= 0,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_SPHINXQL	searchd.cpp	/^	SEARCHD_COMMAND_SPHINXQL	= 8,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_STATUS	searchd.cpp	/^	SEARCHD_COMMAND_STATUS		= 5,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_TOTAL	searchd.cpp	/^	SEARCHD_COMMAND_TOTAL$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_COMMAND_UPDATE	searchd.cpp	/^	SEARCHD_COMMAND_UPDATE		= 2,$/;"	e	enum:SearchdCommand_e	file:
SEARCHD_ERROR	searchd.cpp	/^	SEARCHD_ERROR	= 1,	\/\/\/< general failure, error message follows$/;"	e	enum:SearchdStatus_e	file:
SEARCHD_OK	searchd.cpp	/^	SEARCHD_OK		= 0,	\/\/\/< general success, command-specific reply follows$/;"	e	enum:SearchdStatus_e	file:
SEARCHD_RETRY	searchd.cpp	/^	SEARCHD_RETRY	= 2,	\/\/\/< temporary failure, error message follows, client should retry later$/;"	e	enum:SearchdStatus_e	file:
SEARCHD_WARNING	searchd.cpp	/^	SEARCHD_WARNING	= 3		\/\/\/< general success, warning message and command-specific reply follow$/;"	e	enum:SearchdStatus_e	file:
SECOND	sphinxexpr.cpp	383;"	d	file:
SEL_AS	yysphinxselect.c	/^     SEL_AS = 260,$/;"	e	enum:yytokentype	file:
SEL_AS	yysphinxselect.c	81;"	d	file:
SEL_AS	yysphinxselect.h	/^     SEL_AS = 260,$/;"	e	enum:yytokentype
SEL_AS	yysphinxselect.h	57;"	d
SEL_AVG	yysphinxselect.c	/^     SEL_AVG = 261,$/;"	e	enum:yytokentype	file:
SEL_AVG	yysphinxselect.c	82;"	d	file:
SEL_AVG	yysphinxselect.h	/^     SEL_AVG = 261,$/;"	e	enum:yytokentype
SEL_AVG	yysphinxselect.h	58;"	d
SEL_COUNT	yysphinxselect.c	/^     SEL_COUNT = 265,$/;"	e	enum:yytokentype	file:
SEL_COUNT	yysphinxselect.c	86;"	d	file:
SEL_COUNT	yysphinxselect.h	/^     SEL_COUNT = 265,$/;"	e	enum:yytokentype
SEL_COUNT	yysphinxselect.h	62;"	d
SEL_DISTINCT	yysphinxselect.c	/^     SEL_DISTINCT = 267,$/;"	e	enum:yytokentype	file:
SEL_DISTINCT	yysphinxselect.c	88;"	d	file:
SEL_DISTINCT	yysphinxselect.h	/^     SEL_DISTINCT = 267,$/;"	e	enum:yytokentype
SEL_DISTINCT	yysphinxselect.h	64;"	d
SEL_ID	yysphinxselect.c	/^     SEL_ID = 259,$/;"	e	enum:yytokentype	file:
SEL_ID	yysphinxselect.c	80;"	d	file:
SEL_ID	yysphinxselect.h	/^     SEL_ID = 259,$/;"	e	enum:yytokentype
SEL_ID	yysphinxselect.h	56;"	d
SEL_MAX	yysphinxselect.c	/^     SEL_MAX = 262,$/;"	e	enum:yytokentype	file:
SEL_MAX	yysphinxselect.c	83;"	d	file:
SEL_MAX	yysphinxselect.h	/^     SEL_MAX = 262,$/;"	e	enum:yytokentype
SEL_MAX	yysphinxselect.h	59;"	d
SEL_MIN	yysphinxselect.c	/^     SEL_MIN = 263,$/;"	e	enum:yytokentype	file:
SEL_MIN	yysphinxselect.c	84;"	d	file:
SEL_MIN	yysphinxselect.h	/^     SEL_MIN = 263,$/;"	e	enum:yytokentype
SEL_MIN	yysphinxselect.h	60;"	d
SEL_SUM	yysphinxselect.c	/^     SEL_SUM = 264,$/;"	e	enum:yytokentype	file:
SEL_SUM	yysphinxselect.c	85;"	d	file:
SEL_SUM	yysphinxselect.h	/^     SEL_SUM = 264,$/;"	e	enum:yytokentype
SEL_SUM	yysphinxselect.h	61;"	d
SEL_TOKEN	yysphinxselect.c	/^     SEL_TOKEN = 258,$/;"	e	enum:yytokentype	file:
SEL_TOKEN	yysphinxselect.c	79;"	d	file:
SEL_TOKEN	yysphinxselect.h	/^     SEL_TOKEN = 258,$/;"	e	enum:yytokentype
SEL_TOKEN	yysphinxselect.h	55;"	d
SEL_WEIGHT	yysphinxselect.c	/^     SEL_WEIGHT = 266,$/;"	e	enum:yytokentype	file:
SEL_WEIGHT	yysphinxselect.c	87;"	d	file:
SEL_WEIGHT	yysphinxselect.h	/^     SEL_WEIGHT = 266,$/;"	e	enum:yytokentype
SEL_WEIGHT	yysphinxselect.h	63;"	d
SET	md5.cpp	203;"	d	file:
SET	md5.cpp	223;"	d	file:
SET	md5.cpp	229;"	d	file:
SET	md5.cpp	249;"	d	file:
SET	md5.cpp	255;"	d	file:
SET	md5.cpp	275;"	d	file:
SET	md5.cpp	281;"	d	file:
SET	md5.cpp	301;"	d	file:
SET_GLOBAL_SVAR	searchd.cpp	/^	SET_GLOBAL_SVAR$/;"	e	enum:SqlSet_e	file:
SET_GLOBAL_UVAR	searchd.cpp	/^	SET_GLOBAL_UVAR,$/;"	e	enum:SqlSet_e	file:
SET_LOCAL	searchd.cpp	/^	SET_LOCAL,$/;"	e	enum:SqlSet_e	file:
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SH	sphinxstemru.cpp	/^		SH	= 0x88D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
SH	sphinxstemru.cpp	/^		SH	= 0xD188U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
SH	sphinxstemru.cpp	/^		SH	= 0xF8,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SIGRETURN_FRAME_OFFSET	sphinxutils.cpp	1448;"	d	file:
SIGRETURN_FRAME_OFFSET	sphinxutils.cpp	1453;"	d	file:
SIGRETURN_FRAME_OFFSET	sphinxutils.cpp	1458;"	d	file:
SLOTS	sphinx.cpp	/^	static const int				SLOTS			= 65536;$/;"	m	class:CSphDictKeywords	file:
SLOW_GROW_TRESHOLD	sphinxstd.h	/^	static const int SLOW_GROW_TRESHOLD = 1024;$/;"	m	class:CSphTightVectorPolicy
SNOWBALL	tests.cpp	25;"	d	file:
SORT_CLAUSE_ERROR	sphinxsort.cpp	/^	SORT_CLAUSE_ERROR,$/;"	e	enum:ESortClauseParseResult	file:
SORT_CLAUSE_OK	sphinxsort.cpp	/^	SORT_CLAUSE_OK,$/;"	e	enum:ESortClauseParseResult	file:
SORT_CLAUSE_RANDOM	sphinxsort.cpp	/^	SORT_CLAUSE_RANDOM$/;"	e	enum:ESortClauseParseResult	file:
SOURCES	Makefile	/^SOURCES = $(libsphinx_a_SOURCES) $(indexer_SOURCES) \\$/;"	m
SPHINXAPI_PORT	searchd.cpp	36;"	d	file:
SPHINXQL_PORT	searchd.cpp	37;"	d	file:
SPHINX_BANNER	sphinx.h	200;"	d
SPHINX_BITS_TAG	sphinx.h	102;"	d
SPHINX_BITS_TAG	sphinx.h	88;"	d
SPHINX_DEFAULT_SBCS_TABLE	sphinx.cpp	/^const char *	SPHINX_DEFAULT_SBCS_TABLE	= "0..9, A..Z->a..z, _, a..z, U+A8->U+B8, U+B8, U+C0..U+DF->U+E0..U+FF, U+E0..U+FF";$/;"	v
SPHINX_DEFAULT_UTF8_TABLE	sphinx.cpp	/^const char *	SPHINX_DEFAULT_UTF8_TABLE	= "0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F";$/;"	v
SPHINX_SEARCHD_PROTO	sphinx.h	201;"	d
SPHINX_TAG	sphinx.h	196;"	d
SPHINX_TAG	sphinxversion.h	5;"	d
SPHINX_VERSION	sphinx.h	199;"	d
SPH_ADDRESS_SIZE	searchd.cpp	38;"	d	file:
SPH_ADDRPORT_SIZE	searchd.cpp	39;"	d	file:
SPH_AGGR_AVG	sphinx.h	/^	SPH_AGGR_AVG,$/;"	e	enum:ESphAggrFunc
SPH_AGGR_MAX	sphinx.h	/^	SPH_AGGR_MAX,$/;"	e	enum:ESphAggrFunc
SPH_AGGR_MIN	sphinx.h	/^	SPH_AGGR_MIN,$/;"	e	enum:ESphAggrFunc
SPH_AGGR_NONE	sphinx.h	/^	SPH_AGGR_NONE,$/;"	e	enum:ESphAggrFunc
SPH_AGGR_SUM	sphinx.h	/^	SPH_AGGR_SUM$/;"	e	enum:ESphAggrFunc
SPH_ALLOCS_PROFILER	sphinxstd.h	176;"	d
SPH_ATTRSRC_FIELD	sphinx.h	/^	SPH_ATTRSRC_FIELD		= 1,	\/\/\/< get attr values from text field$/;"	e	enum:ESphAttrSrc
SPH_ATTRSRC_NONE	sphinx.h	/^	SPH_ATTRSRC_NONE		= 0,	\/\/\/< not multi-valued$/;"	e	enum:ESphAttrSrc
SPH_ATTRSRC_QUERY	sphinx.h	/^	SPH_ATTRSRC_QUERY		= 2,	\/\/\/< get attr values from SQL query$/;"	e	enum:ESphAttrSrc
SPH_ATTRSRC_RANGEDQUERY	sphinx.h	/^	SPH_ATTRSRC_RANGEDQUERY	= 3		\/\/\/< get attr values from ranged SQL query$/;"	e	enum:ESphAttrSrc
SPH_ATTR_BIGINT	sphinxexpr.h	/^	SPH_ATTR_BIGINT		= 6,			\/\/\/< signed 64-bit integer$/;"	e	enum:ESphAttr
SPH_ATTR_BOOL	sphinxexpr.h	/^	SPH_ATTR_BOOL		= 4,			\/\/\/< this attr is a boolean bit field$/;"	e	enum:ESphAttr
SPH_ATTR_FLOAT	sphinxexpr.h	/^	SPH_ATTR_FLOAT		= 5,			\/\/\/< floating point number (IEEE 32-bit)$/;"	e	enum:ESphAttr
SPH_ATTR_INT64SET	sphinxexpr.h	/^	SPH_ATTR_INT64SET	= 0x40000002UL	\/\/\/< MVA, set of signed 64-bit integers$/;"	e	enum:ESphAttr
SPH_ATTR_INTEGER	sphinxexpr.h	/^	SPH_ATTR_INTEGER	= 1,			\/\/\/< unsigned 32-bit integer$/;"	e	enum:ESphAttr
SPH_ATTR_NONE	sphinxexpr.h	/^	SPH_ATTR_NONE		= 0,			\/\/\/< not an attribute at all$/;"	e	enum:ESphAttr
SPH_ATTR_ORDINAL	sphinxexpr.h	/^	SPH_ATTR_ORDINAL	= 3,			\/\/\/< this attr is an ordinal string number (integer at search time, specially handled at indexing time)$/;"	e	enum:ESphAttr
SPH_ATTR_STRING	sphinxexpr.h	/^	SPH_ATTR_STRING		= 7,			\/\/\/< string (binary; in-memory)$/;"	e	enum:ESphAttr
SPH_ATTR_TIMESTAMP	sphinxexpr.h	/^	SPH_ATTR_TIMESTAMP	= 2,			\/\/\/< this attr is a timestamp$/;"	e	enum:ESphAttr
SPH_ATTR_UINT32SET	sphinxexpr.h	/^	SPH_ATTR_UINT32SET	= 0x40000001UL,	\/\/\/< MVA, set of unsigned 32-bit integers$/;"	e	enum:ESphAttr
SPH_ATTR_WORDCOUNT	sphinxexpr.h	/^	SPH_ATTR_WORDCOUNT	= 8,			\/\/\/< string word count (integer at search time,tokenized and counted at indexing time)$/;"	e	enum:ESphAttr
SPH_BACKTRACE_ADDR_COUNT	sphinxutils.cpp	1411;"	d	file:
SPH_BM25_K1	sphinxsearch.cpp	31;"	d	file:
SPH_BM25_SCALE	sphinxsearch.cpp	32;"	d	file:
SPH_CMPAGGRHIT_LESS	sphinx.cpp	/^inline bool SPH_CMPAGGRHIT_LESS ( const CSphAggregateHit & a, const CSphAggregateHit & b )$/;"	f
SPH_CMPHIT_LESS	sphinx.cpp	8171;"	d	file:
SPH_COLLATION_BINARY	sphinx.h	/^	SPH_COLLATION_BINARY,$/;"	e	enum:ESphCollation
SPH_COLLATION_DEFAULT	sphinx.h	/^	SPH_COLLATION_DEFAULT = SPH_COLLATION_LIBC_CI$/;"	e	enum:ESphCollation
SPH_COLLATION_LIBC_CI	sphinx.h	/^	SPH_COLLATION_LIBC_CI,$/;"	e	enum:ESphCollation
SPH_COLLATION_LIBC_CS	sphinx.h	/^	SPH_COLLATION_LIBC_CS,$/;"	e	enum:ESphCollation
SPH_COLLATION_UTF8_GENERAL_CI	sphinx.h	/^	SPH_COLLATION_UTF8_GENERAL_CI,$/;"	e	enum:ESphCollation
SPH_DEBUG_DOFREE	sphinxstd.cpp	58;"	d	file:
SPH_DEBUG_LEAKS	sphinxstd.h	175;"	d
SPH_DOCINFO_EXTERN	sphinx.h	/^	SPH_DOCINFO_EXTERN		= 2		\/\/\/< store docinfo separately$/;"	e	enum:ESphDocinfo
SPH_DOCINFO_INLINE	sphinx.h	/^	SPH_DOCINFO_INLINE		= 1,	\/\/\/< inline docinfo into index (specifically, into doclists)$/;"	e	enum:ESphDocinfo
SPH_DOCINFO_NONE	sphinx.h	/^	SPH_DOCINFO_NONE		= 0,	\/\/\/< no docinfo available$/;"	e	enum:ESphDocinfo
SPH_EVAL_FINAL	sphinx.h	/^	SPH_EVAL_FINAL				\/\/\/< expression not (!) used in filters\/sorting; can be postponed until final result set cooking$/;"	e	enum:ESphEvalStage
SPH_EVAL_OVERRIDE	sphinx.h	/^	SPH_EVAL_OVERRIDE,			\/\/\/< static but possibly overridden$/;"	e	enum:ESphEvalStage
SPH_EVAL_PREFILTER	sphinx.h	/^	SPH_EVAL_PREFILTER,			\/\/\/< expression needed for full-text candidate matches filtering$/;"	e	enum:ESphEvalStage
SPH_EVAL_PRESORT	sphinx.h	/^	SPH_EVAL_PRESORT,			\/\/\/< expression needed for final matches sorting$/;"	e	enum:ESphEvalStage
SPH_EVAL_SORTER	sphinx.h	/^	SPH_EVAL_SORTER,			\/\/\/< expression evaluated by sorter object$/;"	e	enum:ESphEvalStage
SPH_EVAL_STATIC	sphinx.h	/^	SPH_EVAL_STATIC = 0,		\/\/\/< static data, no real evaluation needed$/;"	e	enum:ESphEvalStage
SPH_EXPRNODE_STACK_SIZE	sphinxexpr.cpp	3008;"	d	file:
SPH_EXTNODE_STACK_SIZE	sphinx.cpp	14491;"	d	file:
SPH_FDSET_OVERFLOW	searchd.cpp	1793;"	d	file:
SPH_FILTERATTR_ATTR	sphinx.cpp	/^	SPH_FILTERATTR_ATTR		= 0,$/;"	e	enum:ESphFilterAttr	file:
SPH_FILTERATTR_ID	sphinx.cpp	/^	SPH_FILTERATTR_ID		= 1,$/;"	e	enum:ESphFilterAttr	file:
SPH_FILTERATTR_WEIGHT	sphinx.cpp	/^	SPH_FILTERATTR_WEIGHT	= 2$/;"	e	enum:ESphFilterAttr	file:
SPH_FILTER_FLOATRANGE	sphinx.h	/^	SPH_FILTER_FLOATRANGE	= 2		\/\/\/< filter by float range$/;"	e	enum:ESphFilter
SPH_FILTER_RANGE	sphinx.h	/^	SPH_FILTER_RANGE		= 1,	\/\/\/< filter by integer range$/;"	e	enum:ESphFilter
SPH_FILTER_VALUES	sphinx.h	/^	SPH_FILTER_VALUES		= 0,	\/\/\/< filter by integer values set$/;"	e	enum:ESphFilter
SPH_FNV64_SEED	sphinx.h	/^const uint64_t	SPH_FNV64_SEED = 0xcbf29ce484222325ULL;$/;"	v
SPH_GROUPBY_ATTR	sphinx.h	/^	SPH_GROUPBY_ATTR	= 4,	\/\/\/< group by attribute value$/;"	e	enum:ESphGroupBy
SPH_GROUPBY_ATTRPAIR	sphinx.h	/^	SPH_GROUPBY_ATTRPAIR= 5		\/\/\/< group by sequential attrs pair (rendered redundant by 64bit attrs support; removed)$/;"	e	enum:ESphGroupBy
SPH_GROUPBY_DAY	sphinx.h	/^	SPH_GROUPBY_DAY		= 0,	\/\/\/< group by day$/;"	e	enum:ESphGroupBy
SPH_GROUPBY_MONTH	sphinx.h	/^	SPH_GROUPBY_MONTH	= 2,	\/\/\/< group by month$/;"	e	enum:ESphGroupBy
SPH_GROUPBY_WEEK	sphinx.h	/^	SPH_GROUPBY_WEEK	= 1,	\/\/\/< group by week$/;"	e	enum:ESphGroupBy
SPH_GROUPBY_YEAR	sphinx.h	/^	SPH_GROUPBY_YEAR	= 3,	\/\/\/< group by year$/;"	e	enum:ESphGroupBy
SPH_HITLESS_ALL	sphinx.h	/^	SPH_HITLESS_ALL			= 2,	\/\/\/< no hits in this index$/;"	e	enum:ESphHitless
SPH_HITLESS_NONE	sphinx.h	/^	SPH_HITLESS_NONE		= 0,	\/\/\/< all hits are present$/;"	e	enum:ESphHitless
SPH_HITLESS_SOME	sphinx.h	/^	SPH_HITLESS_SOME		= 1,	\/\/\/< some of the hits might be omitted (check the flag bit)$/;"	e	enum:ESphHitless
SPH_HIT_FORMAT_INLINE	sphinx.h	/^	SPH_HIT_FORMAT_INLINE	= 1,	\/\/\/< hits can be split and inlined into doclist (aka 9-23)$/;"	e	enum:ESphHitFormat
SPH_HIT_FORMAT_PLAIN	sphinx.h	/^	SPH_HIT_FORMAT_PLAIN	= 0,	\/\/\/< all hits are stored in hitlist$/;"	e	enum:ESphHitFormat
SPH_INTERNAL_PROFILER	sphinx.cpp	191;"	d	file:
SPH_KEYPART_FLOAT	sphinx.h	/^	SPH_KEYPART_FLOAT,$/;"	e	enum:ESphSortKeyPart
SPH_KEYPART_ID	sphinx.h	/^	SPH_KEYPART_ID,$/;"	e	enum:ESphSortKeyPart
SPH_KEYPART_INT	sphinx.h	/^	SPH_KEYPART_INT,$/;"	e	enum:ESphSortKeyPart
SPH_KEYPART_STRING	sphinx.h	/^	SPH_KEYPART_STRING$/;"	e	enum:ESphSortKeyPart
SPH_KEYPART_WEIGHT	sphinx.h	/^	SPH_KEYPART_WEIGHT,$/;"	e	enum:ESphSortKeyPart
SPH_LOG_DEBUG	sphinxutils.h	/^	SPH_LOG_DEBUG	= 3,$/;"	e	enum:ESphLogLevel
SPH_LOG_FATAL	sphinxutils.h	/^	SPH_LOG_FATAL	= 0,$/;"	e	enum:ESphLogLevel
SPH_LOG_INFO	sphinxutils.h	/^	SPH_LOG_INFO	= 2,$/;"	e	enum:ESphLogLevel
SPH_LOG_VERBOSE_DEBUG	sphinxutils.h	/^	SPH_LOG_VERBOSE_DEBUG = 4,$/;"	e	enum:ESphLogLevel
SPH_LOG_VERY_VERBOSE_DEBUG	sphinxutils.h	/^	SPH_LOG_VERY_VERBOSE_DEBUG = 5$/;"	e	enum:ESphLogLevel
SPH_LOG_WARNING	sphinxutils.h	/^	SPH_LOG_WARNING	= 1,$/;"	e	enum:ESphLogLevel
SPH_MATCH_ALL	sphinx.h	/^	SPH_MATCH_ALL = 0,			\/\/\/< match all query words$/;"	e	enum:ESphMatchMode
SPH_MATCH_ANY	sphinx.h	/^	SPH_MATCH_ANY,				\/\/\/< match any query word$/;"	e	enum:ESphMatchMode
SPH_MATCH_BOOLEAN	sphinx.h	/^	SPH_MATCH_BOOLEAN,			\/\/\/< match this boolean query$/;"	e	enum:ESphMatchMode
SPH_MATCH_EXTENDED	sphinx.h	/^	SPH_MATCH_EXTENDED,			\/\/\/< match this extended query$/;"	e	enum:ESphMatchMode
SPH_MATCH_EXTENDED2	sphinx.h	/^	SPH_MATCH_EXTENDED2,		\/\/\/< extended engine V2 (TEMPORARY, WILL BE REMOVED IN 0.9.8-RELEASE)$/;"	e	enum:ESphMatchMode
SPH_MATCH_FULLSCAN	sphinx.h	/^	SPH_MATCH_FULLSCAN,			\/\/\/< match all document IDs w\/o fulltext query, apply filters$/;"	e	enum:ESphMatchMode
SPH_MATCH_PHRASE	sphinx.h	/^	SPH_MATCH_PHRASE,			\/\/\/< match this exact phrase$/;"	e	enum:ESphMatchMode
SPH_MATCH_TOTAL	sphinx.h	/^	SPH_MATCH_TOTAL$/;"	e	enum:ESphMatchMode
SPH_MAX_FIELDS	sphinx.h	205;"	d
SPH_MAX_FILENAME_LEN	sphinx.h	204;"	d
SPH_MAX_KEYWORD_LEN	sphinxrt.cpp	95;"	d	file:
SPH_MAX_NUMERIC_STR	searchd.cpp	11046;"	d	file:
SPH_MAX_TIMERS	sphinx.cpp	/^static const int	SPH_MAX_TIMERS					= 128;$/;"	v	file:
SPH_MAX_UTF8_BYTES	sphinxint.h	892;"	d
SPH_MAX_WORD_LEN	sphinx.h	203;"	d
SPH_MEM_BINLOG	sphinxint.h	/^		SPH_MEM_BINLOG,$/;"	e	enum:Memory::Category_e
SPH_MEM_COMMIT_BEGIN_SQL	sphinxint.h	/^		SPH_MEM_COMMIT_BEGIN_SQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_COMMIT_SET_SQL	sphinxint.h	/^		SPH_MEM_COMMIT_SET_SQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_COMMIT_SQL	sphinxint.h	/^		SPH_MEM_COMMIT_SQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_CORE	sphinxint.h	/^		SPH_MEM_CORE,$/;"	e	enum:Memory::Category_e
SPH_MEM_DELETE_SQL	sphinxint.h	/^		SPH_MEM_DELETE_SQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_HANDLE_NONSQL	sphinxint.h	/^		SPH_MEM_HANDLE_NONSQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_HANDLE_SQL	sphinxint.h	/^		SPH_MEM_HANDLE_SQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_DISK	sphinxint.h	/^		SPH_MEM_IDX_DISK,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_DISK_MULTY_QUERY	sphinxint.h	/^		SPH_MEM_IDX_DISK_MULTY_QUERY,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_DISK_MULTY_QUERY_EX	sphinxint.h	/^		SPH_MEM_IDX_DISK_MULTY_QUERY_EX,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_RT	sphinxint.h	/^		SPH_MEM_IDX_RT,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_RT_ACCUM	sphinxint.h	/^		SPH_MEM_IDX_RT_ACCUM,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_RT_MULTY_QUERY	sphinxint.h	/^		SPH_MEM_IDX_RT_MULTY_QUERY,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_RT_RES_MATCHES	sphinxint.h	/^		SPH_MEM_IDX_RT_RES_MATCHES,$/;"	e	enum:Memory::Category_e
SPH_MEM_IDX_RT_RES_STRINGS	sphinxint.h	/^		SPH_MEM_IDX_RT_RES_STRINGS,$/;"	e	enum:Memory::Category_e
SPH_MEM_INSERT_SQL	sphinxint.h	/^		SPH_MEM_INSERT_SQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_MMAPED	sphinxint.h	/^		SPH_MEM_MMAPED,$/;"	e	enum:Memory::Category_e
SPH_MEM_QUERY_NONSQL	sphinxint.h	/^		SPH_MEM_QUERY_NONSQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_SEARCH_NONSQL	sphinxint.h	/^		SPH_MEM_SEARCH_NONSQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_SELECT_SQL	sphinxint.h	/^		SPH_MEM_SELECT_SQL,$/;"	e	enum:Memory::Category_e
SPH_MEM_TOTAL	sphinxint.h	/^		SPH_MEM_TOTAL$/;"	e	enum:Memory::Category_e
SPH_MORPH_LIBSTEMMER_FIRST	sphinx.cpp	/^	SPH_MORPH_LIBSTEMMER_FIRST,$/;"	e	enum:__anon19	file:
SPH_MORPH_LIBSTEMMER_LAST	sphinx.cpp	/^	SPH_MORPH_LIBSTEMMER_LAST = SPH_MORPH_LIBSTEMMER_FIRST + 64$/;"	e	enum:__anon19	file:
SPH_MORPH_METAPHONE_SBCS	sphinx.cpp	/^	SPH_MORPH_METAPHONE_SBCS,$/;"	e	enum:__anon19	file:
SPH_MORPH_METAPHONE_UTF8	sphinx.cpp	/^	SPH_MORPH_METAPHONE_UTF8,$/;"	e	enum:__anon19	file:
SPH_MORPH_SOUNDEX	sphinx.cpp	/^	SPH_MORPH_SOUNDEX,$/;"	e	enum:__anon19	file:
SPH_MORPH_STEM_CZ	sphinx.cpp	/^	SPH_MORPH_STEM_CZ,$/;"	e	enum:__anon19	file:
SPH_MORPH_STEM_EN	sphinx.cpp	/^	SPH_MORPH_STEM_EN,$/;"	e	enum:__anon19	file:
SPH_MORPH_STEM_RU_CP1251	sphinx.cpp	/^	SPH_MORPH_STEM_RU_CP1251,$/;"	e	enum:__anon19	file:
SPH_MORPH_STEM_RU_UTF8	sphinx.cpp	/^	SPH_MORPH_STEM_RU_UTF8,$/;"	e	enum:__anon19	file:
SPH_O_BINARY	sphinxint.h	32;"	d
SPH_O_BINARY	sphinxint.h	34;"	d
SPH_O_NEW	sphinxint.h	38;"	d
SPH_O_READ	sphinxint.h	37;"	d
SPH_PIPE_PREREAD	searchd.cpp	/^	SPH_PIPE_PREREAD$/;"	e	enum:__anon21	file:
SPH_QUERY_AND	sphinxquery.h	/^	SPH_QUERY_AND,$/;"	e	enum:XQOperator_e
SPH_QUERY_ANDNOT	sphinxquery.h	/^	SPH_QUERY_ANDNOT,$/;"	e	enum:XQOperator_e
SPH_QUERY_BEFORE	sphinxquery.h	/^	SPH_QUERY_BEFORE,$/;"	e	enum:XQOperator_e
SPH_QUERY_NEAR	sphinxquery.h	/^	SPH_QUERY_NEAR,$/;"	e	enum:XQOperator_e
SPH_QUERY_NOT	sphinxquery.h	/^	SPH_QUERY_NOT,$/;"	e	enum:XQOperator_e
SPH_QUERY_OR	sphinxquery.h	/^	SPH_QUERY_OR,$/;"	e	enum:XQOperator_e
SPH_QUERY_PARAGRAPH	sphinxquery.h	/^	SPH_QUERY_PARAGRAPH$/;"	e	enum:XQOperator_e
SPH_QUERY_PHRASE	sphinxquery.h	/^	SPH_QUERY_PHRASE,$/;"	e	enum:XQOperator_e
SPH_QUERY_PROXIMITY	sphinxquery.h	/^	SPH_QUERY_PROXIMITY,$/;"	e	enum:XQOperator_e
SPH_QUERY_QUORUM	sphinxquery.h	/^	SPH_QUERY_QUORUM,$/;"	e	enum:XQOperator_e
SPH_QUERY_SENTENCE	sphinxquery.h	/^	SPH_QUERY_SENTENCE,$/;"	e	enum:XQOperator_e
SPH_RANK_BM25	sphinx.h	/^	SPH_RANK_BM25				= 1,	\/\/\/< statistical mode, BM25 ranking only (faster but worse quality)$/;"	e	enum:ESphRankMode
SPH_RANK_DEFAULT	sphinx.h	/^	SPH_RANK_DEFAULT			= SPH_RANK_PROXIMITY_BM25$/;"	e	enum:ESphRankMode
SPH_RANK_EXPR	sphinx.h	/^	SPH_RANK_EXPR				= 8,	\/\/\/< rank by user expression (eg. "sum(lcs*user_weight)*1000+bm25")$/;"	e	enum:ESphRankMode
SPH_RANK_FIELDMASK	sphinx.h	/^	SPH_RANK_FIELDMASK			= 6,	\/\/\/< sets bits where there were matches$/;"	e	enum:ESphRankMode
SPH_RANK_MATCHANY	sphinx.h	/^	SPH_RANK_MATCHANY			= 5,	\/\/\/< emulate old match-any weighting (aka SPH02)$/;"	e	enum:ESphRankMode
SPH_RANK_NONE	sphinx.h	/^	SPH_RANK_NONE				= 2,	\/\/\/< no ranking, all matches get a weight of 1$/;"	e	enum:ESphRankMode
SPH_RANK_PROXIMITY	sphinx.h	/^	SPH_RANK_PROXIMITY			= 4,	\/\/\/< phrase proximity (aka SPH01)$/;"	e	enum:ESphRankMode
SPH_RANK_PROXIMITY_BM25	sphinx.h	/^	SPH_RANK_PROXIMITY_BM25		= 0,	\/\/\/< default mode, phrase proximity major factor and BM25 minor one (aka SPH03)$/;"	e	enum:ESphRankMode
SPH_RANK_SPH04	sphinx.h	/^	SPH_RANK_SPH04				= 7,	\/\/\/< codename SPH04, phrase proximity + bm25 + head\/exact boost$/;"	e	enum:ESphRankMode
SPH_RANK_TOTAL	sphinx.h	/^	SPH_RANK_TOTAL,$/;"	e	enum:ESphRankMode
SPH_RANK_WORDCOUNT	sphinx.h	/^	SPH_RANK_WORDCOUNT			= 3,	\/\/\/< simple word-count weighting, rank is a weighted sum of per-field keyword occurence counts$/;"	e	enum:ESphRankMode
SPH_READ_NOPROGRESS_CHUNK	sphinx.cpp	39;"	d	file:
SPH_READ_PROGRESS_CHUNK	sphinx.cpp	38;"	d	file:
SPH_REPLAY_ACCEPT_DESC_TIMESTAMP	sphinxrt.h	/^	SPH_REPLAY_ACCEPT_DESC_TIMESTAMP = 1$/;"	e	enum:ESphBinlogReplayFlags
SPH_RT_AUTO_FLUSH_CHECK_PERIOD	searchd.cpp	12664;"	d	file:
SPH_SHARED_VARS_COUNT	sphinx.cpp	1519;"	d	file:
SPH_SORT_ATTR_ASC	sphinx.h	/^	SPH_SORT_ATTR_ASC		= 2,	\/\/\/< sort by document date asc, then by relevance desc$/;"	e	enum:ESphSortOrder
SPH_SORT_ATTR_DESC	sphinx.h	/^	SPH_SORT_ATTR_DESC		= 1,	\/\/\/< sort by document date desc, then by relevance desc$/;"	e	enum:ESphSortOrder
SPH_SORT_EXPR	sphinx.h	/^	SPH_SORT_EXPR			= 5,	\/\/\/< sort by arithmetic expression in descending order (eg. "@id + max(@weight,1000)*boost + log(price)")$/;"	e	enum:ESphSortOrder
SPH_SORT_EXTENDED	sphinx.h	/^	SPH_SORT_EXTENDED		= 4,	\/\/\/< sort by SQL-like expression (eg. "@relevance DESC, price ASC, @id DESC")$/;"	e	enum:ESphSortOrder
SPH_SORT_RELEVANCE	sphinx.h	/^	SPH_SORT_RELEVANCE		= 0,	\/\/\/< sort by document relevance desc, then by date$/;"	e	enum:ESphSortOrder
SPH_SORT_TIME_SEGMENTS	sphinx.h	/^	SPH_SORT_TIME_SEGMENTS	= 3,	\/\/\/< sort by time segments (hour\/day\/week\/etc) desc, then by relevance desc$/;"	e	enum:ESphSortOrder
SPH_SORT_TOTAL	sphinx.h	/^	SPH_SORT_TOTAL$/;"	e	enum:ESphSortOrder
SPH_SPZ_NONE	sphinxexcerpt.h	/^	SPH_SPZ_NONE		= 0,$/;"	e	enum:ESphSpz
SPH_SPZ_PARAGRAPH	sphinxexcerpt.h	/^	SPH_SPZ_PARAGRAPH	= 1UL<<1,$/;"	e	enum:ESphSpz
SPH_SPZ_SENTENCE	sphinxexcerpt.h	/^	SPH_SPZ_SENTENCE	= 1UL<<0,$/;"	e	enum:ESphSpz
SPH_SPZ_ZONE	sphinxexcerpt.h	/^	SPH_SPZ_ZONE		= 1UL<<2$/;"	e	enum:ESphSpz
SPH_SVN_REV	sphinxversion.h	2;"	d
SPH_SVN_REVSTR	sphinxversion.h	3;"	d
SPH_SVN_TAG	sphinxversion.h	1;"	d
SPH_SVN_TAGREV	sphinxversion.h	4;"	d
SPH_TEST_KEYPART	sphinxsort.cpp	1553;"	d	file:
SPH_TEST_PAIR	sphinxsort.cpp	1548;"	d	file:
SPH_TIMER_TRIALS	sphinx.cpp	/^static const int	SPH_TIMER_TRIALS				= 16384;$/;"	v	file:
SPH_TIME_PID_MAX_SIZE	searchd.cpp	1548;"	d	file:
SPH_TREE_DUMP	sphinxsearch.cpp	29;"	d	file:
SPH_UDF_ARGS	sphinxudf.h	/^} SPH_UDF_ARGS;$/;"	t	typeref:struct:st_sphinx_udf_args
SPH_UDF_ERROR_LEN	sphinxudf.h	27;"	d
SPH_UDF_INIT	sphinxudf.h	/^} SPH_UDF_INIT;$/;"	t	typeref:struct:st_sphinx_udf_init
SPH_UDF_TYPE_FLOAT	sphinxudf.h	/^	SPH_UDF_TYPE_FLOAT			= 4,			\/\/\/< single-precision IEEE 754 float$/;"	e	enum:sphinx_udf_argtype
SPH_UDF_TYPE_INT64	sphinxudf.h	/^	SPH_UDF_TYPE_INT64			= 3,			\/\/\/< signed 64-bit integer$/;"	e	enum:sphinx_udf_argtype
SPH_UDF_TYPE_STRING	sphinxudf.h	/^	SPH_UDF_TYPE_STRING			= 5,			\/\/\/< non-ASCIIZ string, with a separately stored length$/;"	e	enum:sphinx_udf_argtype
SPH_UDF_TYPE_UINT32	sphinxudf.h	/^	SPH_UDF_TYPE_UINT32			= 1,			\/\/\/< unsigned 32-bit integer$/;"	e	enum:sphinx_udf_argtype
SPH_UDF_TYPE_UINT32SET	sphinxudf.h	/^	SPH_UDF_TYPE_UINT32SET		= 2,			\/\/\/< sorted set of unsigned 32-bit integers$/;"	e	enum:sphinx_udf_argtype
SPH_UDF_TYPE_UINT64SET	sphinxudf.h	/^	SPH_UDF_TYPE_UINT64SET		= 6				\/\/\/< sorted set of unsigned 64-bit integers$/;"	e	enum:sphinx_udf_argtype
SPH_UNPACK_BUFFER_SIZE	sphinx.cpp	37;"	d	file:
SPH_UNPACK_MYSQL_COMPRESS	sphinx.h	/^	SPH_UNPACK_MYSQL_COMPRESS	= 2$/;"	e	enum:ESphUnpackFormat
SPH_UNPACK_NONE	sphinx.h	/^	SPH_UNPACK_NONE				= 0,$/;"	e	enum:ESphUnpackFormat
SPH_UNPACK_ZLIB	sphinx.h	/^	SPH_UNPACK_ZLIB				= 1,$/;"	e	enum:ESphUnpackFormat
SPH_UNZIP_IMPL	sphinx.cpp	6132;"	d	file:
SPH_UNZIP_IMPL	sphinx.cpp	6142;"	d	file:
SPH_VATTR_FLOAT	sphinxsort.cpp	/^	SPH_VATTR_FLOAT			= 10000	\/\/\/< tells match sorter to compare floats$/;"	e	enum:__anon20	file:
SPH_VATTR_ID	sphinxsort.cpp	/^	SPH_VATTR_ID			= -1,	\/\/\/< tells match sorter to use doc id$/;"	e	enum:__anon20	file:
SPH_VATTR_RELEVANCE	sphinxsort.cpp	/^	SPH_VATTR_RELEVANCE		= -2,	\/\/\/< tells match sorter to use match weight$/;"	e	enum:__anon20	file:
SPH_WORDLIST_CHECKPOINT	sphinxint.h	1428;"	d
SPH_WORDPART_INFIX	sphinx.h	/^	SPH_WORDPART_INFIX		= 2		\/\/\/< infix$/;"	e	enum:ESphWordpart
SPH_WORDPART_PREFIX	sphinx.h	/^	SPH_WORDPART_PREFIX		= 1,	\/\/\/< prefix$/;"	e	enum:ESphWordpart
SPH_WORDPART_WHOLE	sphinx.h	/^	SPH_WORDPART_WHOLE		= 0,	\/\/\/< whole-word$/;"	e	enum:ESphWordpart
SPH_ZONE_FOUND	sphinxint.h	/^	SPH_ZONE_FOUND,$/;"	e	enum:SphZoneHit_e
SPH_ZONE_NO_DOCUMENT	sphinxint.h	/^	SPH_ZONE_NO_DOCUMENT$/;"	e	enum:SphZoneHit_e
SPH_ZONE_NO_SPAN	sphinxint.h	/^	SPH_ZONE_NO_SPAN,$/;"	e	enum:SphZoneHit_e
SRC_SPHINX	Makefile	/^SRC_SPHINX = sphinx.cpp sphinxexcerpt.cpp sphinxquery.cpp \\$/;"	m
STAR_BACK	sphinxexcerpt.cpp	/^		STAR_BACK	= 1 << 1,$/;"	e	enum:ExcerptGen_c::KeywordStar_e	file:
STAR_BACK	sphinxquery.h	/^	STAR_BACK	= 2,$/;"	e	enum:XQStarPosition
STAR_BOTH	sphinxexcerpt.cpp	/^		STAR_BOTH	= STAR_FRONT | STAR_BACK$/;"	e	enum:ExcerptGen_c::KeywordStar_e	file:
STAR_BOTH	sphinxquery.h	/^	STAR_BOTH	= 3$/;"	e	enum:XQStarPosition
STAR_FRONT	sphinxexcerpt.cpp	/^		STAR_FRONT	= 1 << 0,$/;"	e	enum:ExcerptGen_c::KeywordStar_e	file:
STAR_FRONT	sphinxquery.h	/^	STAR_FRONT	= 1,$/;"	e	enum:XQStarPosition
STAR_NONE	sphinxexcerpt.cpp	/^		STAR_NONE	= 0,$/;"	e	enum:ExcerptGen_c::KeywordStar_e	file:
STAR_NONE	sphinxquery.h	/^	STAR_NONE	= 0,$/;"	e	enum:XQStarPosition
STATIC2DOCINFO	sphinx.h	/^inline 			DWORD *	STATIC2DOCINFO ( DWORD * pAttrs )			{ return STATIC2DOCINFO_T<SphDocID_t>(pAttrs); }$/;"	f
STATIC2DOCINFO	sphinx.h	/^inline const	DWORD *	STATIC2DOCINFO ( const DWORD * pAttrs )	{ return STATIC2DOCINFO_T<SphDocID_t>(pAttrs); }$/;"	f
STATIC2DOCINFO_T	sphinx.h	/^template < typename DOCID > inline DWORD *			STATIC2DOCINFO_T ( DWORD * pAttrs )		{ assert ( pDocinfo ); return pAttrs-DWSIZEOF(DOCID); }$/;"	f
STATIC2DOCINFO_T	sphinx.h	/^template < typename DOCID > inline DWORD *			STATIC2DOCINFO_T ( DWORD * pAttrs )		{ return pAttrs - DWSIZEOF(DOCID); }$/;"	f
STATIC2DOCINFO_T	sphinx.h	/^template < typename DOCID > inline const DWORD *	STATIC2DOCINFO_T ( const DWORD * pAttrs )	{ assert ( pDocinfo ); return pAttrs-DWSIZEOF(DOCID); }$/;"	f
STATIC2DOCINFO_T	sphinx.h	/^template < typename DOCID > inline const DWORD *	STATIC2DOCINFO_T ( const DWORD * pAttrs )	{ return pAttrs - DWSIZEOF(DOCID); }$/;"	f
STATIC_ASSERT	sphinxstd.h	74;"	d
STATIC_SIZE_ASSERT	sphinxstd.h	75;"	d
STATS_MAX_AGENTS	searchd.cpp	/^const int	STATS_MAX_AGENTS	= 1024;	\/\/\/< we'll track stats for this much remote agents$/;"	v
STDERR_FILENO	searchd.cpp	628;"	d	file:
STDERR_FILENO	sphinx.h	70;"	d
STDIN_FILENO	searchd.cpp	626;"	d	file:
STDOUT_FILENO	searchd.cpp	627;"	d	file:
STDOUT_FILENO	sphinx.h	69;"	d
STMT_ATTACH_INDEX	searchd.cpp	/^	STMT_ATTACH_INDEX,$/;"	e	enum:SqlStmt_e	file:
STMT_BEGIN	searchd.cpp	/^	STMT_BEGIN,$/;"	e	enum:SqlStmt_e	file:
STMT_CALL	searchd.cpp	/^	STMT_CALL,$/;"	e	enum:SqlStmt_e	file:
STMT_COMMIT	searchd.cpp	/^	STMT_COMMIT,$/;"	e	enum:SqlStmt_e	file:
STMT_CREATE_FUNC	searchd.cpp	/^	STMT_CREATE_FUNC,$/;"	e	enum:SqlStmt_e	file:
STMT_DELETE	searchd.cpp	/^	STMT_DELETE,$/;"	e	enum:SqlStmt_e	file:
STMT_DESC	searchd.cpp	/^	STMT_DESC,$/;"	e	enum:SqlStmt_e	file:
STMT_DROP_FUNC	searchd.cpp	/^	STMT_DROP_FUNC,$/;"	e	enum:SqlStmt_e	file:
STMT_DUMMY	searchd.cpp	/^	STMT_DUMMY,$/;"	e	enum:SqlStmt_e	file:
STMT_FLUSH_RTINDEX	searchd.cpp	/^	STMT_FLUSH_RTINDEX,$/;"	e	enum:SqlStmt_e	file:
STMT_INSERT	searchd.cpp	/^	STMT_INSERT,$/;"	e	enum:SqlStmt_e	file:
STMT_PARSE_ERROR	searchd.cpp	/^	STMT_PARSE_ERROR = 0,$/;"	e	enum:SqlStmt_e	file:
STMT_REPLACE	searchd.cpp	/^	STMT_REPLACE,$/;"	e	enum:SqlStmt_e	file:
STMT_ROLLBACK	searchd.cpp	/^	STMT_ROLLBACK,$/;"	e	enum:SqlStmt_e	file:
STMT_SELECT	searchd.cpp	/^	STMT_SELECT,$/;"	e	enum:SqlStmt_e	file:
STMT_SET	searchd.cpp	/^	STMT_SET,$/;"	e	enum:SqlStmt_e	file:
STMT_SHOW_META	searchd.cpp	/^	STMT_SHOW_META,$/;"	e	enum:SqlStmt_e	file:
STMT_SHOW_STATUS	searchd.cpp	/^	STMT_SHOW_STATUS,$/;"	e	enum:SqlStmt_e	file:
STMT_SHOW_TABLES	searchd.cpp	/^	STMT_SHOW_TABLES,$/;"	e	enum:SqlStmt_e	file:
STMT_SHOW_VARIABLES	searchd.cpp	/^	STMT_SHOW_VARIABLES,$/;"	e	enum:SqlStmt_e	file:
STMT_SHOW_WARNINGS	searchd.cpp	/^	STMT_SHOW_WARNINGS,$/;"	e	enum:SqlStmt_e	file:
STMT_TOTAL	searchd.cpp	/^	STMT_TOTAL$/;"	e	enum:SqlStmt_e	file:
STMT_UPDATE	searchd.cpp	/^	STMT_UPDATE,$/;"	e	enum:SqlStmt_e	file:
STRIP	Makefile	/^STRIP = $/;"	m
SUFF2	sphinxstemen.cpp	219;"	d	file:
SUFF3	sphinxstemen.cpp	220;"	d	file:
SUFF3A	sphinxstemen.cpp	226;"	d	file:
SUFF4	sphinxstemen.cpp	221;"	d	file:
SUFF4A	sphinxstemen.cpp	227;"	d	file:
SUFF5	sphinxstemen.cpp	222;"	d	file:
SUFF5A	sphinxstemen.cpp	228;"	d	file:
SUFF6	sphinxstemen.cpp	223;"	d	file:
SUFF6A	sphinxstemen.cpp	229;"	d	file:
SUFF7	sphinxstemen.cpp	224;"	d	file:
SUFF7A	sphinxstemen.cpp	230;"	d	file:
SYNCHECK_EXACT	sphinx.cpp	/^	SYNCHECK_EXACT,$/;"	e	enum:SynCheck_e	file:
SYNCHECK_GREATER	sphinx.cpp	/^	SYNCHECK_GREATER$/;"	e	enum:SynCheck_e	file:
SYNCHECK_LESS	sphinx.cpp	/^	SYNCHECK_LESS,$/;"	e	enum:SynCheck_e	file:
SYNCHECK_PARTIAL	sphinx.cpp	/^	SYNCHECK_PARTIAL,$/;"	e	enum:SynCheck_e	file:
SafeClose	sphinx.cpp	/^void SafeClose ( int & iFD )$/;"	f
SafeDelete	sphinxstd.h	302;"	d
SafeDeleteArray	sphinxstd.h	303;"	d
SafeRelease	sphinxstd.h	304;"	d
Save	indexer.cpp	/^void CSphStopwordBuilderDict::Save ( const char * sOutput, int iTop, bool bFreqs )$/;"	f	class:CSphStopwordBuilderDict
SaveAttributes	sphinx.cpp	/^bool CSphIndex_VLN::SaveAttributes ()$/;"	f	class:CSphIndex_VLN
SaveDictionarySettings	sphinx.cpp	/^void SaveDictionarySettings ( CSphWriter & tWriter, CSphDict * pDict, bool bForceWordDict )$/;"	f
SaveIndexSettings	sphinx.cpp	/^void SaveIndexSettings ( CSphWriter & tWriter, const CSphIndexSettings & tSettings )$/;"	f
SaveIndexes	searchd.cpp	/^static bool SaveIndexes ()$/;"	f	file:
SaveTokenizerSettings	sphinx.cpp	/^void SaveTokenizerSettings ( CSphWriter & tWriter, ISphTokenizer * pTokenizer )$/;"	f
ScanInt	sphinx.cpp	/^bool CSphSource_XMLPipe::ScanInt ( const char * sTag, DWORD * pRes, CSphString & sError )$/;"	f	class:CSphSource_XMLPipe
ScanInt	sphinx.cpp	/^bool CSphSource_XMLPipe::ScanInt ( const char * sTag, uint64_t * pRes, CSphString & sError )$/;"	f	class:CSphSource_XMLPipe
ScanInt	sphinx.h	/^	bool			ScanInt ( const char * sTag, int64_t * pRes, CSphString & sError ) { return ScanInt ( sTag, (uint64_t*)pRes, sError ); }$/;"	f	class:CSphSource_XMLPipe
ScanStr	sphinx.cpp	/^bool CSphSource_XMLPipe::ScanStr ( const char * sTag, char * pRes, int iMaxLength, CSphString & sError )$/;"	f	class:CSphSource_XMLPipe
SeamlessForkPrereader	searchd.cpp	/^void SeamlessForkPrereader ()$/;"	f
SeamlessTryToForkPrereader	searchd.cpp	/^void SeamlessTryToForkPrereader ()$/;"	f
SearchFailure_t	searchd.cpp	/^	SearchFailure_t () {}$/;"	f	struct:SearchFailure_t
SearchFailure_t	searchd.cpp	/^struct SearchFailure_t$/;"	s	file:
SearchFailuresLog_c	searchd.cpp	/^class SearchFailuresLog_c$/;"	c	file:
SearchHandler_c	searchd.cpp	/^SearchHandler_c::SearchHandler_c ( int iQueries, bool bSphinxql )$/;"	f	class:SearchHandler_c
SearchHandler_c	searchd.cpp	/^class SearchHandler_c$/;"	c	file:
SearchReplyParser_t	searchd.cpp	/^	SearchReplyParser_t ( int iStart, int iEnd, CSphVector<DWORD> & dMvaStorage, CSphVector<BYTE> & dStringsStorage )$/;"	f	struct:SearchReplyParser_t
SearchReplyParser_t	searchd.cpp	/^struct SearchReplyParser_t : public IReplyParser_t, public ISphNoncopyable$/;"	s	file:
SearchRequestBuilder_t	searchd.cpp	/^						SearchRequestBuilder_t ( const CSphVector<CSphQuery> & dQueries, int iStart, int iEnd ) : m_dQueries ( dQueries ), m_iStart ( iStart ), m_iEnd ( iEnd ) {}$/;"	f	struct:SearchRequestBuilder_t
SearchRequestBuilder_t	searchd.cpp	/^struct SearchRequestBuilder_t : public IRequestBuilder_t$/;"	s	file:
SearchdCommand_e	searchd.cpp	/^enum SearchdCommand_e$/;"	g	file:
SearchdStats_t	searchd.cpp	/^struct SearchdStats_t$/;"	s	file:
SearchdStatus_e	searchd.cpp	/^enum SearchdStatus_e$/;"	g	file:
SeekHitlist	sphinx.cpp	/^	virtual void SeekHitlist ( SphOffset_t uOff )$/;"	f	class:DiskIndexQword_c
SeekHitlist	sphinxexcerpt.cpp	/^	virtual void SeekHitlist ( SphOffset_t ) {}$/;"	f	class:ISnippetsQword
SeekHitlist	sphinxexcerpt.cpp	/^	virtual void SeekHitlist ( SphOffset_t ) {}$/;"	f	class:SnippetsFastQword_c
SeekTo	sphinx.cpp	/^void CSphReader::SeekTo ( SphOffset_t iPos, int iSizeHint )$/;"	f	class:CSphReader
SeekTo	sphinx.cpp	/^void CSphWriter::SeekTo ( SphOffset_t iPos )$/;"	f	class:CSphWriter
SelectBounds_t	sphinx.cpp	/^struct SelectBounds_t$/;"	s	file:
SelectParser_t	sphinx.cpp	/^class SelectParser_t$/;"	c	file:
SendAsDword	searchd.cpp	/^	bool		SendAsDword ( int64_t iValue ) \/\/\/< sends the 32bit MAX_UINT if the value is greater than it.$/;"	f	class:NetOutputBuffer_c
SendByte	searchd.cpp	/^	bool		SendByte ( BYTE uValue )		{ return SendT<BYTE> ( uValue ); }$/;"	f	class:NetOutputBuffer_c
SendBytes	searchd.cpp	/^bool NetOutputBuffer_c::SendBytes ( const void * pBuf, int iLen )$/;"	f	class:NetOutputBuffer_c
SendDocid	searchd.cpp	/^	bool		SendDocid ( SphDocID_t iValue )	{ return SendDword ( iValue ); }$/;"	f	class:NetOutputBuffer_c
SendDocid	searchd.cpp	/^	bool		SendDocid ( SphDocID_t iValue )	{ return SendUint64 ( iValue ); }$/;"	f	class:NetOutputBuffer_c
SendDword	searchd.cpp	/^	bool		SendDword ( DWORD iValue )		{ return SendT<DWORD> ( htonl ( iValue ) ); }$/;"	f	class:NetOutputBuffer_c
SendErrorReply	searchd.cpp	/^	virtual void	SendErrorReply ( const char *, ... ) __attribute__ ( ( format ( printf, 2, 3 ) ) ) {}$/;"	f	class:MemInputBuffer_c
SendErrorReply	searchd.cpp	/^void NetInputBuffer_c::SendErrorReply ( const char * sTemplate, ... )$/;"	f	class:NetInputBuffer_c
SendFloat	searchd.cpp	/^	bool		SendFloat ( float fValue )		{ return SendT<DWORD> ( htonl ( sphF2DW ( fValue ) ) ); }$/;"	f	class:NetOutputBuffer_c
SendGetAttrCount	searchd.cpp	/^static int SendGetAttrCount ( const CSphSchema & tSchema )$/;"	f	file:
SendInt	searchd.cpp	/^	bool		SendInt ( int iValue )			{ return SendT<int> ( htonl ( iValue ) ); }$/;"	f	class:NetOutputBuffer_c
SendLSBDword	searchd.cpp	/^	bool		SendLSBDword ( DWORD v )		{ SendByte ( (BYTE)( v&0xff ) ); SendByte ( (BYTE)( (v>>8)&0xff ) ); SendByte ( (BYTE)( (v>>16)&0xff ) ); return SendByte ( (BYTE)( (v>>24)&0xff) ); }$/;"	f	class:NetOutputBuffer_c
SendMysqlEofPacket	searchd.cpp	/^void SendMysqlEofPacket ( NetOutputBuffer_c & tOut, BYTE uPacketID, int iWarns, bool bMoreResults=false )$/;"	f
SendMysqlErrorPacket	searchd.cpp	/^void SendMysqlErrorPacket ( NetOutputBuffer_c & tOut, BYTE uPacketID, const char * sStmt, const char * sError, MysqlErrors_e iErr=MYSQL_ERR_PARSE_ERROR )$/;"	f
SendMysqlErrorPacketEx	searchd.cpp	/^void SendMysqlErrorPacketEx ( NetOutputBuffer_c & tOut, BYTE uPacketID, MysqlErrors_e iErr, const char * sTemplate, ... )$/;"	f
SendMysqlFieldPacket	searchd.cpp	/^void SendMysqlFieldPacket ( NetOutputBuffer_c & tOut, BYTE uPacketID, const char * sCol, MysqlColumnType_e eType )$/;"	f
SendMysqlOkPacket	searchd.cpp	/^void SendMysqlOkPacket ( NetOutputBuffer_c & tOut, BYTE uPacketID, int iAffectedRows=0, int iWarns=0, const char * sMessage=NULL )$/;"	f
SendMysqlPair	searchd.cpp	/^void SendMysqlPair ( NetOutputBuffer_c & tOut, BYTE & uPacketID, SqlRowBuffer_c & dRows, const char * sKey, const char * sValue )$/;"	f
SendMysqlSelectResult	searchd.cpp	/^void SendMysqlSelectResult ( NetOutputBuffer_c & tOut, BYTE & uPacketID, SqlRowBuffer_c & dRows, const AggrResult_t & tRes, bool bMoreResultsFollow )$/;"	f
SendMysqlString	searchd.cpp	/^bool NetOutputBuffer_c::SendMysqlString ( const char * sStr )$/;"	f	class:NetOutputBuffer_c
SendQuery	searchd.cpp	/^void SearchRequestBuilder_t::SendQuery ( const char * sIndexes, NetOutputBuffer_c & tOut, const CSphQuery & q ) const$/;"	f	class:SearchRequestBuilder_t
SendResult	searchd.cpp	/^void SendResult ( int iVer, NetOutputBuffer_c & tOut, const CSphQueryResult * pRes, const CSphVector<PoolPtrs_t> & dTag2Pools, bool bExtendedStat )$/;"	f
SendRotate	indexer.cpp	/^bool SendRotate ( const CSphConfig & hConf, bool bForce )$/;"	f
SendSearchResponse	searchd.cpp	/^void SendSearchResponse ( SearchHandler_c & tHandler, InputBuffer_c & tReq, int iSock, int iVer, int iMasterVer )$/;"	f
SendString	searchd.cpp	/^bool NetOutputBuffer_c::SendString ( const char * sStr )$/;"	f	class:NetOutputBuffer_c
SendT	searchd.cpp	/^template < typename T > bool NetOutputBuffer_c::SendT ( T tValue )$/;"	f	class:NetOutputBuffer_c
SendUint64	searchd.cpp	/^	bool		SendUint64 ( uint64_t iValue )	{ SendT<DWORD> ( htonl ( (DWORD)(iValue>>32) ) ); return SendT<DWORD> ( htonl ( (DWORD)(iValue&0xffffffffUL) ) ); }$/;"	f	class:NetOutputBuffer_c
SendWord	searchd.cpp	/^	bool		SendWord ( WORD iValue )		{ return SendT<WORD> ( htons ( iValue ) ); }$/;"	f	class:NetOutputBuffer_c
ServedDesc_t	searchd.cpp	/^ServedDesc_t::ServedDesc_t ()$/;"	f	class:ServedDesc_t
ServedDesc_t	searchd.cpp	/^struct ServedDesc_t$/;"	s	file:
ServedIndex_t	searchd.cpp	/^						ServedIndex_t () {}$/;"	f	struct:ServedIndex_t
ServedIndex_t	searchd.cpp	/^struct ServedIndex_t : public ISphNoncopyable, public ServedDesc_t$/;"	s	file:
ServiceControl	searchd.cpp	/^void WINAPI ServiceControl ( DWORD dwControlCode )$/;"	f
ServiceDelete	searchd.cpp	/^void ServiceDelete ()$/;"	f
ServiceInstall	searchd.cpp	/^void ServiceInstall ( int argc, char ** argv )$/;"	f
ServiceMain	searchd.cpp	/^int WINAPI ServiceMain ( int argc, char **argv )$/;"	f
ServiceOpenManager	searchd.cpp	/^SC_HANDLE ServiceOpenManager ()$/;"	f
SessionVars_t	searchd.cpp	/^	SessionVars_t ()$/;"	f	struct:SessionVars_t
SessionVars_t	searchd.cpp	/^struct SessionVars_t$/;"	s	file:
Set	sphinxstd.h	/^	void Set ( int iIdx=-1 )$/;"	f	class:CSphSmallBitvec
SetAggrCount	sphinx.cpp	/^	void SetAggrCount ( int iVal )$/;"	f	struct:CSphAggregateHit
SetAttr	searchd.cpp	/^	bool SetAttr ( const CSphAttrLocator & tLoc, const SqlInsert_t & tVal, ESphAttr eTargetType )$/;"	f	class:CSphMatchVariant
SetAttr	sphinx.h	/^	void SetAttr ( const CSphAttrLocator & tLoc, SphAttr_t uValue )$/;"	f	class:CSphMatch
SetAttrFloat	sphinx.h	/^	void SetAttrFloat ( const CSphAttrLocator & tLoc, float fValue )$/;"	f	class:CSphMatch
SetBase	sphinx.cpp	/^void CSphIndex_VLN::SetBase ( const char * sNewBase )$/;"	f	class:CSphIndex_VLN
SetBinary	sphinxstd.h	/^	void SetBinary ( const char * sValue, int iLen )$/;"	f	struct:CSphString
SetBinlog	sphinx.h	/^	void						SetBinlog ( bool bBinlog ) { m_bBinlog = bBinlog; }$/;"	f	class:CSphIndex
SetBlendChars	sphinx.cpp	/^bool ISphTokenizer::SetBlendChars ( const char * sConfig, CSphString & sError )$/;"	f	class:ISphTokenizer
SetBlendMode	sphinx.cpp	/^bool ISphTokenizer::SetBlendMode ( const char * sMode, CSphString & sError )$/;"	f	class:ISphTokenizer
SetBoundary	sphinx.cpp	/^	virtual bool					SetBoundary ( const char * sConfig, CSphString & sError )		{ return m_pTokenizer->SetBoundary ( sConfig, sError ); }$/;"	f	class:CSphTokenizer_Filter
SetBoundary	sphinx.cpp	/^bool ISphTokenizer::SetBoundary ( const char * sConfig, CSphString & sError )$/;"	f	class:ISphTokenizer
SetBuffer	sphinx.cpp	/^void CSphTokenizer_Filter::SetBuffer ( BYTE * sBuffer, int iLength )$/;"	f	class:CSphTokenizer_Filter
SetBuffer	sphinx.cpp	/^void CSphTokenizer_SBCS::SetBuffer ( BYTE * sBuffer, int iLength )$/;"	f	class:CSphTokenizer_SBCS
SetBuffer	sphinx.cpp	/^void CSphTokenizer_UTF8::SetBuffer ( BYTE * sBuffer, int iLength )$/;"	f	class:CSphTokenizer_UTF8
SetBufferPtr	sphinx.cpp	/^void CSphTokenizerTraits<IS_UTF8>::SetBufferPtr ( const char * sNewPtr )$/;"	f	class:CSphTokenizerTraits
SetBufferPtr	sphinx.cpp	/^void CSphTokenizer_Filter::SetBufferPtr ( const char * sNewPtr )$/;"	f	class:CSphTokenizer_Filter
SetBufferSize	sphinx.cpp	/^void CSphWriter::SetBufferSize ( int iBufferSize )$/;"	f	class:CSphWriter
SetBuffers	sphinx.cpp	/^void CSphReader::SetBuffers ( int iReadBuffer, int iReadUnhinted )$/;"	f	class:CSphReader
SetCacheSize	sphinx.cpp	/^void CSphIndex::SetCacheSize ( int iMaxCachedDocs, int iMaxCachedHits )$/;"	f	class:CSphIndex
SetCaseFolding	sphinx.cpp	/^	virtual bool					SetCaseFolding ( const char * sConfig, CSphString & sError )	{ return m_pTokenizer->SetCaseFolding ( sConfig, sError ); }$/;"	f	class:CSphTokenizer_Filter
SetCaseFolding	sphinx.cpp	/^bool CSphTokenizerTraits<IS_UTF8>::SetCaseFolding ( const char * sConfig, CSphString & sError )$/;"	f	class:CSphTokenizerTraits
SetCaseFolding	sphinx.cpp	/^bool ISphTokenizer::SetCaseFolding ( const char * sConfig, CSphString & sError )$/;"	f	class:ISphTokenizer
SetDefaultAttr	searchd.cpp	/^	inline bool SetDefaultAttr ( const CSphAttrLocator & tLoc, ESphAttr eTargetType )$/;"	f	class:CSphMatchVariant
SetDict	sphinx.cpp	/^void CSphSource::SetDict ( CSphDict * pDict )$/;"	f	class:CSphSource
SetDictionary	sphinx.cpp	/^void CSphIndex::SetDictionary ( CSphDict * pDict )$/;"	f	class:CSphIndex
SetDumpRows	sphinx.h	/^	virtual void						SetDumpRows ( FILE * ) {}$/;"	f	class:CSphSource
SetDumpRows	sphinx.h	/^	virtual void			SetDumpRows ( FILE * fpDumpRows ) { m_fpDumpRows = fpDumpRows; }$/;"	f	class:CSphSource_Document
SetEnableStar	sphinx.h	/^	virtual void				SetEnableStar ( bool bEnableStar ) { m_bEnableStar = bEnableStar; }$/;"	f	class:CSphIndex
SetEndMarker	sphinx.h	/^	static void SetEndMarker ( Hitpos_t * pHitpos )$/;"	f	class:Hitman_c
SetError	searchd.cpp	/^	void						SetError ( bool bError ) { m_bError = bError; }$/;"	f	class:InputBuffer_c
SetExactPhrase	sphinxexcerpt.cpp	/^void ExcerptGen_c::SetExactPhrase ( const ExcerptQuery_t & tQuery )$/;"	f	class:ExcerptGen_c
SetExternalValues	sphinx.cpp	/^void CSphFilterSettings::SetExternalValues ( const SphAttr_t * pValues, int nValues )$/;"	f	class:CSphFilterSettings
SetFieldSpec	sphinxquery.cpp	/^	inline void SetFieldSpec ( const CSphSmallBitvec& uMask, int iMaxPos )$/;"	f	class:XQParser_t
SetFieldSpec	sphinxquery.cpp	/^void XQLimitSpec_t::SetFieldSpec ( const CSphSmallBitvec& uMask, int iMaxPos )$/;"	f	class:XQLimitSpec_t
SetFieldSpec	sphinxquery.cpp	/^void XQNode_t::SetFieldSpec ( const CSphSmallBitvec& uMask, int iMaxPos )$/;"	f	class:XQNode_t
SetFile	sphinx.cpp	/^void CSphReader::SetFile ( const CSphAutofile & tFile )$/;"	f	class:CSphReader
SetFile	sphinx.cpp	/^void CSphReader::SetFile ( int iFD, const char * sFilename )$/;"	f	class:CSphReader
SetFile	sphinx.cpp	/^void CSphWriter::SetFile ( CSphAutofile & tAuto, SphOffset_t * pSharedOffset, CSphString & sError )$/;"	f	class:CSphWriter
SetGroupBy	searchd.cpp	/^void SqlParser_c::SetGroupBy ( const CSphString & sGroupBy )$/;"	f	class:SqlParser_c
SetGroupState	sphinx.h	/^	virtual void		SetGroupState ( const CSphMatchComparatorState & ) {}$/;"	f	class:ISphMatchSorter
SetGroupState	sphinxsort.cpp	/^	void SetGroupState ( const CSphMatchComparatorState & tState )$/;"	f	class:CSphKBufferGroupSorter
SetIgnoreChars	sphinx.cpp	/^	virtual bool					SetIgnoreChars ( const char * sIgnored, CSphString & sError )	{ return m_pTokenizer->SetIgnoreChars ( sIgnored, sError ); }$/;"	f	class:CSphTokenizer_Filter
SetIgnoreChars	sphinx.cpp	/^bool ISphTokenizer::SetIgnoreChars ( const char * sConfig, CSphString & sError )$/;"	f	class:ISphTokenizer
SetIndexedAttrs	sphinx.cpp	/^bool CSphHTMLStripper::SetIndexedAttrs ( const char * sConfig, CSphString & sError )$/;"	f	class:CSphHTMLStripper
SetInplaceSettings	sphinx.cpp	/^void CSphIndex::SetInplaceSettings ( int iHitGap, int iDocinfoGap, float fRelocFactor, float fWriteFactor )$/;"	f	class:CSphIndex
SetLastQuery	searchd.cpp	/^void SphCrashLogger_c::SetLastQuery ( const CrashQuery_t & tQuery )$/;"	f	class:SphCrashLogger_c
SetLocator	sphinxfilter.cpp	/^	virtual void SetLocator ( const CSphAttrLocator & tLocator )$/;"	f	struct:IFilter_Attr
SetLocator	sphinxfilter.h	/^	virtual void SetLocator ( const CSphAttrLocator & ) {}$/;"	f	struct:ISphFilter
SetMVAPool	sphinx.cpp	/^void CSphQueryContext::SetMVAPool ( const DWORD * pMva )$/;"	f	class:CSphQueryContext
SetMVAPool	sphinx.h	/^	virtual void		SetMVAPool ( const DWORD * ) {}$/;"	f	class:ISphMatchSorter
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMva ) { m_pMva = pMva; }$/;"	f	struct:Expr_GetMva_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMvaPool ) { m_pFirst->SetMVAPool ( pMvaPool ); }$/;"	f	struct:Expr_Unary_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMvaPool ) { this->m_pArg->SetMVAPool ( pMvaPool ); }$/;"	f	class:Expr_InUservar_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMvaPool ) { this->m_pArg->SetMVAPool ( pMvaPool ); }$/;"	f	class:Expr_In_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMvaPool ) { this->m_pArg->SetMVAPool ( pMvaPool ); }$/;"	f	class:Expr_IntervalConst_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMvaPool )$/;"	f	class:Expr_Bitdot_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMvaPool )$/;"	f	class:Expr_Interval_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pMvaPool )$/;"	f	class:Expr_MVAIn_c
SetMVAPool	sphinxexpr.cpp	/^	virtual void SetMVAPool ( const DWORD * pPool ) { ARRAY_FOREACH ( i, m_dArgs ) m_dArgs[i]->SetMVAPool ( pPool ); }$/;"	f	class:Expr_Udf_c
SetMVAPool	sphinxexpr.h	/^	virtual void SetMVAPool ( const DWORD * ) {}$/;"	f	struct:ISphExpr
SetMVAPool	sphinxsort.cpp	/^	virtual void		SetMVAPool ( const DWORD * ) {}$/;"	f	struct:ExprGeodist_t
SetMVAPool	sphinxsort.cpp	/^	void SetMVAPool ( const DWORD * pMva )$/;"	f	class:CSphKBufferMVAGroupSorter
SetMVAStorage	sphinxfilter.cpp	/^	virtual void SetMVAStorage ( const DWORD * pMva )$/;"	f	struct:Filter_And
SetMVAStorage	sphinxfilter.cpp	/^	virtual void SetMVAStorage ( const DWORD * pMva )$/;"	f	struct:Filter_Not
SetMVAStorage	sphinxfilter.cpp	/^	virtual void SetMVAStorage ( const DWORD * pMva )$/;"	f	struct:IFilter_MVA
SetMVAStorage	sphinxfilter.h	/^	virtual void SetMVAStorage ( const DWORD * ) {}$/;"	f	struct:ISphFilter
SetMarker	sphinxexcerpt.cpp	/^	void	SetMarker ( CSphHitMarker * pMarker ) { m_pMarker = pMarker; }$/;"	f	class:ExcerptGen_c
SetMatch	searchd.cpp	/^bool SqlParser_c::SetMatch ( const YYSTYPE& tValue )$/;"	f	class:SqlParser_c
SetMlock	sphinxstd.h	/^	void SetMlock ( bool bMlock )$/;"	f	class:CSphSharedBuffer
SetMorphology	indexer.cpp	/^	virtual bool		SetMorphology ( const char *, bool, CSphString & ) { return true; }$/;"	f	class:CSphStopwordBuilderDict
SetMorphology	sphinx.cpp	/^	virtual bool SetMorphology ( const char * szMorph, bool bUseUTF8, CSphString & sError ) { return m_pBase->SetMorphology ( szMorph, bUseUTF8, sError ); }$/;"	f	class:CRtDictKeywords
SetMorphology	sphinx.cpp	/^bool CSphDictCRCTraits::SetMorphology ( const char * szMorph, bool bUseUTF8, CSphString & sError )$/;"	f	class:CSphDictCRCTraits
SetMorphology	sphinxint.h	/^	virtual bool		SetMorphology ( const char * szMorph, bool bUseUTF8, CSphString & sError ) { return m_pDict->SetMorphology ( szMorph, bUseUTF8, sError ); }$/;"	f	class:CSphDictTraits
SetName	sphinx.h	/^	void						SetName ( const char * sName ) { m_sIndexName = sName; }$/;"	f	class:CSphIndex
SetNewSyntax	searchd.cpp	/^	inline bool		SetNewSyntax()$/;"	f	struct:SqlParser_c
SetNgramChars	sphinx.cpp	/^	virtual bool					SetNgramChars ( const char * sConfig, CSphString & sError )		{ return m_pTokenizer->SetNgramChars ( sConfig, sError ); }$/;"	f	class:CSphTokenizer_Filter
SetNgramChars	sphinx.cpp	/^bool CSphTokenizer_UTF8Ngram::SetNgramChars ( const char * sConfig, CSphString & sError )$/;"	f	class:CSphTokenizer_UTF8Ngram
SetNgramChars	sphinx.h	/^	virtual bool					SetNgramChars ( const char *, CSphString & ) { return true; }$/;"	f	class:ISphTokenizer
SetNgramLen	sphinx.cpp	/^	virtual void					SetNgramLen ( int iLen )										{ m_pTokenizer->SetNgramLen ( iLen ); }$/;"	f	class:CSphTokenizer_Filter
SetNgramLen	sphinx.cpp	/^void CSphTokenizer_UTF8Ngram::SetNgramLen ( int iLen )$/;"	f	class:CSphTokenizer_UTF8Ngram
SetNgramLen	sphinx.h	/^	virtual void					SetNgramLen ( int ) {}$/;"	f	class:ISphTokenizer
SetNodePos	sphinxsearch.cpp	/^	void SetNodePos ( WORD uPosLeft, WORD uPosRight )$/;"	f	class:ExtTwofer_c
SetOldSyntax	searchd.cpp	/^	inline bool		SetOldSyntax()$/;"	f	struct:SqlParser_c
SetOp	sphinxquery.cpp	/^void XQNode_t::SetOp ( XQOperator_e eOp, XQNode_t * pArg1, XQNode_t * pArg2 )$/;"	f	class:XQNode_t
SetOp	sphinxquery.h	/^	void SetOp ( XQOperator_e eOp )$/;"	f	struct:XQNode_t
SetOp	sphinxquery.h	/^	void SetOp ( XQOperator_e eOp, CSphVector<XQNode_t*> & dArgs )$/;"	f	struct:XQNode_t
SetPreopen	sphinx.h	/^	virtual void				SetPreopen ( bool bValue ) { m_bKeepFilesOpen = bValue; }$/;"	f	class:CSphIndex
SetProgressCallback	sphinx.cpp	/^void CSphAutofile::SetProgressCallback ( CSphIndex::ProgressCallback_t * pfnProgress, CSphIndexProgress * pStat )$/;"	f	class:CSphAutofile
SetProgressCallback	sphinx.h	/^	virtual	void				SetProgressCallback ( ProgressCallback_t * pfnProgress ) { m_pProgress = pfnProgress; }$/;"	f	class:CSphIndex
SetQwordsIDF	sphinxsearch.cpp	/^	virtual void SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtNodeCached_t
SetQwordsIDF	sphinxsearch.cpp	/^	void SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtRanker_Expr_c
SetQwordsIDF	sphinxsearch.cpp	/^void ExtNWayT::SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtNWayT
SetQwordsIDF	sphinxsearch.cpp	/^void ExtOrder_c::SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtOrder_c
SetQwordsIDF	sphinxsearch.cpp	/^void ExtQuorum_c::SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtQuorum_c
SetQwordsIDF	sphinxsearch.cpp	/^void ExtRanker_c::SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtRanker_c
SetQwordsIDF	sphinxsearch.cpp	/^void ExtTerm_c::SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtTerm_c
SetQwordsIDF	sphinxsearch.cpp	/^void ExtTwofer_c::SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtTwofer_c
SetQwordsIDF	sphinxsearch.cpp	/^void ExtUnit_c::SetQwordsIDF ( const ExtQwordsHash_t & hQwords )$/;"	f	class:ExtUnit_c
SetRange	sphinxfilter.cpp	/^	virtual void SetRange ( SphAttr_t tMin, SphAttr_t tMax )$/;"	f	struct:Filter_IdRange
SetRange	sphinxfilter.cpp	/^	virtual void SetRange ( SphAttr_t tMin, SphAttr_t tMax )$/;"	f	struct:IFilter_Range
SetRange	sphinxfilter.h	/^	virtual void SetRange ( SphAttr_t, SphAttr_t ) {}$/;"	f	struct:ISphFilter
SetRangeFloat	sphinxfilter.cpp	/^	virtual void SetRangeFloat ( float fMin, float fMax )$/;"	f	struct:Filter_FloatRange
SetRangeFloat	sphinxfilter.h	/^	virtual void SetRangeFloat ( float, float ) {}$/;"	f	struct:ISphFilter
SetRemap	sphinx.cpp	/^void CSphLowercaser::SetRemap ( const CSphLowercaser * pLC )$/;"	f	class:CSphLowercaser
SetRemovedElements	sphinx.cpp	/^bool CSphHTMLStripper::SetRemovedElements ( const char * sConfig, CSphString & )$/;"	f	class:CSphHTMLStripper
SetSchema	sphinx.h	/^	virtual void				SetSchema ( const CSphSchema & tSchema ) { m_tSchema = tSchema; }$/;"	f	class:ISphMatchSorter
SetSchema	sphinxsort.cpp	/^	virtual void SetSchema ( const CSphSchema & tSchema )$/;"	f	class:CSphKBufferGroupSorter
SetSelect	searchd.cpp	/^	void			SetSelect ( SqlNode_t * pStart, SqlNode_t * pEnd=NULL )$/;"	f	struct:SqlParser_c
SetSignalHandlers	indexer.cpp	/^void SetSignalHandlers ()$/;"	f
SetSignalHandlers	searchd.cpp	/^void SetSignalHandlers ()$/;"	f
SetSprintf	sphinxstd.h	/^	const CSphString & SetSprintf ( const char * sTemplate, ... ) __attribute__ ( ( format ( printf, 2, 3 ) ) )$/;"	f	struct:CSphString
SetSprintfVa	sphinxstd.h	/^	const CSphString & SetSprintfVa ( const char * sTemplate, va_list ap )$/;"	f	struct:CSphString
SetState	sphinxsort.cpp	/^	void		SetState ( const CSphMatchComparatorState & tState )	{ m_tState = tState; m_tState.m_iNow = (DWORD) time ( NULL ); }$/;"	f	class:CSphMatchQueueTraits
SetStatement	searchd.cpp	/^void SqlParser_c::SetStatement ( const YYSTYPE& tName, SqlSet_e eSet )$/;"	f	class:SqlParser_c
SetStringPool	sphinx.cpp	/^void CSphQueryContext::SetStringPool ( const BYTE * pStrings )$/;"	f	class:CSphQueryContext
SetStringPool	sphinx.h	/^	virtual void		SetStringPool ( const BYTE * ) {}$/;"	f	class:ISphMatchSorter
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pPool ) { ARRAY_FOREACH ( i, m_dArgs ) m_dArgs[i]->SetStringPool ( pPool ); }$/;"	f	class:Expr_Udf_c
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings ) { m_pFirst->SetStringPool ( pStrings ); }$/;"	f	struct:Expr_Unary_c
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings ) { m_pStrings = pStrings; }$/;"	f	struct:Expr_GetString_c
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings ) { this->m_pArg->SetStringPool ( pStrings ); }$/;"	f	class:Expr_InUservar_c
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings ) { this->m_pArg->SetStringPool ( pStrings ); }$/;"	f	class:Expr_In_c
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings ) { this->m_pArg->SetStringPool ( pStrings ); }$/;"	f	class:Expr_IntervalConst_c
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings )$/;"	f	class:Expr_Bitdot_c
SetStringPool	sphinxexpr.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings )$/;"	f	class:Expr_Interval_c
SetStringPool	sphinxexpr.h	/^	virtual void SetStringPool ( const BYTE * ) {}$/;"	f	struct:ISphExpr
SetStringPool	sphinxsort.cpp	/^	virtual void			SetStringPool ( const BYTE * ) {}$/;"	f	class:CSphGrouper
SetStringPool	sphinxsort.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings ) { m_pStrings = pStrings; }$/;"	f	struct:ExprSortStringAttrFixup_c
SetStringPool	sphinxsort.cpp	/^	virtual void SetStringPool ( const BYTE * pStrings )$/;"	f	class:CSphGrouperString
SetStringPool	sphinxsort.cpp	/^	void SetStringPool ( const BYTE * pStrings )$/;"	f	class:CSphKBufferGroupSorter
SetStripHTML	sphinx.cpp	/^bool CSphSource::SetStripHTML ( const char * sExtractAttrs, const char * sRemoveElements, bool bDetectParagraphs, const char * sZones, CSphString & sError )$/;"	f	class:CSphSource
SetTag	sphinx.cpp	/^void CSphSource_XMLPipe::SetTag ( const char * sTag )$/;"	f	class:CSphSource_XMLPipe
SetTemporary	sphinx.cpp	/^void CSphAutofile::SetTemporary()$/;"	f	class:CSphAutofile
SetTokenizer	sphinx.cpp	/^void CSphIndex::SetTokenizer ( ISphTokenizer * pTokenizer )$/;"	f	class:CSphIndex
SetTokenizer	sphinx.cpp	/^void CSphSource::SetTokenizer ( ISphTokenizer * pTokenizer )$/;"	f	class:CSphSource
SetValue	sphinxsort.cpp	/^void IAggrFuncTraits<DWORD>::SetValue ( CSphMatch * pRow, DWORD val )$/;"	f	class:IAggrFuncTraits
SetValue	sphinxsort.cpp	/^void IAggrFuncTraits<float>::SetValue ( CSphMatch * pRow, float val )$/;"	f	class:IAggrFuncTraits
SetValue	sphinxsort.cpp	/^void IAggrFuncTraits<int64_t>::SetValue ( CSphMatch * pRow, int64_t val )$/;"	f	class:IAggrFuncTraits
SetValues	sphinxfilter.cpp	/^	virtual void SetValues ( const SphAttr_t * pStorage, int iCount )$/;"	f	struct:IFilter_Values
SetValues	sphinxfilter.h	/^	virtual void SetValues ( const SphAttr_t *, int ) {}$/;"	f	struct:ISphFilter
SetWatchDog	searchd.cpp	/^bool SetWatchDog ( int iDevNull )$/;"	f
SetWordlistPreload	sphinx.h	/^	virtual void				SetWordlistPreload ( bool bValue ) { m_bPreloadWordlist = bValue; }$/;"	f	class:CSphIndex
SetZoneSpec	sphinxquery.cpp	/^void XQLimitSpec_t::SetZoneSpec ( const CSphVector<int> & dZones )$/;"	f	class:XQLimitSpec_t
SetZoneSpec	sphinxquery.cpp	/^void XQNode_t::SetZoneSpec ( const CSphVector<int> & dZones )$/;"	f	class:XQNode_t
SetZoneVec	sphinxquery.cpp	/^	inline void SetZoneVec ( int iZoneVec )$/;"	f	class:XQParser_t
SetZones	sphinx.cpp	/^bool CSphHTMLStripper::SetZones ( const char * sZones, CSphString & sError )$/;"	f	class:CSphHTMLStripper
Setup	indexer.cpp	/^	virtual void		Setup ( const CSphDictSettings & tSettings ) { m_tSettings = tSettings; }$/;"	f	class:CSphStopwordBuilderDict
Setup	searchd.cpp	/^	bool Setup ( const CSphIndex * pIndex, const ExcerptQuery_t & tSettings, CSphString & sError )$/;"	f	class:SnippetContext_t
Setup	sphinx.cpp	/^	virtual void					Setup ( const CSphTokenizerSettings & tSettings )				{ m_pTokenizer->Setup ( tSettings ); }$/;"	f	class:CSphTokenizer_Filter
Setup	sphinx.cpp	/^	virtual void		Setup ( const CSphDictSettings & tSettings ) { m_tSettings = tSettings; }$/;"	f	struct:CSphDictCRCTraits
Setup	sphinx.cpp	/^	virtual void Setup ( const CSphDictSettings & tSettings ) { m_pBase->Setup ( tSettings ); }$/;"	f	class:CRtDictKeywords
Setup	sphinx.cpp	/^	void Setup ( const CSphString & sFilename, SphOffset_t iMaxPos, ESphHitless eHitless, CSphString & sError, CSphDict * pDict )$/;"	f	class:CSphDictReader
Setup	sphinx.cpp	/^bool CSphSource_MySQL::Setup ( const CSphSourceParams_MySQL & tParams )$/;"	f	class:CSphSource_MySQL
Setup	sphinx.cpp	/^bool CSphSource_ODBC::Setup ( const CSphSourceParams_ODBC & tParams )$/;"	f	class:CSphSource_ODBC
Setup	sphinx.cpp	/^bool CSphSource_PgSQL::Setup ( const CSphSourceParams_PgSQL & tParams )$/;"	f	class:CSphSource_PgSQL
Setup	sphinx.cpp	/^bool CSphSource_SQL::Setup ( const CSphSourceParams_SQL & tParams )$/;"	f	class:CSphSource_SQL
Setup	sphinx.cpp	/^bool CSphSource_XMLPipe2::Setup ( FILE * pPipe, const CSphConfigSection & hSource )$/;"	f	class:CSphSource_XMLPipe2
Setup	sphinx.cpp	/^bool CSphSource_XMLPipe::Setup ( FILE * pPipe, const char * sCommand )$/;"	f	class:CSphSource_XMLPipe
Setup	sphinx.cpp	/^bool DiskIndexQwordSetup_c::Setup ( ISphQword * pWord ) const$/;"	f	class:DiskIndexQwordSetup_c
Setup	sphinx.cpp	/^void CSphIndex::Setup ( const CSphIndexSettings & tSettings )$/;"	f	class:CSphIndex
Setup	sphinx.cpp	/^void CSphSource::Setup ( const CSphSourceSettings & tSettings )$/;"	f	class:CSphSource
Setup	sphinx.cpp	/^void ISphTokenizer::Setup ( const CSphTokenizerSettings & tSettings )$/;"	f	class:ISphTokenizer
Setup	sphinxexcerpt.cpp	/^	void Setup ( DWORD uLastPos )$/;"	f	class:SnippetsFastQword_c
Setup	sphinxint.h	/^	virtual void		Setup ( const CSphDictSettings & ) {}$/;"	f	class:CSphDictTraits
Setup	sphinxsort.cpp	/^	static bool Setup ( const CSphSchema & tSchema, CSphMatchComparatorState & tState, CSphString & sError )$/;"	f	struct:MatchCustom_fn
Setup	sphinxsort.cpp	/^bool ExprGeodist_t::Setup ( const CSphQuery * pQuery, const CSphSchema & tSchema, CSphString & sError )$/;"	f	class:ExprGeodist_t
SetupAttr	sphinxsort.cpp	/^	static bool SetupAttr ( const CSphSchema & tSchema, CSphMatchComparatorState & tState, CSphString & sError, int iIdx, const char * sAttr )$/;"	f	struct:MatchCustom_fn
SetupCalc	sphinx.cpp	/^bool CSphQueryContext::SetupCalc ( CSphQueryResult * pResult, const CSphSchema & tInSchema, const CSphSchema & tSchema, const DWORD * pMvaPool )$/;"	f	class:CSphQueryContext
SetupDictionary	sphinx.cpp	/^static CSphDict * SetupDictionary ( CSphDict * pDict, const CSphDictSettings & tSettings, ISphTokenizer * pTokenizer, CSphString & sError, const char * sIndex )$/;"	f	file:
SetupExactDict	searchd.cpp	/^static CSphDict * SetupExactDict ( const CSphIndexSettings & tSettings, const ExcerptQuery_t & q, CSphScopedPtr<CSphDict> & tExact, CSphDict * pDict, ISphTokenizer * pTokenizer )$/;"	f	file:
SetupExactDict	sphinx.cpp	/^CSphDict * CSphIndex_VLN::SetupExactDict ( CSphScopedPtr<CSphDict> & tContainer, CSphDict * pPrevDict, ISphTokenizer & tTokenizer ) const$/;"	f	class:CSphIndex_VLN
SetupGroupbySettings	sphinxsort.cpp	/^static bool SetupGroupbySettings ( const CSphQuery * pQuery, const CSphSchema & tSchema, CSphGroupSorterSettings & tSettings, CSphString & sError )$/;"	f	file:
SetupHits	sphinxexcerpt.cpp	/^void SnippetsDocIndex_c::SetupHits ()$/;"	f	class:SnippetsDocIndex_c
SetupIndexing	testrt.cpp	/^void SetupIndexing ( CSphSource_MySQL * pSrc, const CSphSourceParams_MySQL & tParams )$/;"	f
SetupKillListFilter	searchd.cpp	/^void SetupKillListFilter ( CSphFilterSettings & tFilter, const SphAttr_t * pKillList, int nEntries )$/;"	f
SetupOverrides	sphinx.cpp	/^bool CSphQueryContext::SetupOverrides ( const CSphQuery * pQuery, CSphQueryResult * pResult, const CSphSchema & tIndexSchema )$/;"	f	class:CSphQueryContext
SetupRanges	sphinx.cpp	/^bool CSphSource_SQL::SetupRanges ( const char * sRangeQuery, const char * sQuery, const char * sPrefix, CSphString & sError )$/;"	f	class:CSphSource_SQL
SetupSortStringRemap	sphinxsort.cpp	/^static bool SetupSortStringRemap ( CSphSchema & tSorterSchema, CSphMatchComparatorState & tState, const int * dAttr )$/;"	f	file:
SetupStarDict	sphinx.cpp	/^CSphDict * CSphIndex_VLN::SetupStarDict ( CSphScopedPtr<CSphDict> & tContainer, CSphDict * pPrevDict, ISphTokenizer & tTokenizer ) const$/;"	f	class:CSphIndex_VLN
SetupStripperSPZ	searchd.cpp	/^static bool SetupStripperSPZ ( const CSphIndexSettings & tSettings, const ExcerptQuery_t & q, bool bSetupSPZ, CSphScopedPtr<CSphHTMLStripper> & tStripper, ISphTokenizer * pTokenizer, CSphString & sError )$/;"	f	file:
SetupTLS	searchd.cpp	/^void SphCrashLogger_c::SetupTLS ()$/;"	f	class:SphCrashLogger_c
SetupTimePID	searchd.cpp	/^void SphCrashLogger_c::SetupTimePID ()$/;"	f	class:SphCrashLogger_c
SetupWindow	sphinxexcerpt.cpp	/^bool ExcerptGen_c::SetupWindow ( TokenSpan_t & tSpan, Passage_t & tPass, int i, int iCpLimit, const ExcerptQuery_t & q )$/;"	f	class:ExcerptGen_c
ShiftRing	sphinxsearch.cpp	/^	inline void ShiftRing()$/;"	f	class:FSMmultinear	file:
ShortTokenFilter	sphinx.cpp	/^static inline bool ShortTokenFilter ( BYTE * pToken, int iLen )$/;"	f	file:
ShowHelp	searchd.cpp	/^void ShowHelp ()$/;"	f
ShowProgress	indexer.cpp	/^void ShowProgress ( const CSphIndexProgress * pProgress, bool bPhaseEnd )$/;"	f
ShowProgress	searchd.cpp	/^void ShowProgress ( const CSphIndexProgress * pProgress, bool bPhaseEnd )$/;"	f
Shutdown	searchd.cpp	/^void Shutdown ()$/;"	f
SignCommonSubtrees	sphinxquery.cpp	/^static void SignCommonSubtrees ( XQNode_t * pTree, CSubtreeHash & hSubTrees )$/;"	f	file:
SkipBlended	sphinx.cpp	/^	virtual int						SkipBlended ()													{ assert ( m_pLastToken->m_bBlended || m_pLastToken->m_bBlendedPart ); return m_pTokenizer->SkipBlended(); }$/;"	f	class:CSphTokenizer_Filter
SkipBlended	sphinx.cpp	/^int CSphTokenizerTraits<IS_UTF8>::SkipBlended()$/;"	f	class:CSphTokenizerTraits
SkipBlended	sphinx.h	/^	virtual int						SkipBlended () { return 0; }$/;"	f	class:ISphTokenizer
SkipBytes	sphinx.cpp	/^void CSphReader::SkipBytes ( int iCount )$/;"	f	class:CSphReader
SkipHitsLtDocid	sphinxsearch.cpp	/^static inline void SkipHitsLtDocid ( const ExtHit_t * (*ppHits), SphDocID_t uMatch, ExtNode_i * pNode, const ExtDoc_t * pDocs )$/;"	f	file:
SkipHitsLtePos	sphinxsearch.cpp	/^static inline bool SkipHitsLtePos ( const ExtHit_t * (*ppHits), Hitpos_t uPos, ExtNode_i * pNode, const ExtDoc_t * pDocs )$/;"	f	file:
SkipQuoted	sphinx.cpp	/^const BYTE * SkipQuoted ( const BYTE * p )$/;"	f
SkipSpaces	sphinx.cpp	/^void CSphCharsetDefinitionParser::SkipSpaces ()$/;"	f	class:CSphCharsetDefinitionParser
SkipTag	sphinx.cpp	/^bool CSphSource_XMLPipe::SkipTag ( bool bOpen, CSphString & sError )$/;"	f	class:CSphSource_XMLPipe
SkipTailHits	sphinxsearch.cpp	/^void ExtUnit_c::SkipTailHits ()$/;"	f	class:ExtUnit_c
SkipWhitespace	sphinx.cpp	/^bool CSphSource_XMLPipe::SkipWhitespace ()$/;"	f	class:CSphSource_XMLPipe
SlavoGermanic	sphinxmetaphone.cpp	/^static bool SlavoGermanic ( BYTE * pString )$/;"	f	file:
SmallStringHash_T	sphinxstd.h	/^class SmallStringHash_T : public CSphOrderedHash < T, CSphString, CSphStrHashFunc, 256 > {};$/;"	c
SnippetContext_t	searchd.cpp	/^	SnippetContext_t()$/;"	f	class:SnippetContext_t
SnippetContext_t	searchd.cpp	/^class SnippetContext_t : ISphNoncopyable$/;"	c	file:
SnippetGetCurrentWorker	searchd.cpp	/^static int SnippetGetCurrentWorker ( const int iNumAgent, const int m_iLastAgent, const int m_iLastWorker, const SnippetsRemote_t * m_pWorker )$/;"	f	file:
SnippetQword_Star_t	sphinxexcerpt.cpp	/^struct SnippetQword_Star_t : public SnippetsQword_c<COMPARE>$/;"	s	file:
SnippetReplyParser_t	searchd.cpp	/^	explicit SnippetReplyParser_t ( SnippetsRemote_t * pWorker )$/;"	f	struct:SnippetReplyParser_t
SnippetReplyParser_t	searchd.cpp	/^struct SnippetReplyParser_t : public IReplyParser_t$/;"	s	file:
SnippetRequestBuilder_t	searchd.cpp	/^	explicit SnippetRequestBuilder_t ( const SnippetsRemote_t * pWorker )$/;"	f	struct:SnippetRequestBuilder_t
SnippetRequestBuilder_t	searchd.cpp	/^struct SnippetRequestBuilder_t : public IRequestBuilder_t$/;"	s	file:
SnippetThreadFunc	searchd.cpp	/^void SnippetThreadFunc ( void * pArg )$/;"	f
SnippetThread_t	searchd.cpp	/^	SnippetThread_t()$/;"	f	struct:SnippetThread_t
SnippetThread_t	searchd.cpp	/^struct SnippetThread_t$/;"	s	file:
SnippetTransformPassageMacros	searchd.cpp	/^static bool SnippetTransformPassageMacros ( CSphString & sSrc, CSphString & sPost )$/;"	f	file:
SnippetWorker_t	searchd.cpp	/^	SnippetWorker_t()$/;"	f	struct:SnippetWorker_t
SnippetWorker_t	searchd.cpp	/^struct SnippetWorker_t$/;"	s	file:
SnippetZoneChecker_c	sphinxexcerpt.cpp	/^	SnippetZoneChecker_c ( const CSphVector<ZonePacked_t> & dDocZones, const SmallStringHash_T<int> & hDocNames, const CSphVector<CSphString> & dQueryZones )$/;"	f	class:SnippetZoneChecker_c
SnippetZoneChecker_c	sphinxexcerpt.cpp	/^class SnippetZoneChecker_c : public ISphZoneCheck$/;"	c	file:
SnippetsDocIndex_c	sphinxexcerpt.cpp	/^SnippetsDocIndex_c::SnippetsDocIndex_c ( bool bQueryMode, const XQQuery_t & tQuery )$/;"	f	class:SnippetsDocIndex_c
SnippetsDocIndex_c	sphinxexcerpt.cpp	/^class SnippetsDocIndex_c : public ISphNoncopyable$/;"	c	file:
SnippetsFastQwordSetup_c	sphinxexcerpt.cpp	/^	explicit SnippetsFastQwordSetup_c ( const HitCollector_c * pHiglighter )$/;"	f	class:SnippetsFastQwordSetup_c
SnippetsFastQwordSetup_c	sphinxexcerpt.cpp	/^class SnippetsFastQwordSetup_c : public ISphQwordSetup$/;"	c	file:
SnippetsFastQword_c	sphinxexcerpt.cpp	/^	explicit SnippetsFastQword_c ( const CSphVector<int> * pHits )$/;"	f	class:SnippetsFastQword_c
SnippetsFastQword_c	sphinxexcerpt.cpp	/^class SnippetsFastQword_c : public ISphQword$/;"	c	file:
SnippetsQwordSetup	sphinxexcerpt.cpp	/^	SnippetsQwordSetup ( ExcerptGen_c * pGenerator, ISphTokenizer * pTokenizer )$/;"	f	class:SnippetsQwordSetup
SnippetsQwordSetup	sphinxexcerpt.cpp	/^class SnippetsQwordSetup: public ISphQwordSetup$/;"	c	file:
SnippetsQword_ExactForm_c	sphinxexcerpt.cpp	/^struct SnippetsQword_ExactForm_c : public SnippetsQword_c<SnippetsQword_ExactForm_c>$/;"	s	file:
SnippetsQword_Exact_c	sphinxexcerpt.cpp	/^struct SnippetsQword_Exact_c: public ISnippetsQword$/;"	s	file:
SnippetsQword_StarBack_c	sphinxexcerpt.cpp	/^struct SnippetsQword_StarBack_c : public SnippetQword_Star_t<SnippetsQword_StarBack_c>$/;"	s	file:
SnippetsQword_StarBoth_c	sphinxexcerpt.cpp	/^struct SnippetsQword_StarBoth_c : public SnippetQword_Star_t<SnippetsQword_StarBoth_c>$/;"	s	file:
SnippetsQword_StarFront_c	sphinxexcerpt.cpp	/^struct SnippetsQword_StarFront_c : public SnippetQword_Star_t<SnippetsQword_StarFront_c>$/;"	s	file:
SnippetsQword_c	sphinxexcerpt.cpp	/^template < typename COMPARE > struct SnippetsQword_c: public ISnippetsQword$/;"	s	file:
SnippetsRemote_t	searchd.cpp	/^	explicit SnippetsRemote_t ( CSphVector<ExcerptQuery_t> & dQueries )$/;"	f	struct:SnippetsRemote_t
SnippetsRemote_t	searchd.cpp	/^struct SnippetsRemote_t : ISphNoncopyable$/;"	s	file:
Sort	sphinxsort.cpp	/^	void			Sort ()										{ CSphVector<SphGroupedValue_t>::Sort (); m_bSorted = true; }$/;"	f	class:CSphUniqounter
Sort	sphinxstd.h	/^	template < typename F > void Sort ( F COMP, int iStart=0, int iEnd=-1 )$/;"	f	class:CSphVector
Sort	sphinxstd.h	/^	void Sort ( int iStart=0, int iEnd=-1 )$/;"	f	class:CSphVector
SortClauseTokenizer_t	sphinxsort.cpp	/^	explicit SortClauseTokenizer_t ( const char * sBuffer )$/;"	f	class:SortClauseTokenizer_t
SortClauseTokenizer_t	sphinxsort.cpp	/^class SortClauseTokenizer_t$/;"	c	file:
SortDataAscDesc	tests.cpp	/^void SortDataAscDesc ( DWORD * pData, int iCount )$/;"	f
SortDataDescAsc	tests.cpp	/^void SortDataDescAsc ( DWORD * pData, int iCount )$/;"	f
SortDataEnd0	tests.cpp	/^void SortDataEnd0 ( DWORD * pData, int iCount )$/;"	f
SortDataGenDesc_t	tests.cpp	/^struct SortDataGenDesc_t$/;"	s	file:
SortDataGen_fn	tests.cpp	/^typedef void (*SortDataGen_fn)( DWORD *, int );$/;"	t	file:
SortDataIdentical	tests.cpp	/^void SortDataIdentical ( DWORD * pData, int iCount )$/;"	f
SortDataMed3Killer	tests.cpp	/^void SortDataMed3Killer ( DWORD * pData, int iCount )$/;"	f
SortDataMidKiller	tests.cpp	/^void SortDataMidKiller ( DWORD * pData, int iCount )$/;"	f
SortDataRand01	tests.cpp	/^void SortDataRand01 ( DWORD * pData, int iCount )$/;"	f
SortDataRandDupes	tests.cpp	/^void SortDataRandDupes ( DWORD * pData, int iCount )$/;"	f
SortDataRandSteps	tests.cpp	/^void SortDataRandSteps ( DWORD * pData, int iCount )$/;"	f
SortDataRandUniq	tests.cpp	/^void SortDataRandUniq ( DWORD * pData, int iCount )$/;"	f
SortDataRepeat1245	tests.cpp	/^void SortDataRepeat1245 ( DWORD * pData, int iCount )$/;"	f
SortDataRevEnds	tests.cpp	/^void SortDataRevEnds ( DWORD * pData, int iCount )$/;"	f
SortDataRevPartial	tests.cpp	/^void SortDataRevPartial ( DWORD * pData, int iCount )$/;"	f
SortDataRevSaw	tests.cpp	/^void SortDataRevSaw ( DWORD * pData, int iCount )$/;"	f
SortDataReverse	tests.cpp	/^void SortDataReverse ( DWORD * pData, int iCount )$/;"	f
SortDataSeq	tests.cpp	/^void SortDataSeq ( DWORD * pData, int iCount )$/;"	f
SortDataSeqPartial	tests.cpp	/^void SortDataSeqPartial ( DWORD * pData, int iCount )$/;"	f
SortDataSeqSaw	tests.cpp	/^void SortDataSeqSaw ( DWORD * pData, int iCount )$/;"	f
SortDataStart1000	tests.cpp	/^void SortDataStart1000 ( DWORD * pData, int iCount )$/;"	f
SortGroups	sphinxsort.cpp	/^	void SortGroups ()$/;"	f	class:CSphKBufferGroupSorter
SortOrdinalIds	sphinx.cpp	/^bool CSphIndex_VLN::SortOrdinalIds ( const char * szToFile, int iFromFD, int iArenaSize, CSphVector < CSphVector < SphOffset_t > > & dOrdBlockSize, bool bWarnOfMem )$/;"	f	class:CSphIndex_VLN
SortOrdinals	sphinx.cpp	/^bool CSphIndex_VLN::SortOrdinals ( const char * szToFile, int iFromFD, int iArenaSize, int iOrdinalsInPool, CSphVector < CSphVector < SphOffset_t > > & dOrdBlockSize, bool bWarnOfMem )$/;"	f	class:CSphIndex_VLN
SortPayload_t	tests.cpp	/^struct SortPayload_t$/;"	s	file:
SpawnSource	indexer.cpp	/^CSphSource * SpawnSource ( const CSphConfigSection & hSource, const char * sSourceName, bool bUTF8, bool bWordDict )$/;"	f
SpawnSource	testrt.cpp	/^CSphSource * SpawnSource ( const char * sQuery, ISphTokenizer * pTok, CSphDict * pDict )$/;"	f
SpawnSourceMSSQL	indexer.cpp	/^CSphSource * SpawnSourceMSSQL ( const CSphConfigSection & hSource, const char * sSourceName )$/;"	f
SpawnSourceMySQL	indexer.cpp	/^CSphSource * SpawnSourceMySQL ( const CSphConfigSection & hSource, const char * sSourceName )$/;"	f
SpawnSourceODBC	indexer.cpp	/^CSphSource * SpawnSourceODBC ( const CSphConfigSection & hSource, const char * sSourceName )$/;"	f
SpawnSourcePgSQL	indexer.cpp	/^CSphSource * SpawnSourcePgSQL ( const CSphConfigSection & hSource, const char * sSourceName )$/;"	f
SpawnSourceXMLPipe	indexer.cpp	/^CSphSource * SpawnSourceXMLPipe ( const CSphConfigSection & hSource, const char * sSourceName, bool bUTF8 )$/;"	f
Special2Simple	sphinx.cpp	/^static inline bool Special2Simple ( int & iCodepoint )$/;"	f	file:
SphAccessor_T	sphinxstd.h	/^struct SphAccessor_T$/;"	s
SphAttr_t	sphinx.h	/^typedef int64_t			SphAttr_t;$/;"	t
SphCrashLogger_c	searchd.cpp	/^	SphCrashLogger_c () {}$/;"	f	class:SphCrashLogger_c
SphCrashLogger_c	searchd.cpp	/^class SphCrashLogger_c$/;"	c	file:
SphDieCallback_t	sphinxstd.h	/^typedef			bool ( *SphDieCallback_t ) ( const char * );$/;"	t
SphDocID_t	sphinx.h	/^typedef DWORD			SphDocID_t;$/;"	t
SphDocID_t	sphinx.h	/^typedef uint64_t		SphDocID_t;$/;"	t
SphDocRandomizer_c	tests.cpp	/^	explicit SphDocRandomizer_c ( const CSphSchema & tSchema ) : CSphSource_Document ( "test_doc" )$/;"	f	class:SphDocRandomizer_c
SphDocRandomizer_c	tests.cpp	/^class SphDocRandomizer_c : public CSphSource_Document$/;"	c	file:
SphGreater_T	sphinxstd.h	/^struct SphGreater_T$/;"	s
SphGroupKey_t	sphinxsort.cpp	/^typedef int64_t				SphGroupKey_t;$/;"	t	file:
SphGroupedValue_t	sphinxsort.cpp	/^	SphGroupedValue_t ( SphGroupKey_t uGroup, SphAttr_t uValue, int iCount )$/;"	f	struct:SphGroupedValue_t
SphGroupedValue_t	sphinxsort.cpp	/^	SphGroupedValue_t ()$/;"	f	struct:SphGroupedValue_t
SphGroupedValue_t	sphinxsort.cpp	/^struct SphGroupedValue_t$/;"	s	file:
SphHitMark_t	sphinxsearch.h	/^struct SphHitMark_t$/;"	s
SphIdentityFunctor_T	sphinxstd.h	/^struct SphIdentityFunctor_T$/;"	s
SphLess_T	sphinxstd.h	/^struct SphLess_T$/;"	s
SphLogger_fn	sphinxutils.h	/^typedef void ( *SphLogger_fn )( ESphLogLevel, const char *, va_list );$/;"	t
SphMemberFunctor_T	sphinxstd.h	/^	explicit			SphMemberFunctor_T ( T CLASS::* pMember )	: m_pMember ( pMember ) {}$/;"	f	struct:SphMemberFunctor_T
SphMemberFunctor_T	sphinxstd.h	/^struct SphMemberFunctor_T$/;"	s
SphMemberLess_T	sphinxstd.h	/^	explicit SphMemberLess_T ( T C::* pMember )$/;"	f	struct:SphMemberLess_T
SphMemberLess_T	sphinxstd.h	/^struct SphMemberLess_T$/;"	s
SphOffset_t	sphinx.h	/^typedef __int64				SphOffset_t;$/;"	t
SphOffset_t	sphinx.h	/^typedef off_t				SphOffset_t;$/;"	t
SphRange_t	sphinx.h	/^struct SphRange_t$/;"	s
SphStringCmp_fn	sphinx.h	/^typedef int ( *SphStringCmp_fn )( const BYTE * pStr1, const BYTE * pStr2 );$/;"	t
SphStringSorterRemap_t	sphinxint.h	/^struct SphStringSorterRemap_t$/;"	s
SphTestDoc_c	tests.cpp	/^	explicit SphTestDoc_c ( const CSphSchema & tSchema ) : CSphSource_Document ( "test_doc" )$/;"	f	class:SphTestDoc_c
SphTestDoc_c	tests.cpp	/^class SphTestDoc_c : public CSphSource_Document$/;"	c	file:
SphThreadKey_t	sphinxstd.h	/^typedef DWORD SphThreadKey_t;$/;"	t
SphThreadKey_t	sphinxstd.h	/^typedef pthread_key_t SphThreadKey_t;$/;"	t
SphThread_t	sphinxstd.h	/^typedef HANDLE SphThread_t;$/;"	t
SphThread_t	sphinxstd.h	/^typedef pthread_t SphThread_t;$/;"	t
SphWordID_t	sphinx.h	/^typedef DWORD			SphWordID_t;$/;"	t
SphWordID_t	sphinx.h	/^typedef uint64_t		SphWordID_t;$/;"	t
SphZoneHit_e	sphinxint.h	/^enum SphZoneHit_e$/;"	g
SphinxqlReplyParser_t	searchd.cpp	/^	explicit SphinxqlReplyParser_t ( int * pUpd, int * pWarns )$/;"	f	struct:SphinxqlReplyParser_t
SphinxqlReplyParser_t	searchd.cpp	/^struct SphinxqlReplyParser_t : public IReplyParser_t$/;"	s	file:
SphinxqlRequestBuilder_t	searchd.cpp	/^	explicit SphinxqlRequestBuilder_t ( const CSphString sQuery, const SqlStmt_t & tStmt )$/;"	f	struct:SphinxqlRequestBuilder_t
SphinxqlRequestBuilder_t	searchd.cpp	/^struct SphinxqlRequestBuilder_t : public IRequestBuilder_t$/;"	s	file:
SqlAttrsConfigure	indexer.cpp	/^void SqlAttrsConfigure ( CSphSourceParams_SQL & tParams, const CSphVariant * pHead, ESphAttr eAttrType, const char * sSourceName, bool bIndexedAttr=false )$/;"	f
SqlColumn	sphinx.cpp	/^const char * CSphSource_MySQL::SqlColumn ( int iIndex )$/;"	f	class:CSphSource_MySQL
SqlColumn	sphinx.cpp	/^const char * CSphSource_ODBC::SqlColumn ( int iIndex )$/;"	f	class:CSphSource_ODBC
SqlColumn	sphinx.cpp	/^const char * CSphSource_PgSQL::SqlColumn ( int iIndex )$/;"	f	class:CSphSource_PgSQL
SqlColumnLength	sphinx.cpp	/^DWORD CSphSource_MySQL::SqlColumnLength ( int iIndex )$/;"	f	class:CSphSource_MySQL
SqlColumnLength	sphinx.cpp	/^DWORD CSphSource_ODBC::SqlColumnLength ( int )$/;"	f	class:CSphSource_ODBC
SqlColumnLength	sphinx.cpp	/^DWORD CSphSource_PgSQL::SqlColumnLength ( int )$/;"	f	class:CSphSource_PgSQL
SqlConnect	sphinx.cpp	/^bool CSphSource_MySQL::SqlConnect ()$/;"	f	class:CSphSource_MySQL
SqlConnect	sphinx.cpp	/^bool CSphSource_ODBC::SqlConnect ()$/;"	f	class:CSphSource_ODBC
SqlConnect	sphinx.cpp	/^bool CSphSource_PgSQL::SqlConnect ()$/;"	f	class:CSphSource_PgSQL
SqlDisconnect	sphinx.cpp	/^void CSphSource_MySQL::SqlDisconnect ()$/;"	f	class:CSphSource_MySQL
SqlDisconnect	sphinx.cpp	/^void CSphSource_ODBC::SqlDisconnect ()$/;"	f	class:CSphSource_ODBC
SqlDisconnect	sphinx.cpp	/^void CSphSource_PgSQL::SqlDisconnect ()$/;"	f	class:CSphSource_PgSQL
SqlDismissResult	sphinx.cpp	/^void CSphSource_MySQL::SqlDismissResult ()$/;"	f	class:CSphSource_MySQL
SqlDismissResult	sphinx.cpp	/^void CSphSource_ODBC::SqlDismissResult ()$/;"	f	class:CSphSource_ODBC
SqlDismissResult	sphinx.cpp	/^void CSphSource_PgSQL::SqlDismissResult ()$/;"	f	class:CSphSource_PgSQL
SqlError	sphinx.cpp	/^const char * CSphSource_MySQL::SqlError ()$/;"	f	class:CSphSource_MySQL
SqlError	sphinx.cpp	/^const char * CSphSource_ODBC::SqlError ()$/;"	f	class:CSphSource_ODBC
SqlError	sphinx.cpp	/^const char * CSphSource_PgSQL::SqlError ()$/;"	f	class:CSphSource_PgSQL
SqlFetchRow	sphinx.cpp	/^bool CSphSource_MySQL::SqlFetchRow ()$/;"	f	class:CSphSource_MySQL
SqlFetchRow	sphinx.cpp	/^bool CSphSource_ODBC::SqlFetchRow ()$/;"	f	class:CSphSource_ODBC
SqlFetchRow	sphinx.cpp	/^bool CSphSource_PgSQL::SqlFetchRow ()$/;"	f	class:CSphSource_PgSQL
SqlFieldName	sphinx.cpp	/^const char * CSphSource_MySQL::SqlFieldName ( int iIndex )$/;"	f	class:CSphSource_MySQL
SqlFieldName	sphinx.cpp	/^const char * CSphSource_ODBC::SqlFieldName ( int iIndex )$/;"	f	class:CSphSource_ODBC
SqlFieldName	sphinx.cpp	/^const char * CSphSource_PgSQL::SqlFieldName ( int iIndex )$/;"	f	class:CSphSource_PgSQL
SqlInsert_t	searchd.cpp	/^	SqlInsert_t ()$/;"	f	struct:SqlInsert_t
SqlInsert_t	searchd.cpp	/^struct SqlInsert_t$/;"	s	file:
SqlIsError	sphinx.cpp	/^bool CSphSource_MySQL::SqlIsError ()$/;"	f	class:CSphSource_MySQL
SqlIsError	sphinx.cpp	/^bool CSphSource_ODBC::SqlIsError ()$/;"	f	class:CSphSource_ODBC
SqlIsError	sphinx.cpp	/^bool CSphSource_PgSQL::SqlIsError ()$/;"	f	class:CSphSource_PgSQL
SqlNode_t	searchd.cpp	/^	SqlNode_t()$/;"	f	struct:SqlNode_t
SqlNode_t	searchd.cpp	/^struct SqlNode_t$/;"	s	file:
SqlNumFields	sphinx.cpp	/^int CSphSource_MySQL::SqlNumFields ()$/;"	f	class:CSphSource_MySQL
SqlNumFields	sphinx.cpp	/^int CSphSource_ODBC::SqlNumFields ()$/;"	f	class:CSphSource_ODBC
SqlNumFields	sphinx.cpp	/^int CSphSource_PgSQL::SqlNumFields ()$/;"	f	class:CSphSource_PgSQL
SqlParamsConfigure	indexer.cpp	/^bool SqlParamsConfigure ( CSphSourceParams_SQL & tParams, const CSphConfigSection & hSource, const char * sSourceName )$/;"	f
SqlParser_c	searchd.cpp	/^SqlParser_c::SqlParser_c ( CSphVector<SqlStmt_t> & dStmt, ESphCollation eCollation )$/;"	f	class:SqlParser_c
SqlParser_c	searchd.cpp	/^struct SqlParser_c : ISphNoncopyable$/;"	s	file:
SqlQuery	sphinx.cpp	/^bool CSphSource_MySQL::SqlQuery ( const char * sQuery )$/;"	f	class:CSphSource_MySQL
SqlQuery	sphinx.cpp	/^bool CSphSource_ODBC::SqlQuery ( const char * sQuery )$/;"	f	class:CSphSource_ODBC
SqlQuery	sphinx.cpp	/^bool CSphSource_PgSQL::SqlQuery ( const char * sQuery )$/;"	f	class:CSphSource_PgSQL
SqlRowBuffer_c	searchd.cpp	/^	SqlRowBuffer_c ()$/;"	f	class:SqlRowBuffer_c
SqlRowBuffer_c	searchd.cpp	/^class SqlRowBuffer_c$/;"	c	file:
SqlSet_e	searchd.cpp	/^enum SqlSet_e$/;"	g	file:
SqlStmt_e	searchd.cpp	/^enum SqlStmt_e$/;"	g	file:
SqlStmt_t	searchd.cpp	/^	SqlStmt_t ()$/;"	f	struct:SqlStmt_t
SqlStmt_t	searchd.cpp	/^struct SqlStmt_t$/;"	s	file:
SqlUnescape	sphinxint.h	/^inline void SqlUnescape ( CSphString & sRes, const char * sEscaped, int iLen )$/;"	f
SqlUnpackColumn	sphinx.cpp	/^const char * CSphSource_SQL::SqlUnpackColumn ( int iFieldIndex, ESphUnpackFormat )$/;"	f	class:CSphSource_SQL
SqlUnpackColumn	sphinx.cpp	/^const char * CSphSource_SQL::SqlUnpackColumn ( int iFieldIndex, ESphUnpackFormat eFormat )$/;"	f	class:CSphSource_SQL
Start	sphinx.cpp	/^	void Start ()$/;"	f	struct:CSphTimer
Start	sphinx.cpp	/^void CSphIOStats::Start()$/;"	f	class:CSphIOStats
StartElement	sphinx.cpp	/^void CSphSource_XMLPipe2::StartElement ( const char * szName, const char ** pAttrs )$/;"	f	class:CSphSource_XMLPipe2
StatCountCommand	searchd.cpp	/^void StatCountCommand ( int iCmd, int iCount )$/;"	f
State_t	sphinxsearch.cpp	/^	struct State_t$/;"	s	class:FSMphrase	file:
StaticThreadsOnlyMutex_t	searchd.cpp	/^StaticThreadsOnlyMutex_t::StaticThreadsOnlyMutex_t ()$/;"	f	class:StaticThreadsOnlyMutex_t
StaticThreadsOnlyMutex_t	searchd.cpp	/^struct StaticThreadsOnlyMutex_t$/;"	s	file:
StemById	sphinx.cpp	/^bool CSphDictCRCTraits::StemById ( BYTE * pWord, int iStemmer )$/;"	f	class:CSphDictCRCTraits
StepForwardToHitsFor	sphinxsearch.cpp	/^void ExtNodeCached_t::StepForwardToHitsFor ( SphDocID_t uDocId )$/;"	f	class:ExtNodeCached_t
Stop	sphinx.cpp	/^	void Stop ()$/;"	f	struct:CSphTimer
Stop	sphinx.cpp	/^void CSphIOStats::Stop()$/;"	f	class:CSphIOStats
StoredToken_t	sphinx.cpp	/^	struct StoredToken_t$/;"	s	class:CSphTokenizer_Filter	file:
StrAt	sphinxmetaphone.cpp	/^static bool StrAt ( const CurrentWord_t & Word, int iStart, int iLength, const char * szStr1 )$/;"	f	file:
StrAt	sphinxmetaphone.cpp	/^static bool StrAt ( const CurrentWord_t & Word, int iStart, int iLength, const char * szStr1, const char * szStr2 )$/;"	f	file:
StrAt	sphinxmetaphone.cpp	/^static bool StrAt ( const CurrentWord_t & Word, int iStart, int iLength, const char * szStr1, const char * szStr2, const char * szStr3 )$/;"	f	file:
StrAt	sphinxmetaphone.cpp	/^static bool StrAt ( const CurrentWord_t & Word, int iStart, int iLength, const char * szStr1, const char * szStr2, const char * szStr3, const char * szStr4 )$/;"	f	file:
StrAt	sphinxmetaphone.cpp	/^static bool StrAt ( const CurrentWord_t & Word, int iStart, int iLength, const char * szStr1, const char * szStr2, const char * szStr3, const char * szStr4, const char * szStr5 )$/;"	f	file:
StringEval	sphinxexpr.cpp	/^	virtual int StringEval ( const CSphMatch & tMatch, const BYTE ** ppStr ) const$/;"	f	struct:Expr_GetString_c
StringEval	sphinxexpr.cpp	/^	virtual int StringEval ( const CSphMatch &, const BYTE ** ppStr ) const$/;"	f	struct:Expr_GetStrConst_c
StringEval	sphinxexpr.h	/^	virtual int StringEval ( const CSphMatch &, const BYTE ** ppStr ) const { *ppStr = NULL; return 0; }$/;"	f	struct:ISphExpr
Strip	spelldump.cpp	/^void CISpellAffix::Strip ( char * szText )$/;"	f	class:CISpellAffix
Strip	sphinx.cpp	/^void CSphHTMLStripper::Strip ( BYTE * sData ) const$/;"	f	class:CSphHTMLStripper
StripAppendPrefix	spelldump.cpp	/^bool CISpellAffixRule::StripAppendPrefix ( CSphString & sWord ) const$/;"	f	class:CISpellAffixRule
StripAppendSuffix	spelldump.cpp	/^bool CISpellAffixRule::StripAppendSuffix ( CSphString & sWord ) const$/;"	f	class:CISpellAffixRule
StripPath	sphinxint.h	/^inline void StripPath ( CSphString & sPath )$/;"	f
StripStdin	indextool.cpp	/^void StripStdin ( const char * sIndexAttrs, const char * sRemoveElements )$/;"	f
StripperTag_t	sphinx.h	/^		StripperTag_t ()$/;"	f	struct:CSphHTMLStripper::StripperTag_t
StripperTag_t	sphinx.h	/^	struct StripperTag_t$/;"	s	class:CSphHTMLStripper
Sub	sphinx.cpp	/^	int Sub ( DWORD * b, DWORD * a ) const$/;"	f	struct:DocinfoSort_fn
Sub	sphinxstd.h	/^	int Sub ( T * b, T * a ) const$/;"	f	struct:SphAccessor_T
Sub	tests.cpp	/^	int Sub ( DWORD * b, DWORD * a ) const$/;"	f	struct:TestAccCmp_fn
SubString	sphinxstd.h	/^	CSphString SubString ( int iStart, int iCount ) const$/;"	f	struct:CSphString
Submit	searchd.cpp	/^	void Submit ( const char * sIndex, const char * sError )$/;"	f	class:SearchFailuresLog_c
SubmitEx	searchd.cpp	/^	void SubmitEx ( const char * sIndex, const char * sTemplate, ... ) __attribute__ ( ( format ( printf, 3, 4 ) ) )$/;"	f	class:SearchFailuresLog_c
Swap	searchd.cpp	/^	void Swap ( CSphMatch * a, CSphMatch * b ) const$/;"	f	struct:TaggedMatchSorter_fn
Swap	sphinx.cpp	/^	void Swap ( DWORD * a, DWORD * b ) const$/;"	f	struct:DocinfoSort_fn
Swap	sphinx.cpp	/^void Swap ( CSphNamedInt & a, CSphNamedInt & b )$/;"	f
Swap	sphinx.cpp	/^void Swap ( OrdinalEntry_t & a, OrdinalEntry_t & b )$/;"	f
Swap	sphinx.cpp	/^void Swap ( Ordinal_t & a, Ordinal_t & b )$/;"	f
Swap	sphinx.h	/^inline void Swap ( CSphMatch & a, CSphMatch & b )$/;"	f
Swap	sphinxsort.cpp	/^	void Swap ( CSphMatch * a, CSphMatch * b ) const$/;"	f	struct:GroupSorter_fn
Swap	sphinxstd.h	/^	void Swap ( CSphString & rhs )$/;"	f	struct:CSphString
Swap	sphinxstd.h	/^	void Swap ( T * a, T * b ) const$/;"	f	struct:SphAccessor_T
Swap	sphinxstd.h	/^inline void Swap ( CSphString & v1, CSphString & v2 )$/;"	f
Swap	sphinxstd.h	/^template < typename T > inline void Swap ( T & v1, T & v2 )$/;"	f
Swap	tests.cpp	/^	void Swap ( DWORD * a, DWORD * b ) const$/;"	f	struct:TestAccCmp_fn
SwapData	sphinxstd.h	/^	void SwapData ( CSphVector<T, POLICY> & rhs )$/;"	f	class:CSphVector
SweepNulls	sphinxquery.cpp	/^XQNode_t * XQParser_t::SweepNulls ( XQNode_t * pNode )$/;"	f	class:XQParser_t
SweepWordformContainers	sphinx.cpp	/^void CSphDictCRCTraits::SweepWordformContainers ( const char * szFile, DWORD uCRC32 )$/;"	f	class:CSphDictCRCTraits
SynCheckPrefix	sphinx.cpp	/^static inline SynCheck_e SynCheckPrefix ( const CSphSynonym & tCandidate, int iOff, const BYTE * sCur, int iBytes, bool bMaybeSeparator )$/;"	f	file:
SynCheck_e	sphinx.cpp	/^enum SynCheck_e$/;"	g	file:
T	sphinxstemru.cpp	/^		T	= 0x82D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
T	sphinxstemru.cpp	/^		T	= 0xD182U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
T	sphinxstemru.cpp	/^		T	= 0xF2,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
T1	md5.cpp	65;"	d	file:
T10	md5.cpp	74;"	d	file:
T11	md5.cpp	75;"	d	file:
T12	md5.cpp	76;"	d	file:
T13	md5.cpp	77;"	d	file:
T14	md5.cpp	78;"	d	file:
T15	md5.cpp	79;"	d	file:
T16	md5.cpp	80;"	d	file:
T17	md5.cpp	81;"	d	file:
T18	md5.cpp	82;"	d	file:
T19	md5.cpp	83;"	d	file:
T2	md5.cpp	66;"	d	file:
T20	md5.cpp	84;"	d	file:
T21	md5.cpp	85;"	d	file:
T22	md5.cpp	86;"	d	file:
T23	md5.cpp	87;"	d	file:
T24	md5.cpp	88;"	d	file:
T25	md5.cpp	89;"	d	file:
T26	md5.cpp	90;"	d	file:
T27	md5.cpp	91;"	d	file:
T28	md5.cpp	92;"	d	file:
T29	md5.cpp	93;"	d	file:
T3	md5.cpp	67;"	d	file:
T30	md5.cpp	94;"	d	file:
T31	md5.cpp	95;"	d	file:
T32	md5.cpp	96;"	d	file:
T33	md5.cpp	97;"	d	file:
T34	md5.cpp	98;"	d	file:
T35	md5.cpp	99;"	d	file:
T36	md5.cpp	100;"	d	file:
T37	md5.cpp	101;"	d	file:
T38	md5.cpp	102;"	d	file:
T39	md5.cpp	103;"	d	file:
T4	md5.cpp	68;"	d	file:
T40	md5.cpp	104;"	d	file:
T41	md5.cpp	105;"	d	file:
T42	md5.cpp	106;"	d	file:
T43	md5.cpp	107;"	d	file:
T44	md5.cpp	108;"	d	file:
T45	md5.cpp	109;"	d	file:
T46	md5.cpp	110;"	d	file:
T47	md5.cpp	111;"	d	file:
T48	md5.cpp	112;"	d	file:
T49	md5.cpp	113;"	d	file:
T5	md5.cpp	69;"	d	file:
T50	md5.cpp	114;"	d	file:
T51	md5.cpp	115;"	d	file:
T52	md5.cpp	116;"	d	file:
T53	md5.cpp	117;"	d	file:
T54	md5.cpp	118;"	d	file:
T55	md5.cpp	119;"	d	file:
T56	md5.cpp	120;"	d	file:
T57	md5.cpp	121;"	d	file:
T58	md5.cpp	122;"	d	file:
T59	md5.cpp	123;"	d	file:
T6	md5.cpp	70;"	d	file:
T60	md5.cpp	124;"	d	file:
T61	md5.cpp	125;"	d	file:
T62	md5.cpp	126;"	d	file:
T63	md5.cpp	127;"	d	file:
T64	md5.cpp	128;"	d	file:
T7	md5.cpp	71;"	d	file:
T8	md5.cpp	72;"	d	file:
T9	md5.cpp	73;"	d	file:
TAG_BODY	sphinx.h	/^		TAG_BODY$/;"	e	enum:CSphSource_XMLPipe::Tag_e
TAG_DOCUMENT	sphinx.h	/^		TAG_DOCUMENT = 0,$/;"	e	enum:CSphSource_XMLPipe::Tag_e
TAG_GROUP	sphinx.h	/^		TAG_GROUP,$/;"	e	enum:CSphSource_XMLPipe::Tag_e
TAG_ID	sphinx.h	/^		TAG_ID,$/;"	e	enum:CSphSource_XMLPipe::Tag_e
TAG_TITLE	sphinx.h	/^		TAG_TITLE,$/;"	e	enum:CSphSource_XMLPipe::Tag_e
TERM_POS_FIELD_END	sphinxsearch.h	/^	TERM_POS_FIELD_END,$/;"	e	enum:TermPosFilter_e
TERM_POS_FIELD_LIMIT	sphinxsearch.h	/^	TERM_POS_FIELD_LIMIT = 1,$/;"	e	enum:TermPosFilter_e
TERM_POS_FIELD_START	sphinxsearch.h	/^	TERM_POS_FIELD_START,$/;"	e	enum:TermPosFilter_e
TERM_POS_FIELD_STARTEND	sphinxsearch.h	/^	TERM_POS_FIELD_STARTEND,$/;"	e	enum:TermPosFilter_e
TERM_POS_ZONES	sphinxsearch.h	/^	TERM_POS_ZONES$/;"	e	enum:TermPosFilter_e
THD_HANDSHAKE	searchd.cpp	/^	THD_HANDSHAKE,$/;"	e	enum:ThdState_e	file:
THD_NET_READ	searchd.cpp	/^	THD_NET_READ,$/;"	e	enum:ThdState_e	file:
THD_NET_WRITE	searchd.cpp	/^	THD_NET_WRITE,$/;"	e	enum:ThdState_e	file:
THD_QUERY	searchd.cpp	/^	THD_QUERY,$/;"	e	enum:ThdState_e	file:
THD_STATE	searchd.cpp	9786;"	d	file:
THD_STATE_TOTAL	searchd.cpp	/^	THD_STATE_TOTAL$/;"	e	enum:ThdState_e	file:
THIRD	sphinxexpr.cpp	384;"	d	file:
TIMERS_TOTAL	sphinx.cpp	/^	TIMERS_TOTAL$/;"	e	enum:ESphTimer	file:
TIMER_root	sphinx.cpp	/^	TIMER_root = 0,$/;"	e	enum:ESphTimer	file:
TOKENIZER_NGRAM	sphinxutils.h	/^	TOKENIZER_NGRAM	= 3$/;"	e	enum:__anon6
TOKENIZER_SBCS	sphinxutils.h	/^	TOKENIZER_SBCS		= 1,$/;"	e	enum:__anon6
TOKENIZER_UTF8	sphinxutils.h	/^	TOKENIZER_UTF8		= 2,$/;"	e	enum:__anon6
TOK_AND	yysphinxexpr.c	/^     TOK_AND = 282,$/;"	e	enum:yytokentype	file:
TOK_AND	yysphinxexpr.c	115;"	d	file:
TOK_AND	yysphinxexpr.h	/^     TOK_AND = 282,$/;"	e	enum:yytokentype
TOK_AND	yysphinxexpr.h	91;"	d
TOK_AND	yysphinxql.c	/^     TOK_AND = 341,$/;"	e	enum:yytokentype	file:
TOK_AND	yysphinxql.c	230;"	d	file:
TOK_AND	yysphinxql.h	/^     TOK_AND = 341,$/;"	e	enum:yytokentype
TOK_AND	yysphinxql.h	206;"	d
TOK_AND	yysphinxselect.c	/^     TOK_AND = 277,$/;"	e	enum:yytokentype	file:
TOK_AND	yysphinxselect.c	98;"	d	file:
TOK_AND	yysphinxselect.h	/^     TOK_AND = 277,$/;"	e	enum:yytokentype
TOK_AND	yysphinxselect.h	74;"	d
TOK_AS	yysphinxql.c	/^     TOK_AS = 268,$/;"	e	enum:yytokentype	file:
TOK_AS	yysphinxql.c	157;"	d	file:
TOK_AS	yysphinxql.h	/^     TOK_AS = 268,$/;"	e	enum:yytokentype
TOK_AS	yysphinxql.h	133;"	d
TOK_ASC	yysphinxql.c	/^     TOK_ASC = 269,$/;"	e	enum:yytokentype	file:
TOK_ASC	yysphinxql.c	158;"	d	file:
TOK_ASC	yysphinxql.h	/^     TOK_ASC = 269,$/;"	e	enum:yytokentype
TOK_ASC	yysphinxql.h	134;"	d
TOK_ATID	yysphinxexpr.c	/^     TOK_ATID = 273,$/;"	e	enum:yytokentype	file:
TOK_ATID	yysphinxexpr.c	106;"	d	file:
TOK_ATID	yysphinxexpr.h	/^     TOK_ATID = 273,$/;"	e	enum:yytokentype
TOK_ATID	yysphinxexpr.h	82;"	d
TOK_ATIDENT	yysphinxql.c	/^     TOK_ATIDENT = 259,$/;"	e	enum:yytokentype	file:
TOK_ATIDENT	yysphinxql.c	148;"	d	file:
TOK_ATIDENT	yysphinxql.h	/^     TOK_ATIDENT = 259,$/;"	e	enum:yytokentype
TOK_ATIDENT	yysphinxql.h	124;"	d
TOK_ATTACH	yysphinxql.c	/^     TOK_ATTACH = 270,$/;"	e	enum:yytokentype	file:
TOK_ATTACH	yysphinxql.c	159;"	d	file:
TOK_ATTACH	yysphinxql.h	/^     TOK_ATTACH = 270,$/;"	e	enum:yytokentype
TOK_ATTACH	yysphinxql.h	135;"	d
TOK_ATTR_BITS	yysphinxexpr.c	/^     TOK_ATTR_BITS = 262,$/;"	e	enum:yytokentype	file:
TOK_ATTR_BITS	yysphinxexpr.c	95;"	d	file:
TOK_ATTR_BITS	yysphinxexpr.h	/^     TOK_ATTR_BITS = 262,$/;"	e	enum:yytokentype
TOK_ATTR_BITS	yysphinxexpr.h	71;"	d
TOK_ATTR_FLOAT	yysphinxexpr.c	/^     TOK_ATTR_FLOAT = 263,$/;"	e	enum:yytokentype	file:
TOK_ATTR_FLOAT	yysphinxexpr.c	96;"	d	file:
TOK_ATTR_FLOAT	yysphinxexpr.h	/^     TOK_ATTR_FLOAT = 263,$/;"	e	enum:yytokentype
TOK_ATTR_FLOAT	yysphinxexpr.h	72;"	d
TOK_ATTR_INT	yysphinxexpr.c	/^     TOK_ATTR_INT = 261,$/;"	e	enum:yytokentype	file:
TOK_ATTR_INT	yysphinxexpr.c	94;"	d	file:
TOK_ATTR_INT	yysphinxexpr.h	/^     TOK_ATTR_INT = 261,$/;"	e	enum:yytokentype
TOK_ATTR_INT	yysphinxexpr.h	70;"	d
TOK_ATTR_MVA32	yysphinxexpr.c	/^     TOK_ATTR_MVA32 = 264,$/;"	e	enum:yytokentype	file:
TOK_ATTR_MVA32	yysphinxexpr.c	97;"	d	file:
TOK_ATTR_MVA32	yysphinxexpr.h	/^     TOK_ATTR_MVA32 = 264,$/;"	e	enum:yytokentype
TOK_ATTR_MVA32	yysphinxexpr.h	73;"	d
TOK_ATTR_MVA64	yysphinxexpr.c	/^     TOK_ATTR_MVA64 = 265,$/;"	e	enum:yytokentype	file:
TOK_ATTR_MVA64	yysphinxexpr.c	98;"	d	file:
TOK_ATTR_MVA64	yysphinxexpr.h	/^     TOK_ATTR_MVA64 = 265,$/;"	e	enum:yytokentype
TOK_ATTR_MVA64	yysphinxexpr.h	74;"	d
TOK_ATTR_SINT	yysphinxexpr.c	/^     TOK_ATTR_SINT = 280,$/;"	e	enum:yytokentype	file:
TOK_ATTR_SINT	yysphinxexpr.c	113;"	d	file:
TOK_ATTR_SINT	yysphinxexpr.h	/^     TOK_ATTR_SINT = 280,$/;"	e	enum:yytokentype
TOK_ATTR_SINT	yysphinxexpr.h	89;"	d
TOK_ATTR_STRING	yysphinxexpr.c	/^     TOK_ATTR_STRING = 266,$/;"	e	enum:yytokentype	file:
TOK_ATTR_STRING	yysphinxexpr.c	99;"	d	file:
TOK_ATTR_STRING	yysphinxexpr.h	/^     TOK_ATTR_STRING = 266,$/;"	e	enum:yytokentype
TOK_ATTR_STRING	yysphinxexpr.h	75;"	d
TOK_ATWEIGHT	yysphinxexpr.c	/^     TOK_ATWEIGHT = 274,$/;"	e	enum:yytokentype	file:
TOK_ATWEIGHT	yysphinxexpr.c	107;"	d	file:
TOK_ATWEIGHT	yysphinxexpr.h	/^     TOK_ATWEIGHT = 274,$/;"	e	enum:yytokentype
TOK_ATWEIGHT	yysphinxexpr.h	83;"	d
TOK_AVG	yysphinxql.c	/^     TOK_AVG = 271,$/;"	e	enum:yytokentype	file:
TOK_AVG	yysphinxql.c	160;"	d	file:
TOK_AVG	yysphinxql.h	/^     TOK_AVG = 271,$/;"	e	enum:yytokentype
TOK_AVG	yysphinxql.h	136;"	d
TOK_BAD_NUMERIC	yysphinxql.c	/^     TOK_BAD_NUMERIC = 267,$/;"	e	enum:yytokentype	file:
TOK_BAD_NUMERIC	yysphinxql.c	156;"	d	file:
TOK_BAD_NUMERIC	yysphinxql.h	/^     TOK_BAD_NUMERIC = 267,$/;"	e	enum:yytokentype
TOK_BAD_NUMERIC	yysphinxql.h	132;"	d
TOK_BEFORE	yysphinxquery.c	/^     TOK_BEFORE = 263,$/;"	e	enum:yytokentype	file:
TOK_BEFORE	yysphinxquery.c	71;"	d	file:
TOK_BEFORE	yysphinxquery.h	/^     TOK_BEFORE = 263,$/;"	e	enum:yytokentype
TOK_BEFORE	yysphinxquery.h	47;"	d
TOK_BEGIN	yysphinxql.c	/^     TOK_BEGIN = 272,$/;"	e	enum:yytokentype	file:
TOK_BEGIN	yysphinxql.c	161;"	d	file:
TOK_BEGIN	yysphinxql.h	/^     TOK_BEGIN = 272,$/;"	e	enum:yytokentype
TOK_BEGIN	yysphinxql.h	137;"	d
TOK_BETWEEN	yysphinxql.c	/^     TOK_BETWEEN = 273,$/;"	e	enum:yytokentype	file:
TOK_BETWEEN	yysphinxql.c	162;"	d	file:
TOK_BETWEEN	yysphinxql.h	/^     TOK_BETWEEN = 273,$/;"	e	enum:yytokentype
TOK_BETWEEN	yysphinxql.h	138;"	d
TOK_BREAK	sphinxexcerpt.cpp	/^		TOK_BREAK,			\/\/\/< non-word chars seq which delimit a phrase part or boundary$/;"	e	enum:ExcerptGen_c::Token_e	file:
TOK_BY	yysphinxql.c	/^     TOK_BY = 274,$/;"	e	enum:yytokentype	file:
TOK_BY	yysphinxql.c	163;"	d	file:
TOK_BY	yysphinxql.h	/^     TOK_BY = 274,$/;"	e	enum:yytokentype
TOK_BY	yysphinxql.h	139;"	d
TOK_CALL	yysphinxql.c	/^     TOK_CALL = 275,$/;"	e	enum:yytokentype	file:
TOK_CALL	yysphinxql.c	164;"	d	file:
TOK_CALL	yysphinxql.h	/^     TOK_CALL = 275,$/;"	e	enum:yytokentype
TOK_CALL	yysphinxql.h	140;"	d
TOK_COLLATION	yysphinxql.c	/^     TOK_COLLATION = 276,$/;"	e	enum:yytokentype	file:
TOK_COLLATION	yysphinxql.c	165;"	d	file:
TOK_COLLATION	yysphinxql.h	/^     TOK_COLLATION = 276,$/;"	e	enum:yytokentype
TOK_COLLATION	yysphinxql.h	141;"	d
TOK_COMMIT	yysphinxql.c	/^     TOK_COMMIT = 277,$/;"	e	enum:yytokentype	file:
TOK_COMMIT	yysphinxql.c	166;"	d	file:
TOK_COMMIT	yysphinxql.h	/^     TOK_COMMIT = 277,$/;"	e	enum:yytokentype
TOK_COMMIT	yysphinxql.h	142;"	d
TOK_COMMITTED	yysphinxql.c	/^     TOK_COMMITTED = 278,$/;"	e	enum:yytokentype	file:
TOK_COMMITTED	yysphinxql.c	167;"	d	file:
TOK_COMMITTED	yysphinxql.h	/^     TOK_COMMITTED = 278,$/;"	e	enum:yytokentype
TOK_COMMITTED	yysphinxql.h	143;"	d
TOK_CONST_FLOAT	yysphinxexpr.c	/^     TOK_CONST_FLOAT = 259,$/;"	e	enum:yytokentype	file:
TOK_CONST_FLOAT	yysphinxexpr.c	92;"	d	file:
TOK_CONST_FLOAT	yysphinxexpr.h	/^     TOK_CONST_FLOAT = 259,$/;"	e	enum:yytokentype
TOK_CONST_FLOAT	yysphinxexpr.h	68;"	d
TOK_CONST_FLOAT	yysphinxql.c	/^     TOK_CONST_FLOAT = 261,$/;"	e	enum:yytokentype	file:
TOK_CONST_FLOAT	yysphinxql.c	150;"	d	file:
TOK_CONST_FLOAT	yysphinxql.h	/^     TOK_CONST_FLOAT = 261,$/;"	e	enum:yytokentype
TOK_CONST_FLOAT	yysphinxql.h	126;"	d
TOK_CONST_INT	yysphinxexpr.c	/^     TOK_CONST_INT = 258,$/;"	e	enum:yytokentype	file:
TOK_CONST_INT	yysphinxexpr.c	91;"	d	file:
TOK_CONST_INT	yysphinxexpr.h	/^     TOK_CONST_INT = 258,$/;"	e	enum:yytokentype
TOK_CONST_INT	yysphinxexpr.h	67;"	d
TOK_CONST_INT	yysphinxql.c	/^     TOK_CONST_INT = 260,$/;"	e	enum:yytokentype	file:
TOK_CONST_INT	yysphinxql.c	149;"	d	file:
TOK_CONST_INT	yysphinxql.h	/^     TOK_CONST_INT = 260,$/;"	e	enum:yytokentype
TOK_CONST_INT	yysphinxql.h	125;"	d
TOK_CONST_LIST	yysphinxexpr.c	/^     TOK_CONST_LIST = 279,$/;"	e	enum:yytokentype	file:
TOK_CONST_LIST	yysphinxexpr.c	112;"	d	file:
TOK_CONST_LIST	yysphinxexpr.h	/^     TOK_CONST_LIST = 279,$/;"	e	enum:yytokentype
TOK_CONST_LIST	yysphinxexpr.h	88;"	d
TOK_CONST_MVA	yysphinxql.c	/^     TOK_CONST_MVA = 262,$/;"	e	enum:yytokentype	file:
TOK_CONST_MVA	yysphinxql.c	151;"	d	file:
TOK_CONST_MVA	yysphinxql.h	/^     TOK_CONST_MVA = 262,$/;"	e	enum:yytokentype
TOK_CONST_MVA	yysphinxql.h	127;"	d
TOK_CONST_STRING	yysphinxexpr.c	/^     TOK_CONST_STRING = 260,$/;"	e	enum:yytokentype	file:
TOK_CONST_STRING	yysphinxexpr.c	93;"	d	file:
TOK_CONST_STRING	yysphinxexpr.h	/^     TOK_CONST_STRING = 260,$/;"	e	enum:yytokentype
TOK_CONST_STRING	yysphinxexpr.h	69;"	d
TOK_CONST_STRING	yysphinxselect.c	/^     TOK_CONST_STRING = 275,$/;"	e	enum:yytokentype	file:
TOK_CONST_STRING	yysphinxselect.c	96;"	d	file:
TOK_CONST_STRING	yysphinxselect.h	/^     TOK_CONST_STRING = 275,$/;"	e	enum:yytokentype
TOK_CONST_STRING	yysphinxselect.h	72;"	d
TOK_CONST_STRINGS	yysphinxql.c	/^     TOK_CONST_STRINGS = 266,$/;"	e	enum:yytokentype	file:
TOK_CONST_STRINGS	yysphinxql.c	155;"	d	file:
TOK_CONST_STRINGS	yysphinxql.h	/^     TOK_CONST_STRINGS = 266,$/;"	e	enum:yytokentype
TOK_CONST_STRINGS	yysphinxql.h	131;"	d
TOK_COUNT	yysphinxexpr.c	/^     TOK_COUNT = 277,$/;"	e	enum:yytokentype	file:
TOK_COUNT	yysphinxexpr.c	110;"	d	file:
TOK_COUNT	yysphinxexpr.h	/^     TOK_COUNT = 277,$/;"	e	enum:yytokentype
TOK_COUNT	yysphinxexpr.h	86;"	d
TOK_COUNT	yysphinxql.c	/^     TOK_COUNT = 279,$/;"	e	enum:yytokentype	file:
TOK_COUNT	yysphinxql.c	168;"	d	file:
TOK_COUNT	yysphinxql.h	/^     TOK_COUNT = 279,$/;"	e	enum:yytokentype
TOK_COUNT	yysphinxql.h	144;"	d
TOK_CREATE	yysphinxql.c	/^     TOK_CREATE = 280,$/;"	e	enum:yytokentype	file:
TOK_CREATE	yysphinxql.c	169;"	d	file:
TOK_CREATE	yysphinxql.h	/^     TOK_CREATE = 280,$/;"	e	enum:yytokentype
TOK_CREATE	yysphinxql.h	145;"	d
TOK_DELETE	yysphinxql.c	/^     TOK_DELETE = 281,$/;"	e	enum:yytokentype	file:
TOK_DELETE	yysphinxql.c	170;"	d	file:
TOK_DELETE	yysphinxql.h	/^     TOK_DELETE = 281,$/;"	e	enum:yytokentype
TOK_DELETE	yysphinxql.h	146;"	d
TOK_DESC	yysphinxql.c	/^     TOK_DESC = 282,$/;"	e	enum:yytokentype	file:
TOK_DESC	yysphinxql.c	171;"	d	file:
TOK_DESC	yysphinxql.h	/^     TOK_DESC = 282,$/;"	e	enum:yytokentype
TOK_DESC	yysphinxql.h	147;"	d
TOK_DESCRIBE	yysphinxql.c	/^     TOK_DESCRIBE = 283,$/;"	e	enum:yytokentype	file:
TOK_DESCRIBE	yysphinxql.c	172;"	d	file:
TOK_DESCRIBE	yysphinxql.h	/^     TOK_DESCRIBE = 283,$/;"	e	enum:yytokentype
TOK_DESCRIBE	yysphinxql.h	148;"	d
TOK_DISTINCT	yysphinxexpr.c	/^     TOK_DISTINCT = 278,$/;"	e	enum:yytokentype	file:
TOK_DISTINCT	yysphinxexpr.c	111;"	d	file:
TOK_DISTINCT	yysphinxexpr.h	/^     TOK_DISTINCT = 278,$/;"	e	enum:yytokentype
TOK_DISTINCT	yysphinxexpr.h	87;"	d
TOK_DISTINCT	yysphinxql.c	/^     TOK_DISTINCT = 284,$/;"	e	enum:yytokentype	file:
TOK_DISTINCT	yysphinxql.c	173;"	d	file:
TOK_DISTINCT	yysphinxql.h	/^     TOK_DISTINCT = 284,$/;"	e	enum:yytokentype
TOK_DISTINCT	yysphinxql.h	149;"	d
TOK_DIV	yysphinxexpr.c	/^     TOK_DIV = 288,$/;"	e	enum:yytokentype	file:
TOK_DIV	yysphinxexpr.c	121;"	d	file:
TOK_DIV	yysphinxexpr.h	/^     TOK_DIV = 288,$/;"	e	enum:yytokentype
TOK_DIV	yysphinxexpr.h	97;"	d
TOK_DIV	yysphinxql.c	/^     TOK_DIV = 285,$/;"	e	enum:yytokentype	file:
TOK_DIV	yysphinxql.c	174;"	d	file:
TOK_DIV	yysphinxql.h	/^     TOK_DIV = 285,$/;"	e	enum:yytokentype
TOK_DIV	yysphinxql.h	150;"	d
TOK_DIV	yysphinxselect.c	/^     TOK_DIV = 268,$/;"	e	enum:yytokentype	file:
TOK_DIV	yysphinxselect.c	89;"	d	file:
TOK_DIV	yysphinxselect.h	/^     TOK_DIV = 268,$/;"	e	enum:yytokentype
TOK_DIV	yysphinxselect.h	65;"	d
TOK_DROP	yysphinxql.c	/^     TOK_DROP = 286,$/;"	e	enum:yytokentype	file:
TOK_DROP	yysphinxql.c	175;"	d	file:
TOK_DROP	yysphinxql.h	/^     TOK_DROP = 286,$/;"	e	enum:yytokentype
TOK_DROP	yysphinxql.h	151;"	d
TOK_EQ	yysphinxexpr.c	/^     TOK_EQ = 284,$/;"	e	enum:yytokentype	file:
TOK_EQ	yysphinxexpr.c	117;"	d	file:
TOK_EQ	yysphinxexpr.h	/^     TOK_EQ = 284,$/;"	e	enum:yytokentype
TOK_EQ	yysphinxexpr.h	93;"	d
TOK_EQ	yysphinxselect.c	/^     TOK_EQ = 273,$/;"	e	enum:yytokentype	file:
TOK_EQ	yysphinxselect.c	94;"	d	file:
TOK_EQ	yysphinxselect.h	/^     TOK_EQ = 273,$/;"	e	enum:yytokentype
TOK_EQ	yysphinxselect.h	70;"	d
TOK_ESCAPED	tests.cpp	/^const DWORD TOK_ESCAPED			= 2;$/;"	v
TOK_EXCEPTIONS	tests.cpp	/^const DWORD TOK_EXCEPTIONS		= 1;$/;"	v
TOK_FALSE	yysphinxql.c	/^     TOK_FALSE = 287,$/;"	e	enum:yytokentype	file:
TOK_FALSE	yysphinxql.c	176;"	d	file:
TOK_FALSE	yysphinxql.h	/^     TOK_FALSE = 287,$/;"	e	enum:yytokentype
TOK_FALSE	yysphinxql.h	152;"	d
TOK_FIELDLIMIT	yysphinxquery.c	/^     TOK_FIELDLIMIT = 261,$/;"	e	enum:yytokentype	file:
TOK_FIELDLIMIT	yysphinxquery.c	69;"	d	file:
TOK_FIELDLIMIT	yysphinxquery.h	/^     TOK_FIELDLIMIT = 261,$/;"	e	enum:yytokentype
TOK_FIELDLIMIT	yysphinxquery.h	45;"	d
TOK_FLOAT	yysphinxql.c	/^     TOK_FLOAT = 288,$/;"	e	enum:yytokentype	file:
TOK_FLOAT	yysphinxql.c	177;"	d	file:
TOK_FLOAT	yysphinxql.h	/^     TOK_FLOAT = 288,$/;"	e	enum:yytokentype
TOK_FLOAT	yysphinxql.h	153;"	d
TOK_FLUSH	yysphinxql.c	/^     TOK_FLUSH = 289,$/;"	e	enum:yytokentype	file:
TOK_FLUSH	yysphinxql.c	178;"	d	file:
TOK_FLUSH	yysphinxql.h	/^     TOK_FLUSH = 289,$/;"	e	enum:yytokentype
TOK_FLUSH	yysphinxql.h	154;"	d
TOK_FROM	yysphinxql.c	/^     TOK_FROM = 290,$/;"	e	enum:yytokentype	file:
TOK_FROM	yysphinxql.c	179;"	d	file:
TOK_FROM	yysphinxql.h	/^     TOK_FROM = 290,$/;"	e	enum:yytokentype
TOK_FROM	yysphinxql.h	155;"	d
TOK_FUNC	yysphinxexpr.c	/^     TOK_FUNC = 267,$/;"	e	enum:yytokentype	file:
TOK_FUNC	yysphinxexpr.c	100;"	d	file:
TOK_FUNC	yysphinxexpr.h	/^     TOK_FUNC = 267,$/;"	e	enum:yytokentype
TOK_FUNC	yysphinxexpr.h	76;"	d
TOK_FUNCTION	yysphinxql.c	/^     TOK_FUNCTION = 291,$/;"	e	enum:yytokentype	file:
TOK_FUNCTION	yysphinxql.c	180;"	d	file:
TOK_FUNCTION	yysphinxql.h	/^     TOK_FUNCTION = 291,$/;"	e	enum:yytokentype
TOK_FUNCTION	yysphinxql.h	156;"	d
TOK_FUNC_IN	yysphinxexpr.c	/^     TOK_FUNC_IN = 268,$/;"	e	enum:yytokentype	file:
TOK_FUNC_IN	yysphinxexpr.c	101;"	d	file:
TOK_FUNC_IN	yysphinxexpr.h	/^     TOK_FUNC_IN = 268,$/;"	e	enum:yytokentype
TOK_FUNC_IN	yysphinxexpr.h	77;"	d
TOK_GLOBAL	yysphinxql.c	/^     TOK_GLOBAL = 292,$/;"	e	enum:yytokentype	file:
TOK_GLOBAL	yysphinxql.c	181;"	d	file:
TOK_GLOBAL	yysphinxql.h	/^     TOK_GLOBAL = 292,$/;"	e	enum:yytokentype
TOK_GLOBAL	yysphinxql.h	157;"	d
TOK_GROUP	yysphinxql.c	/^     TOK_GROUP = 293,$/;"	e	enum:yytokentype	file:
TOK_GROUP	yysphinxql.c	182;"	d	file:
TOK_GROUP	yysphinxql.h	/^     TOK_GROUP = 293,$/;"	e	enum:yytokentype
TOK_GROUP	yysphinxql.h	158;"	d
TOK_GTE	yysphinxexpr.c	/^     TOK_GTE = 285,$/;"	e	enum:yytokentype	file:
TOK_GTE	yysphinxexpr.c	118;"	d	file:
TOK_GTE	yysphinxexpr.h	/^     TOK_GTE = 285,$/;"	e	enum:yytokentype
TOK_GTE	yysphinxexpr.h	94;"	d
TOK_GTE	yysphinxql.c	/^     TOK_GTE = 343,$/;"	e	enum:yytokentype	file:
TOK_GTE	yysphinxql.c	232;"	d	file:
TOK_GTE	yysphinxql.h	/^     TOK_GTE = 343,$/;"	e	enum:yytokentype
TOK_GTE	yysphinxql.h	208;"	d
TOK_GTE	yysphinxselect.c	/^     TOK_GTE = 272,$/;"	e	enum:yytokentype	file:
TOK_GTE	yysphinxselect.c	93;"	d	file:
TOK_GTE	yysphinxselect.h	/^     TOK_GTE = 272,$/;"	e	enum:yytokentype
TOK_GTE	yysphinxselect.h	69;"	d
TOK_HOOK_FUNC	yysphinxexpr.c	/^     TOK_HOOK_FUNC = 272,$/;"	e	enum:yytokentype	file:
TOK_HOOK_FUNC	yysphinxexpr.c	105;"	d	file:
TOK_HOOK_FUNC	yysphinxexpr.h	/^     TOK_HOOK_FUNC = 272,$/;"	e	enum:yytokentype
TOK_HOOK_FUNC	yysphinxexpr.h	81;"	d
TOK_HOOK_IDENT	yysphinxexpr.c	/^     TOK_HOOK_IDENT = 271,$/;"	e	enum:yytokentype	file:
TOK_HOOK_IDENT	yysphinxexpr.c	104;"	d	file:
TOK_HOOK_IDENT	yysphinxexpr.h	/^     TOK_HOOK_IDENT = 271,$/;"	e	enum:yytokentype
TOK_HOOK_IDENT	yysphinxexpr.h	80;"	d
TOK_ID	yysphinxexpr.c	/^     TOK_ID = 275,$/;"	e	enum:yytokentype	file:
TOK_ID	yysphinxexpr.c	108;"	d	file:
TOK_ID	yysphinxexpr.h	/^     TOK_ID = 275,$/;"	e	enum:yytokentype
TOK_ID	yysphinxexpr.h	84;"	d
TOK_ID	yysphinxql.c	/^     TOK_ID = 294,$/;"	e	enum:yytokentype	file:
TOK_ID	yysphinxql.c	183;"	d	file:
TOK_ID	yysphinxql.h	/^     TOK_ID = 294,$/;"	e	enum:yytokentype
TOK_ID	yysphinxql.h	159;"	d
TOK_IDENT	yysphinxql.c	/^     TOK_IDENT = 258,$/;"	e	enum:yytokentype	file:
TOK_IDENT	yysphinxql.c	147;"	d	file:
TOK_IDENT	yysphinxql.h	/^     TOK_IDENT = 258,$/;"	e	enum:yytokentype
TOK_IDENT	yysphinxql.h	123;"	d
TOK_IN	yysphinxql.c	/^     TOK_IN = 295,$/;"	e	enum:yytokentype	file:
TOK_IN	yysphinxql.c	184;"	d	file:
TOK_IN	yysphinxql.h	/^     TOK_IN = 295,$/;"	e	enum:yytokentype
TOK_IN	yysphinxql.h	160;"	d
TOK_INDEX	yysphinxql.c	/^     TOK_INDEX = 296,$/;"	e	enum:yytokentype	file:
TOK_INDEX	yysphinxql.c	185;"	d	file:
TOK_INDEX	yysphinxql.h	/^     TOK_INDEX = 296,$/;"	e	enum:yytokentype
TOK_INDEX	yysphinxql.h	161;"	d
TOK_INSERT	yysphinxql.c	/^     TOK_INSERT = 297,$/;"	e	enum:yytokentype	file:
TOK_INSERT	yysphinxql.c	186;"	d	file:
TOK_INSERT	yysphinxql.h	/^     TOK_INSERT = 297,$/;"	e	enum:yytokentype
TOK_INSERT	yysphinxql.h	162;"	d
TOK_INT	yysphinxql.c	/^     TOK_INT = 298,$/;"	e	enum:yytokentype	file:
TOK_INT	yysphinxql.c	187;"	d	file:
TOK_INT	yysphinxql.h	/^     TOK_INT = 298,$/;"	e	enum:yytokentype
TOK_INT	yysphinxql.h	163;"	d
TOK_INT	yysphinxquery.c	/^     TOK_INT = 260,$/;"	e	enum:yytokentype	file:
TOK_INT	yysphinxquery.c	68;"	d	file:
TOK_INT	yysphinxquery.h	/^     TOK_INT = 260,$/;"	e	enum:yytokentype
TOK_INT	yysphinxquery.h	44;"	d
TOK_INTO	yysphinxql.c	/^     TOK_INTO = 299,$/;"	e	enum:yytokentype	file:
TOK_INTO	yysphinxql.c	188;"	d	file:
TOK_INTO	yysphinxql.h	/^     TOK_INTO = 299,$/;"	e	enum:yytokentype
TOK_INTO	yysphinxql.h	164;"	d
TOK_ISOLATION	yysphinxql.c	/^     TOK_ISOLATION = 300,$/;"	e	enum:yytokentype	file:
TOK_ISOLATION	yysphinxql.c	189;"	d	file:
TOK_ISOLATION	yysphinxql.h	/^     TOK_ISOLATION = 300,$/;"	e	enum:yytokentype
TOK_ISOLATION	yysphinxql.h	165;"	d
TOK_KEYWORD	yysphinxquery.c	/^     TOK_KEYWORD = 258,$/;"	e	enum:yytokentype	file:
TOK_KEYWORD	yysphinxquery.c	66;"	d	file:
TOK_KEYWORD	yysphinxquery.h	/^     TOK_KEYWORD = 258,$/;"	e	enum:yytokentype
TOK_KEYWORD	yysphinxquery.h	42;"	d
TOK_LEVEL	yysphinxql.c	/^     TOK_LEVEL = 301,$/;"	e	enum:yytokentype	file:
TOK_LEVEL	yysphinxql.c	190;"	d	file:
TOK_LEVEL	yysphinxql.h	/^     TOK_LEVEL = 301,$/;"	e	enum:yytokentype
TOK_LEVEL	yysphinxql.h	166;"	d
TOK_LIMIT	yysphinxql.c	/^     TOK_LIMIT = 302,$/;"	e	enum:yytokentype	file:
TOK_LIMIT	yysphinxql.c	191;"	d	file:
TOK_LIMIT	yysphinxql.h	/^     TOK_LIMIT = 302,$/;"	e	enum:yytokentype
TOK_LIMIT	yysphinxql.h	167;"	d
TOK_LTE	yysphinxexpr.c	/^     TOK_LTE = 286,$/;"	e	enum:yytokentype	file:
TOK_LTE	yysphinxexpr.c	119;"	d	file:
TOK_LTE	yysphinxexpr.h	/^     TOK_LTE = 286,$/;"	e	enum:yytokentype
TOK_LTE	yysphinxexpr.h	95;"	d
TOK_LTE	yysphinxql.c	/^     TOK_LTE = 344,$/;"	e	enum:yytokentype	file:
TOK_LTE	yysphinxql.c	233;"	d	file:
TOK_LTE	yysphinxql.h	/^     TOK_LTE = 344,$/;"	e	enum:yytokentype
TOK_LTE	yysphinxql.h	209;"	d
TOK_LTE	yysphinxselect.c	/^     TOK_LTE = 271,$/;"	e	enum:yytokentype	file:
TOK_LTE	yysphinxselect.c	92;"	d	file:
TOK_LTE	yysphinxselect.h	/^     TOK_LTE = 271,$/;"	e	enum:yytokentype
TOK_LTE	yysphinxselect.h	68;"	d
TOK_MATCH	yysphinxql.c	/^     TOK_MATCH = 303,$/;"	e	enum:yytokentype	file:
TOK_MATCH	yysphinxql.c	192;"	d	file:
TOK_MATCH	yysphinxql.h	/^     TOK_MATCH = 303,$/;"	e	enum:yytokentype
TOK_MATCH	yysphinxql.h	168;"	d
TOK_MAX	yysphinxql.c	/^     TOK_MAX = 304,$/;"	e	enum:yytokentype	file:
TOK_MAX	yysphinxql.c	193;"	d	file:
TOK_MAX	yysphinxql.h	/^     TOK_MAX = 304,$/;"	e	enum:yytokentype
TOK_MAX	yysphinxql.h	169;"	d
TOK_META	yysphinxql.c	/^     TOK_META = 305,$/;"	e	enum:yytokentype	file:
TOK_META	yysphinxql.c	194;"	d	file:
TOK_META	yysphinxql.h	/^     TOK_META = 305,$/;"	e	enum:yytokentype
TOK_META	yysphinxql.h	170;"	d
TOK_MIN	yysphinxql.c	/^     TOK_MIN = 306,$/;"	e	enum:yytokentype	file:
TOK_MIN	yysphinxql.c	195;"	d	file:
TOK_MIN	yysphinxql.h	/^     TOK_MIN = 306,$/;"	e	enum:yytokentype
TOK_MIN	yysphinxql.h	171;"	d
TOK_MOD	yysphinxexpr.c	/^     TOK_MOD = 287,$/;"	e	enum:yytokentype	file:
TOK_MOD	yysphinxexpr.c	120;"	d	file:
TOK_MOD	yysphinxexpr.h	/^     TOK_MOD = 287,$/;"	e	enum:yytokentype
TOK_MOD	yysphinxexpr.h	96;"	d
TOK_MOD	yysphinxql.c	/^     TOK_MOD = 307,$/;"	e	enum:yytokentype	file:
TOK_MOD	yysphinxql.c	196;"	d	file:
TOK_MOD	yysphinxql.h	/^     TOK_MOD = 307,$/;"	e	enum:yytokentype
TOK_MOD	yysphinxql.h	172;"	d
TOK_MOD	yysphinxselect.c	/^     TOK_MOD = 269,$/;"	e	enum:yytokentype	file:
TOK_MOD	yysphinxselect.c	90;"	d	file:
TOK_MOD	yysphinxselect.h	/^     TOK_MOD = 269,$/;"	e	enum:yytokentype
TOK_MOD	yysphinxselect.h	66;"	d
TOK_NAMES	yysphinxql.c	/^     TOK_NAMES = 308,$/;"	e	enum:yytokentype	file:
TOK_NAMES	yysphinxql.c	197;"	d	file:
TOK_NAMES	yysphinxql.h	/^     TOK_NAMES = 308,$/;"	e	enum:yytokentype
TOK_NAMES	yysphinxql.h	173;"	d
TOK_NE	yysphinxexpr.c	/^     TOK_NE = 283,$/;"	e	enum:yytokentype	file:
TOK_NE	yysphinxexpr.c	116;"	d	file:
TOK_NE	yysphinxexpr.h	/^     TOK_NE = 283,$/;"	e	enum:yytokentype
TOK_NE	yysphinxexpr.h	92;"	d
TOK_NE	yysphinxql.c	/^     TOK_NE = 342,$/;"	e	enum:yytokentype	file:
TOK_NE	yysphinxql.c	231;"	d	file:
TOK_NE	yysphinxql.h	/^     TOK_NE = 342,$/;"	e	enum:yytokentype
TOK_NE	yysphinxql.h	207;"	d
TOK_NE	yysphinxselect.c	/^     TOK_NE = 274,$/;"	e	enum:yytokentype	file:
TOK_NE	yysphinxselect.c	95;"	d	file:
TOK_NE	yysphinxselect.h	/^     TOK_NE = 274,$/;"	e	enum:yytokentype
TOK_NE	yysphinxselect.h	71;"	d
TOK_NEAR	yysphinxquery.c	/^     TOK_NEAR = 259,$/;"	e	enum:yytokentype	file:
TOK_NEAR	yysphinxquery.c	67;"	d	file:
TOK_NEAR	yysphinxquery.h	/^     TOK_NEAR = 259,$/;"	e	enum:yytokentype
TOK_NEAR	yysphinxquery.h	43;"	d
TOK_NEG	yysphinxexpr.c	/^     TOK_NEG = 290$/;"	e	enum:yytokentype	file:
TOK_NEG	yysphinxexpr.c	123;"	d	file:
TOK_NEG	yysphinxexpr.h	/^     TOK_NEG = 290$/;"	e	enum:yytokentype
TOK_NEG	yysphinxexpr.h	99;"	d
TOK_NEG	yysphinxql.c	/^     TOK_NEG = 346$/;"	e	enum:yytokentype	file:
TOK_NEG	yysphinxql.c	235;"	d	file:
TOK_NEG	yysphinxql.h	/^     TOK_NEG = 346$/;"	e	enum:yytokentype
TOK_NEG	yysphinxql.h	211;"	d
TOK_NEG	yysphinxselect.c	/^     TOK_NEG = 270,$/;"	e	enum:yytokentype	file:
TOK_NEG	yysphinxselect.c	91;"	d	file:
TOK_NEG	yysphinxselect.h	/^     TOK_NEG = 270,$/;"	e	enum:yytokentype
TOK_NEG	yysphinxselect.h	67;"	d
TOK_NONE	sphinxexcerpt.cpp	/^		TOK_NONE = 0,		\/\/\/< unspecified type, also used as the end marker$/;"	e	enum:ExcerptGen_c::Token_e	file:
TOK_NOT	yysphinxexpr.c	/^     TOK_NOT = 289,$/;"	e	enum:yytokentype	file:
TOK_NOT	yysphinxexpr.c	122;"	d	file:
TOK_NOT	yysphinxexpr.h	/^     TOK_NOT = 289,$/;"	e	enum:yytokentype
TOK_NOT	yysphinxexpr.h	98;"	d
TOK_NOT	yysphinxql.c	/^     TOK_NOT = 345,$/;"	e	enum:yytokentype	file:
TOK_NOT	yysphinxql.c	234;"	d	file:
TOK_NOT	yysphinxql.h	/^     TOK_NOT = 345,$/;"	e	enum:yytokentype
TOK_NOT	yysphinxql.h	210;"	d
TOK_NOT	yysphinxselect.c	/^     TOK_NOT = 278$/;"	e	enum:yytokentype	file:
TOK_NOT	yysphinxselect.c	99;"	d	file:
TOK_NOT	yysphinxselect.h	/^     TOK_NOT = 278$/;"	e	enum:yytokentype
TOK_NOT	yysphinxselect.h	75;"	d
TOK_NO_DASH	tests.cpp	/^const DWORD TOK_NO_DASH			= 4;$/;"	v
TOK_NULL	yysphinxql.c	/^     TOK_NULL = 309,$/;"	e	enum:yytokentype	file:
TOK_NULL	yysphinxql.c	198;"	d	file:
TOK_NULL	yysphinxql.h	/^     TOK_NULL = 309,$/;"	e	enum:yytokentype
TOK_NULL	yysphinxql.h	174;"	d
TOK_OPTION	yysphinxql.c	/^     TOK_OPTION = 310,$/;"	e	enum:yytokentype	file:
TOK_OPTION	yysphinxql.c	199;"	d	file:
TOK_OPTION	yysphinxql.h	/^     TOK_OPTION = 310,$/;"	e	enum:yytokentype
TOK_OPTION	yysphinxql.h	175;"	d
TOK_OR	yysphinxexpr.c	/^     TOK_OR = 281,$/;"	e	enum:yytokentype	file:
TOK_OR	yysphinxexpr.c	114;"	d	file:
TOK_OR	yysphinxexpr.h	/^     TOK_OR = 281,$/;"	e	enum:yytokentype
TOK_OR	yysphinxexpr.h	90;"	d
TOK_OR	yysphinxql.c	/^     TOK_OR = 340,$/;"	e	enum:yytokentype	file:
TOK_OR	yysphinxql.c	229;"	d	file:
TOK_OR	yysphinxql.h	/^     TOK_OR = 340,$/;"	e	enum:yytokentype
TOK_OR	yysphinxql.h	205;"	d
TOK_OR	yysphinxselect.c	/^     TOK_OR = 276,$/;"	e	enum:yytokentype	file:
TOK_OR	yysphinxselect.c	97;"	d	file:
TOK_OR	yysphinxselect.h	/^     TOK_OR = 276,$/;"	e	enum:yytokentype
TOK_OR	yysphinxselect.h	73;"	d
TOK_ORDER	yysphinxql.c	/^     TOK_ORDER = 311,$/;"	e	enum:yytokentype	file:
TOK_ORDER	yysphinxql.c	200;"	d	file:
TOK_ORDER	yysphinxql.h	/^     TOK_ORDER = 311,$/;"	e	enum:yytokentype
TOK_ORDER	yysphinxql.h	176;"	d
TOK_PARAGRAPH	yysphinxquery.c	/^     TOK_PARAGRAPH = 265$/;"	e	enum:yytokentype	file:
TOK_PARAGRAPH	yysphinxquery.c	73;"	d	file:
TOK_PARAGRAPH	yysphinxquery.h	/^     TOK_PARAGRAPH = 265$/;"	e	enum:yytokentype
TOK_PARAGRAPH	yysphinxquery.h	49;"	d
TOK_QUOTED_STRING	yysphinxql.c	/^     TOK_QUOTED_STRING = 263,$/;"	e	enum:yytokentype	file:
TOK_QUOTED_STRING	yysphinxql.c	152;"	d	file:
TOK_QUOTED_STRING	yysphinxql.h	/^     TOK_QUOTED_STRING = 263,$/;"	e	enum:yytokentype
TOK_QUOTED_STRING	yysphinxql.h	128;"	d
TOK_RAND	yysphinxql.c	/^     TOK_RAND = 312,$/;"	e	enum:yytokentype	file:
TOK_RAND	yysphinxql.c	201;"	d	file:
TOK_RAND	yysphinxql.h	/^     TOK_RAND = 312,$/;"	e	enum:yytokentype
TOK_RAND	yysphinxql.h	177;"	d
TOK_READ	yysphinxql.c	/^     TOK_READ = 313,$/;"	e	enum:yytokentype	file:
TOK_READ	yysphinxql.c	202;"	d	file:
TOK_READ	yysphinxql.h	/^     TOK_READ = 313,$/;"	e	enum:yytokentype
TOK_READ	yysphinxql.h	178;"	d
TOK_REPEATABLE	yysphinxql.c	/^     TOK_REPEATABLE = 314,$/;"	e	enum:yytokentype	file:
TOK_REPEATABLE	yysphinxql.c	203;"	d	file:
TOK_REPEATABLE	yysphinxql.h	/^     TOK_REPEATABLE = 314,$/;"	e	enum:yytokentype
TOK_REPEATABLE	yysphinxql.h	179;"	d
TOK_REPLACE	yysphinxql.c	/^     TOK_REPLACE = 315,$/;"	e	enum:yytokentype	file:
TOK_REPLACE	yysphinxql.c	204;"	d	file:
TOK_REPLACE	yysphinxql.h	/^     TOK_REPLACE = 315,$/;"	e	enum:yytokentype
TOK_REPLACE	yysphinxql.h	180;"	d
TOK_RETURNS	yysphinxql.c	/^     TOK_RETURNS = 316,$/;"	e	enum:yytokentype	file:
TOK_RETURNS	yysphinxql.c	205;"	d	file:
TOK_RETURNS	yysphinxql.h	/^     TOK_RETURNS = 316,$/;"	e	enum:yytokentype
TOK_RETURNS	yysphinxql.h	181;"	d
TOK_ROLLBACK	yysphinxql.c	/^     TOK_ROLLBACK = 317,$/;"	e	enum:yytokentype	file:
TOK_ROLLBACK	yysphinxql.c	206;"	d	file:
TOK_ROLLBACK	yysphinxql.h	/^     TOK_ROLLBACK = 317,$/;"	e	enum:yytokentype
TOK_ROLLBACK	yysphinxql.h	182;"	d
TOK_RTINDEX	yysphinxql.c	/^     TOK_RTINDEX = 318,$/;"	e	enum:yytokentype	file:
TOK_RTINDEX	yysphinxql.c	207;"	d	file:
TOK_RTINDEX	yysphinxql.h	/^     TOK_RTINDEX = 318,$/;"	e	enum:yytokentype
TOK_RTINDEX	yysphinxql.h	183;"	d
TOK_SELECT	yysphinxql.c	/^     TOK_SELECT = 319,$/;"	e	enum:yytokentype	file:
TOK_SELECT	yysphinxql.c	208;"	d	file:
TOK_SELECT	yysphinxql.h	/^     TOK_SELECT = 319,$/;"	e	enum:yytokentype
TOK_SELECT	yysphinxql.h	184;"	d
TOK_SENTENCE	yysphinxquery.c	/^     TOK_SENTENCE = 264,$/;"	e	enum:yytokentype	file:
TOK_SENTENCE	yysphinxquery.c	72;"	d	file:
TOK_SENTENCE	yysphinxquery.h	/^     TOK_SENTENCE = 264,$/;"	e	enum:yytokentype
TOK_SENTENCE	yysphinxquery.h	48;"	d
TOK_SERIALIZABLE	yysphinxql.c	/^     TOK_SERIALIZABLE = 320,$/;"	e	enum:yytokentype	file:
TOK_SERIALIZABLE	yysphinxql.c	209;"	d	file:
TOK_SERIALIZABLE	yysphinxql.h	/^     TOK_SERIALIZABLE = 320,$/;"	e	enum:yytokentype
TOK_SERIALIZABLE	yysphinxql.h	185;"	d
TOK_SESSION	yysphinxql.c	/^     TOK_SESSION = 322,$/;"	e	enum:yytokentype	file:
TOK_SESSION	yysphinxql.c	211;"	d	file:
TOK_SESSION	yysphinxql.h	/^     TOK_SESSION = 322,$/;"	e	enum:yytokentype
TOK_SESSION	yysphinxql.h	187;"	d
TOK_SET	yysphinxql.c	/^     TOK_SET = 321,$/;"	e	enum:yytokentype	file:
TOK_SET	yysphinxql.c	210;"	d	file:
TOK_SET	yysphinxql.h	/^     TOK_SET = 321,$/;"	e	enum:yytokentype
TOK_SET	yysphinxql.h	186;"	d
TOK_SHOW	yysphinxql.c	/^     TOK_SHOW = 323,$/;"	e	enum:yytokentype	file:
TOK_SHOW	yysphinxql.c	212;"	d	file:
TOK_SHOW	yysphinxql.h	/^     TOK_SHOW = 323,$/;"	e	enum:yytokentype
TOK_SHOW	yysphinxql.h	188;"	d
TOK_SONAME	yysphinxql.c	/^     TOK_SONAME = 324,$/;"	e	enum:yytokentype	file:
TOK_SONAME	yysphinxql.c	213;"	d	file:
TOK_SONAME	yysphinxql.h	/^     TOK_SONAME = 324,$/;"	e	enum:yytokentype
TOK_SONAME	yysphinxql.h	189;"	d
TOK_SPACE	sphinxexcerpt.cpp	/^		TOK_SPACE,			\/\/\/< whitespace chars seq$/;"	e	enum:ExcerptGen_c::Token_e	file:
TOK_SPZ	sphinxexcerpt.cpp	/^		TOK_SPZ				\/\/\/< SENTENCE, PARAGRAPH, ZONE$/;"	e	enum:ExcerptGen_c::Token_e	file:
TOK_START	yysphinxql.c	/^     TOK_START = 325,$/;"	e	enum:yytokentype	file:
TOK_START	yysphinxql.c	214;"	d	file:
TOK_START	yysphinxql.h	/^     TOK_START = 325,$/;"	e	enum:yytokentype
TOK_START	yysphinxql.h	190;"	d
TOK_STATUS	yysphinxql.c	/^     TOK_STATUS = 326,$/;"	e	enum:yytokentype	file:
TOK_STATUS	yysphinxql.c	215;"	d	file:
TOK_STATUS	yysphinxql.h	/^     TOK_STATUS = 326,$/;"	e	enum:yytokentype
TOK_STATUS	yysphinxql.h	191;"	d
TOK_SUM	yysphinxql.c	/^     TOK_SUM = 327,$/;"	e	enum:yytokentype	file:
TOK_SUM	yysphinxql.c	216;"	d	file:
TOK_SUM	yysphinxql.h	/^     TOK_SUM = 327,$/;"	e	enum:yytokentype
TOK_SUM	yysphinxql.h	192;"	d
TOK_SYSVAR	yysphinxql.c	/^     TOK_SYSVAR = 265,$/;"	e	enum:yytokentype	file:
TOK_SYSVAR	yysphinxql.c	154;"	d	file:
TOK_SYSVAR	yysphinxql.h	/^     TOK_SYSVAR = 265,$/;"	e	enum:yytokentype
TOK_SYSVAR	yysphinxql.h	130;"	d
TOK_TABLES	yysphinxql.c	/^     TOK_TABLES = 328,$/;"	e	enum:yytokentype	file:
TOK_TABLES	yysphinxql.c	217;"	d	file:
TOK_TABLES	yysphinxql.h	/^     TOK_TABLES = 328,$/;"	e	enum:yytokentype
TOK_TABLES	yysphinxql.h	193;"	d
TOK_TO	yysphinxql.c	/^     TOK_TO = 329,$/;"	e	enum:yytokentype	file:
TOK_TO	yysphinxql.c	218;"	d	file:
TOK_TO	yysphinxql.h	/^     TOK_TO = 329,$/;"	e	enum:yytokentype
TOK_TO	yysphinxql.h	194;"	d
TOK_TRANSACTION	yysphinxql.c	/^     TOK_TRANSACTION = 330,$/;"	e	enum:yytokentype	file:
TOK_TRANSACTION	yysphinxql.c	219;"	d	file:
TOK_TRANSACTION	yysphinxql.h	/^     TOK_TRANSACTION = 330,$/;"	e	enum:yytokentype
TOK_TRANSACTION	yysphinxql.h	195;"	d
TOK_TRUE	yysphinxql.c	/^     TOK_TRUE = 331,$/;"	e	enum:yytokentype	file:
TOK_TRUE	yysphinxql.c	220;"	d	file:
TOK_TRUE	yysphinxql.h	/^     TOK_TRUE = 331,$/;"	e	enum:yytokentype
TOK_TRUE	yysphinxql.h	196;"	d
TOK_UDF	yysphinxexpr.c	/^     TOK_UDF = 270,$/;"	e	enum:yytokentype	file:
TOK_UDF	yysphinxexpr.c	103;"	d	file:
TOK_UDF	yysphinxexpr.h	/^     TOK_UDF = 270,$/;"	e	enum:yytokentype
TOK_UDF	yysphinxexpr.h	79;"	d
TOK_UNCOMMITTED	yysphinxql.c	/^     TOK_UNCOMMITTED = 332,$/;"	e	enum:yytokentype	file:
TOK_UNCOMMITTED	yysphinxql.c	221;"	d	file:
TOK_UNCOMMITTED	yysphinxql.h	/^     TOK_UNCOMMITTED = 332,$/;"	e	enum:yytokentype
TOK_UNCOMMITTED	yysphinxql.h	197;"	d
TOK_UPDATE	yysphinxql.c	/^     TOK_UPDATE = 333,$/;"	e	enum:yytokentype	file:
TOK_UPDATE	yysphinxql.c	222;"	d	file:
TOK_UPDATE	yysphinxql.h	/^     TOK_UPDATE = 333,$/;"	e	enum:yytokentype
TOK_UPDATE	yysphinxql.h	198;"	d
TOK_USERVAR	yysphinxexpr.c	/^     TOK_USERVAR = 269,$/;"	e	enum:yytokentype	file:
TOK_USERVAR	yysphinxexpr.c	102;"	d	file:
TOK_USERVAR	yysphinxexpr.h	/^     TOK_USERVAR = 269,$/;"	e	enum:yytokentype
TOK_USERVAR	yysphinxexpr.h	78;"	d
TOK_USERVAR	yysphinxql.c	/^     TOK_USERVAR = 264,$/;"	e	enum:yytokentype	file:
TOK_USERVAR	yysphinxql.c	153;"	d	file:
TOK_USERVAR	yysphinxql.h	/^     TOK_USERVAR = 264,$/;"	e	enum:yytokentype
TOK_USERVAR	yysphinxql.h	129;"	d
TOK_VALUES	yysphinxql.c	/^     TOK_VALUES = 334,$/;"	e	enum:yytokentype	file:
TOK_VALUES	yysphinxql.c	223;"	d	file:
TOK_VALUES	yysphinxql.h	/^     TOK_VALUES = 334,$/;"	e	enum:yytokentype
TOK_VALUES	yysphinxql.h	199;"	d
TOK_VARIABLES	yysphinxql.c	/^     TOK_VARIABLES = 335,$/;"	e	enum:yytokentype	file:
TOK_VARIABLES	yysphinxql.c	224;"	d	file:
TOK_VARIABLES	yysphinxql.h	/^     TOK_VARIABLES = 335,$/;"	e	enum:yytokentype
TOK_VARIABLES	yysphinxql.h	200;"	d
TOK_WARNINGS	yysphinxql.c	/^     TOK_WARNINGS = 336,$/;"	e	enum:yytokentype	file:
TOK_WARNINGS	yysphinxql.c	225;"	d	file:
TOK_WARNINGS	yysphinxql.h	/^     TOK_WARNINGS = 336,$/;"	e	enum:yytokentype
TOK_WARNINGS	yysphinxql.h	201;"	d
TOK_WEIGHT	yysphinxexpr.c	/^     TOK_WEIGHT = 276,$/;"	e	enum:yytokentype	file:
TOK_WEIGHT	yysphinxexpr.c	109;"	d	file:
TOK_WEIGHT	yysphinxexpr.h	/^     TOK_WEIGHT = 276,$/;"	e	enum:yytokentype
TOK_WEIGHT	yysphinxexpr.h	85;"	d
TOK_WEIGHT	yysphinxql.c	/^     TOK_WEIGHT = 337,$/;"	e	enum:yytokentype	file:
TOK_WEIGHT	yysphinxql.c	226;"	d	file:
TOK_WEIGHT	yysphinxql.h	/^     TOK_WEIGHT = 337,$/;"	e	enum:yytokentype
TOK_WEIGHT	yysphinxql.h	202;"	d
TOK_WHERE	yysphinxql.c	/^     TOK_WHERE = 338,$/;"	e	enum:yytokentype	file:
TOK_WHERE	yysphinxql.c	227;"	d	file:
TOK_WHERE	yysphinxql.h	/^     TOK_WHERE = 338,$/;"	e	enum:yytokentype
TOK_WHERE	yysphinxql.h	203;"	d
TOK_WITHIN	yysphinxql.c	/^     TOK_WITHIN = 339,$/;"	e	enum:yytokentype	file:
TOK_WITHIN	yysphinxql.c	228;"	d	file:
TOK_WITHIN	yysphinxql.h	/^     TOK_WITHIN = 339,$/;"	e	enum:yytokentype
TOK_WITHIN	yysphinxql.h	204;"	d
TOK_WORD	sphinxexcerpt.cpp	/^		TOK_WORD,			\/\/\/< just a word$/;"	e	enum:ExcerptGen_c::Token_e	file:
TOK_ZONE	yysphinxquery.c	/^     TOK_ZONE = 262,$/;"	e	enum:yytokentype	file:
TOK_ZONE	yysphinxquery.c	70;"	d	file:
TOK_ZONE	yysphinxquery.h	/^     TOK_ZONE = 262,$/;"	e	enum:yytokentype
TOK_ZONE	yysphinxquery.h	46;"	d
TS	sphinxstemru.cpp	/^		TS	= 0x86D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
TS	sphinxstemru.cpp	/^		TS	= 0xD186U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
TS	sphinxstemru.cpp	/^		TS	= 0xF6,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
TVY	sphinxstemru.cpp	/^		TVY	= 0x8AD1U, \/\/ TVYordiy znak$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
TVY	sphinxstemru.cpp	/^		TVY	= 0xD18AU, \/\/ TVYordiy znak$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
TVY	sphinxstemru.cpp	/^		TVY	= 0xFA, \/\/ TVYordiy znak$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
T_MASK	md5.cpp	64;"	d	file:
TagAsCommon	sphinxquery.h	/^	void TagAsCommon ( int iOrder, int iCounter )$/;"	f	struct:XQNode_t
TagDesc_t	sphinx.cpp	/^	struct TagDesc_t$/;"	s	class:CSphArena	file:
TagExcluded	sphinx.cpp	/^static void TagExcluded ( XQNode_t * pNode, bool bNot )$/;"	f	file:
Tag_e	sphinx.h	/^	enum Tag_e$/;"	g	class:CSphSource_XMLPipe
TaggedAlloc	sphinx.cpp	/^int CSphArena::TaggedAlloc ( int iTag, int iBytes )$/;"	f	class:CSphArena
TaggedFreeIndex	sphinx.cpp	/^void CSphArena::TaggedFreeIndex ( int iTag, int iIndex )$/;"	f	class:CSphArena
TaggedFreeTag	sphinx.cpp	/^void CSphArena::TaggedFreeTag ( int iTag )$/;"	f	class:CSphArena
TaggedMatchSorter_fn	searchd.cpp	/^struct TaggedMatchSorter_fn : public SphAccessor_T<CSphMatch>$/;"	s	file:
Tell	sphinxint.h	/^	SphOffset_t				Tell () const				{ return m_iPos + m_iBuffPos; }$/;"	f	class:CSphReader
TermPosFilter_e	sphinxsearch.h	/^enum TermPosFilter_e$/;"	g
Test	sphinxstd.h	/^	bool Test ( const CSphSmallBitvec& dParam ) const$/;"	f	class:CSphSmallBitvec
Test	sphinxstd.h	/^	bool Test ( int iIdx ) const$/;"	f	class:CSphSmallBitvec
TestAccCmp_fn	tests.cpp	/^	explicit TestAccCmp_fn ( int iStride )$/;"	f	struct:TestAccCmp_fn
TestAccCmp_fn	tests.cpp	/^struct TestAccCmp_fn$/;"	s	file:
TestAll	sphinxstd.h	/^	bool TestAll ( bool bSet ) const$/;"	f	class:CSphSmallBitvec
TestCleanup	tests.cpp	/^void TestCleanup ()$/;"	f
TestData	sphinx.cpp	/^	virtual void TestData ( int iData )$/;"	f	class:tDocCollector
TestExpr	tests.cpp	/^void TestExpr ()$/;"	f
TestMisc	tests.cpp	/^void TestMisc ()$/;"	f
TestQueryParser	tests.cpp	/^void TestQueryParser ()$/;"	f
TestRTInit	tests.cpp	/^void TestRTInit ()$/;"	f
TestRTSendVsMerge	tests.cpp	/^void TestRTSendVsMerge ()$/;"	f
TestRTWeightBoundary	tests.cpp	/^void TestRTWeightBoundary ()$/;"	f
TestRwlock	tests.cpp	/^void TestRwlock ()$/;"	f
TestSentenceTokenizer	tests.cpp	/^void TestSentenceTokenizer()$/;"	f
TestSpanSearch	tests.cpp	/^void TestSpanSearch()$/;"	f
TestStridedSort	tests.cpp	/^void TestStridedSort ()$/;"	f
TestStridedSortPass	tests.cpp	/^void TestStridedSortPass ( int iStride, int iCount )$/;"	f
TestStripper	tests.cpp	/^void TestStripper ()$/;"	f
TestTokenizer	tests.cpp	/^void TestTokenizer ( bool bUTF8 )$/;"	f
TestWriter	tests.cpp	/^void TestWriter()$/;"	f
ThdDesc_t	searchd.cpp	/^	ThdDesc_t ()$/;"	f	struct:ThdDesc_t
ThdDesc_t	searchd.cpp	/^struct ThdDesc_t$/;"	s	file:
ThdSaveIndexes	searchd.cpp	/^static void ThdSaveIndexes ( void * )$/;"	f	file:
ThdState_e	searchd.cpp	/^enum ThdState_e$/;"	g	file:
ThreadsOnlyMutex_t	searchd.cpp	/^struct ThreadsOnlyMutex_t$/;"	s	file:
TickHead	searchd.cpp	/^void TickHead ( CSphProcessSharedMutex * pAcceptMutex )$/;"	f
TickPreforked	searchd.cpp	/^void TickPreforked ( CSphProcessSharedMutex * pAcceptMutex )$/;"	f
ToBigInt	searchd.cpp	/^	inline static SphAttr_t ToBigInt ( const SqlInsert_t & tVal )$/;"	f	class:CSphMatchVariant
ToDocid	searchd.cpp	7765;"	d	file:
ToDocid	searchd.cpp	7767;"	d	file:
ToInt	searchd.cpp	/^	inline static SphAttr_t ToInt ( const SqlInsert_t & tVal )$/;"	f	class:CSphMatchVariant
ToLower	sphinx.h	/^	inline int	ToLower ( int iCode ) const$/;"	f	class:CSphLowercaser
ToLower	sphinxsort.cpp	/^	char ToLower ( char c )$/;"	f	class:SortClauseTokenizer_t
ToLower	sphinxstd.h	/^	void ToLower ()$/;"	f	struct:CSphString
ToLowerCase	spelldump.cpp	/^char CISpellAffix::ToLowerCase ( char cChar )$/;"	f	class:CISpellAffix
ToNormalForm	sphinx.cpp	/^bool CSphDictCRCTraits::ToNormalForm ( BYTE * pWord )$/;"	f	class:CSphDictCRCTraits
ToUpper	sphinxstd.h	/^	void ToUpper ()$/;"	f	struct:CSphString
TokenFunctorTraits_c	sphinxexcerpt.cpp	/^	explicit TokenFunctorTraits_c ( SnippetsDocIndex_c & tContainer, ISphTokenizer * pTokenizer, CSphDict * pDict, const ExcerptQuery_t & tQuery, const CSphIndexSettings & tSettingsIndex, const char * sDoc, int iDocLen )$/;"	f	class:TokenFunctorTraits_c
TokenFunctorTraits_c	sphinxexcerpt.cpp	/^class TokenFunctorTraits_c : public ISphNoncopyable, public ExcerptQuery_t$/;"	c	file:
TokenIsBlended	sphinx.cpp	/^	virtual bool					TokenIsBlended () const { return m_pLastToken->m_bBlended; }$/;"	f	class:CSphTokenizer_Filter
TokenIsBlended	sphinx.h	/^	virtual bool					TokenIsBlended () const { return m_bBlended; }$/;"	f	class:ISphTokenizer
TokenIsBlendedPart	sphinx.cpp	/^	virtual bool					TokenIsBlendedPart () const { return m_pLastToken->m_bBlendedPart; }$/;"	f	class:CSphTokenizer_Filter
TokenIsBlendedPart	sphinx.h	/^	virtual bool					TokenIsBlendedPart () const { return m_bBlendedPart; }$/;"	f	class:ISphTokenizer
TokenSpan_t	sphinxexcerpt.cpp	/^	struct TokenSpan_t$/;"	s	class:ExcerptGen_c	file:
Token_e	sphinxexcerpt.cpp	/^	enum Token_e$/;"	g	class:ExcerptGen_c	file:
Token_t	sphinxexcerpt.cpp	/^	struct Token_t$/;"	s	class:ExcerptGen_c	file:
Token_t	sphinxexcerpt.cpp	/^	typedef ExcerptGen_c::Token_t Token_t;$/;"	t	class:ISnippetsQword	file:
TokenizeDocument	sphinxexcerpt.cpp	/^static void TokenizeDocument ( TokenFunctorTraits_c & tFunctor, const CSphHTMLStripper * pStripper, DWORD iSPZ )$/;"	f	file:
TokenizeDocument	sphinxexcerpt.cpp	/^void ExcerptGen_c::TokenizeDocument ( char * pData, int iDataLen, CSphDict * pDict, ISphTokenizer * pTokenizer, bool bFillMasks, const ExcerptQuery_t & q, const CSphIndexSettings & tSettings, int iSPZ )$/;"	f	class:ExcerptGen_c
TokenizeOnWhitespace	sphinx.cpp	/^static int TokenizeOnWhitespace ( CSphVector<CSphString> & dTokens, BYTE * sFrom, bool bUtf8 )$/;"	f	file:
TokenizeQuery	sphinxexcerpt.cpp	/^void ExcerptGen_c::TokenizeQuery ( const ExcerptQuery_t & tQuery, CSphDict * pDict, ISphTokenizer * pTokenizer, const CSphIndexSettings & tSettings )$/;"	f	class:ExcerptGen_c
TrackBlendedStart	sphinx.cpp	/^static int TrackBlendedStart ( const ISphTokenizer * pTokenizer, int iBlendedHitsStart, int iHitsCount )$/;"	f	file:
TransferData	sphinx.cpp	/^	inline void TransferData ( QWORD & tQword, SphWordID_t iWordID, BYTE * sWord, CSphIndex_VLN * pSourceIndex, CSphRowitem * pInline, ISphFilter * pFilter )$/;"	f	class:CSphMerger
TransferHits	sphinx.cpp	/^	inline void TransferHits ( QWORD & tQword, CSphRowitem * pInline, CSphAggregateHit & tHit )$/;"	f	class:CSphMerger
Transform	sphinxquery.cpp	/^	void Transform ( int iXQ, const XQQuery_t * pXQ )$/;"	f	class:RevealCommon_t
TransformNear	sphinx.cpp	/^static void TransformNear ( XQNode_t ** ppNode )$/;"	f	file:
TransformQuorum	sphinx.cpp	/^static void TransformQuorum ( XQNode_t ** ppNode )$/;"	f	file:
TryRename	searchd.cpp	/^bool TryRename ( const char * sIndex, const char * sPrefix, const char * sFromPostfix, const char * sToPostfix, bool bFatal, bool bCheckExist=true )$/;"	f
TryToExec	sphinxutils.cpp	/^bool CSphConfigParser::TryToExec ( char * pBuffer, char * pEnd, const char * szFilename, CSphVector<char> & dResult )$/;"	f	class:CSphConfigParser
TryToExec	sphinxutils.cpp	/^bool TryToExec ( char * pBuffer, char * pEnd, const char * szFilename, CSphVector<char> & dResult, char * sError, int iErrorLen )$/;"	f
U	sphinxstemru.cpp	/^		U	= 0x83D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
U	sphinxstemru.cpp	/^		U	= 0xD183U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
U	sphinxstemru.cpp	/^		U	= 0xF3,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
U64C	sphinxstd.h	129;"	d
U64C	sphinxstd.h	142;"	d
UINT16_MASK	sphinxexcerpt.cpp	32;"	d	file:
UINT16_MAX	llsphinxql.c	81;"	d	file:
UINT32_MASK	sphinxexcerpt.cpp	31;"	d	file:
UINT32_MAX	llsphinxql.c	84;"	d	file:
UINT64_FMT	sphinxstd.h	157;"	d
UINT64_MAX	sphinxstd.h	161;"	d
UINT8_MAX	llsphinxql.c	78;"	d	file:
UItoA	sphinxutils.cpp	/^static void UItoA ( char** ppOutput, Uint uVal, int iBase=10, int iWidth=0, int iPrec=0, const char cFill=' ' )$/;"	f	file:
ULLONG_MAX	sphinxint.h	475;"	d
UNALIGNED_RAM_ACCESS	sphinx.h	32;"	d
USERVAR_INT_SET	searchd.cpp	/^	USERVAR_INT_SET$/;"	e	enum:Uservar_e	file:
USE_64BIT	sphinx.h	82;"	d
USE_LIBEXPAT	sphinx.h	25;"	d
USE_LIBICONV	sphinx.h	26;"	d
USE_LIBSTEMMER	sphinx.h	28;"	d
USE_LIBXML	sphinx.h	27;"	d
USE_LITTLE_ENDIAN	sphinx.h	33;"	d
USE_MYSQL	sphinx.h	22;"	d
USE_ODBC	sphinx.h	24;"	d
USE_PGSQL	sphinx.h	23;"	d
USE_SYSLOG	sphinx.h	30;"	d
USE_WINDOWS	sphinx.h	29;"	d
USE_WINDOWS	sphinx.h	35;"	d
UdfCall_t	sphinxexpr.cpp	/^UdfCall_t::UdfCall_t ()$/;"	f	class:UdfCall_t
UdfCall_t	sphinxexpr.cpp	/^struct UdfCall_t$/;"	s	file:
UdfDeinit_fn	sphinxexpr.cpp	/^typedef void ( *UdfDeinit_fn ) ( SPH_UDF_INIT * init );$/;"	t	file:
UdfDouble_fn	sphinxexpr.cpp	/^typedef double ( *UdfDouble_fn ) ( SPH_UDF_INIT *, SPH_UDF_ARGS *, char * );$/;"	t	file:
UdfFunc_t	sphinxexpr.cpp	/^struct UdfFunc_t$/;"	s	file:
UdfInit_fn	sphinxexpr.cpp	/^typedef int ( *UdfInit_fn ) ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error );$/;"	t	file:
UdfInt_fn	sphinxexpr.cpp	/^typedef sphinx_int64_t ( *UdfInt_fn ) ( SPH_UDF_INIT *, SPH_UDF_ARGS *, char * );$/;"	t	file:
UdfLib_t	sphinxexpr.cpp	/^struct UdfLib_t$/;"	s	file:
UnLock	searchd.cpp	/^	inline void UnLock() const$/;"	f	class:CSphSchemaMT
UnexpectedCharaters	sphinx.cpp	/^void CSphSource_XMLPipe2::UnexpectedCharaters ( const char * pCharacters, int iLen, const char * szComment )$/;"	f	class:CSphSource_XMLPipe2
Ungroup	sphinxsort.cpp	/^	virtual void	Ungroup ( CSphMatch * ) {}$/;"	f	class:IAggrFunc
Ungroup	sphinxsort.cpp	/^	virtual void Ungroup ( CSphMatch * pDst )$/;"	f	class:AggrAvg_t
Uniq	sphinxstd.h	/^	void Uniq ()$/;"	f	class:CSphVector
UnlinkFile	sphinx.cpp	/^void CSphWriter::UnlinkFile()$/;"	f	class:CSphWriter
Unlock	searchd.cpp	/^void IndexHash_c::Unlock () const$/;"	f	class:IndexHash_c
Unlock	searchd.cpp	/^void ServedIndex_t::Unlock () const$/;"	f	class:ServedIndex_t
Unlock	searchd.cpp	/^void StaticThreadsOnlyMutex_t::Unlock()$/;"	f	class:StaticThreadsOnlyMutex_t
Unlock	searchd.cpp	/^void ThreadsOnlyMutex_t::Unlock()$/;"	f	class:ThreadsOnlyMutex_t
Unlock	sphinx.cpp	/^void CSphIndex_VLN::Unlock()$/;"	f	class:CSphIndex_VLN
Unlock	sphinxstd.h	/^	bool Unlock ()$/;"	f	class:CSphStaticMutex
UnlockOnDestroy	searchd.cpp	/^	explicit UnlockOnDestroy ( const CSphSchemaMT * lock ) : m_pLock ( lock )$/;"	f	class:UnlockOnDestroy
UnlockOnDestroy	searchd.cpp	/^class UnlockOnDestroy$/;"	c	file:
Unset	sphinxstd.h	/^	void Unset ( int iIdx=-1 )$/;"	f	class:CSphSmallBitvec
UnzipDocid	sphinxint.h	/^	SphDocID_t	UnzipDocid ()	{ return UnzipInt(); }$/;"	f	class:CSphReader
UnzipDocid	sphinxint.h	/^	SphDocID_t	UnzipDocid ()	{ return UnzipOffset(); }$/;"	f	class:CSphReader
UnzipDocid	sphinxrt.cpp	125;"	d	file:
UnzipDword	sphinxrt.cpp	119;"	d	file:
UnzipInt	sphinx.cpp	/^DWORD CSphBin::UnzipInt ()$/;"	f	class:CSphBin
UnzipInt	sphinx.cpp	/^DWORD CSphReader::UnzipInt ()			{ SPH_UNZIP_IMPL ( DWORD, GetByte() ); }$/;"	f	class:CSphReader
UnzipOffset	sphinx.cpp	/^SphOffset_t CSphBin::UnzipOffset ()$/;"	f	class:CSphBin
UnzipOffset	sphinx.cpp	/^SphOffset_t CSphReader::UnzipOffset ()	{ SPH_UNZIP_IMPL ( SphOffset_t, GetByte() ); }$/;"	f	class:CSphReader
UnzipQword	sphinxrt.cpp	120;"	d	file:
UnzipWordid	sphinxint.h	/^	SphWordID_t	UnzipWordid ()	{ return UnzipInt(); }$/;"	f	class:CSphReader
UnzipWordid	sphinxint.h	/^	SphWordID_t	UnzipWordid ()	{ return UnzipOffset(); }$/;"	f	class:CSphReader
UnzipWordid	sphinxrt.cpp	126;"	d	file:
Update	sphinxsearch.cpp	/^	void Update ( const ExtHit_t * pHlist )$/;"	f	struct:RankerState_Fieldmask_fn
Update	sphinxsearch.cpp	/^	void Update ( const ExtHit_t * pHlist )$/;"	f	struct:RankerState_MatchAny_fn
Update	sphinxsearch.cpp	/^	void Update ( const ExtHit_t * pHlist )$/;"	f	struct:RankerState_ProximityBM25Exact_fn
Update	sphinxsearch.cpp	/^	void Update ( const ExtHit_t * pHlist )$/;"	f	struct:RankerState_ProximityPayload_fn
Update	sphinxsearch.cpp	/^	void Update ( const ExtHit_t * pHlist )$/;"	f	struct:RankerState_Proximity_fn
Update	sphinxsearch.cpp	/^	void Update ( const ExtHit_t * pHlist )$/;"	f	struct:RankerState_Wordcount_fn
Update	sphinxsearch.cpp	/^void RankerState_Expr_fn::Update ( const ExtHit_t * pHlist )$/;"	f	class:RankerState_Expr_fn
Update	sphinxsort.cpp	/^	virtual void Update ( CSphMatch * pDst, const CSphMatch * pSrc, bool )$/;"	f	class:AggrMax_t
Update	sphinxsort.cpp	/^	virtual void Update ( CSphMatch * pDst, const CSphMatch * pSrc, bool )$/;"	f	class:AggrMin_t
Update	sphinxsort.cpp	/^	virtual void Update ( CSphMatch * pDst, const CSphMatch * pSrc, bool )$/;"	f	class:AggrSum_t
Update	sphinxsort.cpp	/^	virtual void Update ( CSphMatch * pDst, const CSphMatch * pSrc, bool bGrouped )$/;"	f	class:AggrAvg_t
UpdateAliveChildrenList	searchd.cpp	/^static void UpdateAliveChildrenList ( CSphVector<int> & dChildren )$/;"	f	file:
UpdateAttr	searchd.cpp	/^void SqlParser_c::UpdateAttr ( const CSphString& sName, const SqlNode_t * pValue, ESphAttr eType )$/;"	f	class:SqlParser_c
UpdateAttributes	sphinx.cpp	/^int CSphIndex_VLN::UpdateAttributes ( const CSphAttrUpdate & tUpd, int iIndex, CSphString & sError )$/;"	f	class:CSphIndex_VLN
UpdateBuffer	sphinx.cpp	/^bool CSphSource_XMLPipe::UpdateBuffer ()$/;"	f	class:CSphSource_XMLPipe
UpdateCache	sphinx.cpp	/^void CSphReader::UpdateCache ()$/;"	f	class:CSphReader
UpdateGaps	sphinxexcerpt.cpp	/^void ExcerptGen_c::UpdateGaps ( Passage_t & tPass, const TokenSpan_t & tSpan, int iMaxWords )$/;"	f	class:ExcerptGen_c
UpdateGetLockedIndex	searchd.cpp	/^static const ServedIndex_t * UpdateGetLockedIndex ( const CSphString & sName, bool bMvaUpdate )$/;"	f	file:
UpdateMVAAttr	searchd.cpp	/^void SqlParser_c::UpdateMVAAttr ( const CSphString & sName, const SqlNode_t & dValues )$/;"	f	class:SqlParser_c
UpdateMinMaxDocids	sphinxint.h	/^void AttrIndexBuilder_t<DOCID>::UpdateMinMaxDocids ( DOCID uDocID )$/;"	f	class:AttrIndexBuilder_t
UpdateReplyParser_t	searchd.cpp	/^	explicit UpdateReplyParser_t ( int * pUpd )$/;"	f	struct:UpdateReplyParser_t
UpdateReplyParser_t	searchd.cpp	/^struct UpdateReplyParser_t : public IReplyParser_t$/;"	s	file:
UpdateRequestBuilder_t	searchd.cpp	/^	explicit UpdateRequestBuilder_t ( const CSphAttrUpdate & pUpd ) : m_tUpd ( pUpd ) {}$/;"	f	struct:UpdateRequestBuilder_t
UpdateRequestBuilder_t	searchd.cpp	/^struct UpdateRequestBuilder_t : public IRequestBuilder_t$/;"	s	file:
UpdateSchema	sphinx.cpp	/^bool CSphSource::UpdateSchema ( CSphSchema * pInfo, CSphString & sError )$/;"	f	class:CSphSource
UpdateStatement	searchd.cpp	/^bool SqlParser_c::UpdateStatement ( SqlNode_t * pNode )$/;"	f	class:SqlParser_c
UpdateTags	sphinx.cpp	/^void CSphHTMLStripper::UpdateTags ()$/;"	f	class:CSphHTMLStripper
UseIndex	searchd.cpp	/^const ServedIndex_t * SearchHandler_c::UseIndex ( int iLocal ) const$/;"	f	class:SearchHandler_c
UservarIntSet_c	sphinxint.h	/^class UservarIntSet_c : public CSphVector<SphAttr_t>, public ISphRefcountedMT$/;"	c
Uservar_e	searchd.cpp	/^enum Uservar_e$/;"	g	file:
Uservar_t	searchd.cpp	/^	Uservar_t ()$/;"	f	struct:Uservar_t
Uservar_t	searchd.cpp	/^struct Uservar_t$/;"	s	file:
UservarsHook	searchd.cpp	/^UservarIntSet_c * UservarsHook ( const CSphString & sUservar )$/;"	f
UsesAttrs	sphinxfilter.h	/^	bool UsesAttrs() const { return m_bUsesAttrs; }$/;"	f	struct:ISphFilter
UsesAttrs	sphinxsort.cpp	/^	bool		UsesAttrs () const										{ return m_bUsesAttrs; }$/;"	f	class:CSphMatchQueueTraits
UsesBitfields	sphinx.h	/^	bool UsesBitfields ()$/;"	f	struct:CSphMatchComparatorState
Utf8CIHash_fn	sphinxsort.cpp	/^class Utf8CIHash_fn$/;"	c	file:
V	sphinxstemru.cpp	/^		V	= 0xB2D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
V	sphinxstemru.cpp	/^		V	= 0xD0B2U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
V	sphinxstemru.cpp	/^		V	= 0xE2,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
VARCHAR_COL_SIZE	sphinx.h	/^	static const int		VARCHAR_COL_SIZE	= 1048576;		\/\/\/< default column buffer size for VARCHAR columns$/;"	m	struct:CSphSource_ODBC
VERSION	Makefile	/^VERSION = 2.0.8$/;"	m
VER_COMMAND_EXCERPT	searchd.cpp	/^	VER_COMMAND_EXCERPT		= 0x104,$/;"	e	enum:__anon22	file:
VER_COMMAND_FLUSHATTRS	searchd.cpp	/^	VER_COMMAND_FLUSHATTRS	= 0x100,$/;"	e	enum:__anon22	file:
VER_COMMAND_KEYWORDS	searchd.cpp	/^	VER_COMMAND_KEYWORDS	= 0x100,$/;"	e	enum:__anon22	file:
VER_COMMAND_SEARCH	searchd.cpp	/^	VER_COMMAND_SEARCH		= 0x119,$/;"	e	enum:__anon22	file:
VER_COMMAND_SPHINXQL	searchd.cpp	/^	VER_COMMAND_SPHINXQL	= 0x100$/;"	e	enum:__anon22	file:
VER_COMMAND_STATUS	searchd.cpp	/^	VER_COMMAND_STATUS		= 0x100,$/;"	e	enum:__anon22	file:
VER_COMMAND_UPDATE	searchd.cpp	/^	VER_COMMAND_UPDATE		= 0x102,$/;"	e	enum:__anon22	file:
VER_MASTER	searchd.cpp	/^	VER_MASTER = 1$/;"	e	enum:__anon23	file:
ValidateKey	sphinxutils.cpp	/^bool CSphConfigParser::ValidateKey ( const char * sKey )$/;"	f	class:CSphConfigParser
Verify	sphinxrt.cpp	51;"	d	file:
Verify	sphinxrt.cpp	53;"	d	file:
Verify	sphinxstd.h	291;"	d
Verify	sphinxstd.h	293;"	d
VerifyID	sphinx.cpp	/^SphDocID_t CSphSource::VerifyID ( SphDocID_t uID )$/;"	f	class:CSphSource
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchAttrGt_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchAttrLt_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchCustom_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchExpr_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchGeneric2_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchGeneric3_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchGeneric4_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchGeneric5_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchRelevanceLt_fn
VirtualIsLess	sphinxsort.cpp	/^	virtual bool VirtualIsLess ( const CSphMatch & a, const CSphMatch & b, const CSphMatchComparatorState & t ) const$/;"	f	struct:MatchTimeSegments_fn
W	sphinxstemen.cpp	217;"	d	file:
WARNS_THRESH	sphinxutils.h	/^	static const int	WARNS_THRESH	= 5;$/;"	m	class:CSphConfigParser
WARN_ROW_SIZE	sphinx.h	/^	static const int		WARN_ROW_SIZE		= 32*1048576;	\/\/\/< warning thresh (NOT a hard limit) on row buffer size$/;"	m	struct:CSphSource_ODBC
WARN_SIZE	sphinx.cpp	/^	static const int	WARN_SIZE	= 262144;$/;"	m	struct:CSphBin	file:
WATCHDOG_SIGKILL	searchd.cpp	46;"	d	file:
WIN32_LEAN_AND_MEAN	sphinxstd.h	88;"	d
WIN32_PIPE_BUFSIZE	searchd.cpp	/^const int		WIN32_PIPE_BUFSIZE		= 32;$/;"	v
WINAPI	searchd.cpp	14078;"	d	file:
WITH_BM25	sphinxsearch.cpp	/^static const bool WITH_BM25 = true;$/;"	v	file:
WITH_QWORD	sphinx.cpp	1230;"	d	file:
WORD	sphinxstd.h	/^typedef unsigned short		WORD;$/;"	t
WORDID_MAX	sphinxrt.cpp	40;"	d	file:
WORDID_MAX	sphinxrt.cpp	42;"	d	file:
WRITE_OUT_DATA_SIZE	tests.cpp	1842;"	d	file:
WaitForRemoteAgents	searchd.cpp	/^int WaitForRemoteAgents ( CSphVector<AgentConn_t> & dAgents, int iTimeout, IReplyParser_t & tParser, int64_t * pWaited )$/;"	f
WalkTree	sphinxexpr.cpp	/^void ExprParser_t::WalkTree ( int iRoot, T & FUNCTOR )$/;"	f	class:ExprParser_t
WarmupCache	sphinxsearch.cpp	/^bool NodeCacheContainer_t::WarmupCache ( ExtNode_i * pChild, int iQwords )$/;"	f	class:NodeCacheContainer_t
Warning	sphinxquery.cpp	/^void XQParser_t::Warning ( const char * sTemplate, ... )$/;"	f	class:XQParser_t
WasTokenSpecial	sphinx.cpp	/^	virtual bool					WasTokenSpecial ()							{ return m_pLastToken->m_bSpecial; }$/;"	f	class:CSphTokenizer_Filter
WasTokenSpecial	sphinx.h	/^	virtual bool					WasTokenSpecial () { return m_bWasSpecial; }$/;"	f	class:ISphTokenizer
WasTokenSynonym	sphinx.h	/^	virtual bool					WasTokenSynonym () const { return m_bWasSynonym; }$/;"	f	class:ISphTokenizer
WeightCheck_fn	sphinxexpr.cpp	/^	explicit WeightCheck_fn ( bool * pRes )$/;"	f	struct:WeightCheck_fn
WeightCheck_fn	sphinxexpr.cpp	/^struct WeightCheck_fn$/;"	s	file:
WinErrorInfo	searchd.cpp	/^const char * WinErrorInfo ()$/;"	f
Wlock	searchd.cpp	/^void IndexHash_c::Wlock () const$/;"	f	class:IndexHash_c
WordDictInfo_t	sphinx.cpp	/^WordDictInfo_t::WordDictInfo_t ()$/;"	f	class:WordDictInfo_t
WordDictInfo_t	sphinx.cpp	/^struct WordDictInfo_t$/;"	s	file:
WordDocsGreaterOp_t	sphinx.cpp	/^struct WordDocsGreaterOp_t$/;"	s	file:
WordLess	spelldump.cpp	/^struct WordLess$/;"	s	file:
WordMap_t	spelldump.cpp	/^typedef CSphOrderedHash < CSphVector<MapInfo_t>, CSphString, CSphStrHashFunc, 100000 > WordMap_t;$/;"	t	file:
WordReaderContext_t	sphinx.cpp	/^WordReaderContext_t::WordReaderContext_t()$/;"	f	class:WordReaderContext_t
WordReaderContext_t	sphinx.cpp	/^struct WordReaderContext_t$/;"	s	file:
WordStat_t	sphinx.h	/^		WordStat_t()$/;"	f	struct:CSphQueryResultMeta::WordStat_t
WordStat_t	sphinx.h	/^	struct WordStat_t$/;"	s	class:CSphQueryResultMeta
Word_t	indexer.cpp	/^struct Word_t$/;"	s	file:
WordformContainer_t	sphinx.cpp	/^WordformContainer_t::WordformContainer_t ()$/;"	f	class:WordformContainer_t
WordformContainer_t	sphinx.cpp	/^struct WordformContainer_t$/;"	s	file:
Write	sphinx.cpp	/^void CSphDocMVA::Write ( CSphWriter & tWriter )$/;"	f	class:CSphDocMVA
WriteFileInfo	sphinx.cpp	/^static void WriteFileInfo ( CSphWriter & tWriter, const CSphSavedFile & tInfo )$/;"	f	file:
WriteHeader	sphinx.cpp	/^bool CSphIndex_VLN::WriteHeader ( CSphWriter & fdInfo, SphOffset_t iCheckpointsPos, DWORD iCheckpointCount )$/;"	f	class:CSphIndex_VLN
WriteLock	searchd.cpp	/^void ServedIndex_t::WriteLock () const$/;"	f	class:ServedIndex_t
WriteSchema	sphinx.cpp	/^void WriteSchema ( CSphWriter & fdInfo, const CSphSchema & tSchema )$/;"	f
WriteSchemaColumn	sphinx.cpp	/^static void WriteSchemaColumn ( CSphWriter & fdInfo, const CSphColumnInfo & tCol )$/;"	f	file:
WriteValue	sphinxstd.h	/^	void WriteValue ( const T& tNewValue )$/;"	f	class:CSphProcessSharedVariable
XMLCALL	sphinx.cpp	51;"	d	file:
XMLIMPORT	sphinx.cpp	46;"	d	file:
XQDEBUG	sphinxquery.cpp	1207;"	d	file:
XQKeyword_t	sphinxquery.h	/^	XQKeyword_t ( const char * sWord, int iPos )$/;"	f	struct:XQKeyword_t
XQKeyword_t	sphinxquery.h	/^	XQKeyword_t ()$/;"	f	struct:XQKeyword_t
XQKeyword_t	sphinxquery.h	/^struct XQKeyword_t$/;"	s
XQLimitSpec_t	sphinxquery.h	/^	XQLimitSpec_t ( const XQLimitSpec_t& dLimit )$/;"	f	struct:XQLimitSpec_t
XQLimitSpec_t	sphinxquery.h	/^	XQLimitSpec_t ()$/;"	f	struct:XQLimitSpec_t
XQLimitSpec_t	sphinxquery.h	/^struct XQLimitSpec_t$/;"	s
XQNode_t	sphinxquery.h	/^	explicit XQNode_t ( const XQLimitSpec_t & dSpec )$/;"	f	struct:XQNode_t
XQNode_t	sphinxquery.h	/^struct XQNode_t : public ISphNoncopyable$/;"	s
XQOperator_e	sphinxquery.h	/^enum XQOperator_e$/;"	g
XQParser_t	sphinxquery.cpp	/^XQParser_t::XQParser_t ()$/;"	f	class:XQParser_t
XQParser_t	sphinxquery.cpp	/^class XQParser_t$/;"	c	file:
XQQuery_t	sphinxquery.h	/^	XQQuery_t ()$/;"	f	struct:XQQuery_t
XQQuery_t	sphinxquery.h	/^struct XQQuery_t : public ISphNoncopyable$/;"	s
XQStarPosition	sphinxquery.h	/^enum XQStarPosition$/;"	g
XRANK_BM25	sphinxsearch.cpp	/^	XRANK_BM25,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_DOC_WORD_COUNT	sphinxsearch.cpp	/^	XRANK_DOC_WORD_COUNT,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_EXACT_HIT	sphinxsearch.cpp	/^	XRANK_EXACT_HIT,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_FIELD_MASK	sphinxsearch.cpp	/^	XRANK_FIELD_MASK,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_HIT_COUNT	sphinxsearch.cpp	/^	XRANK_HIT_COUNT,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_LCS	sphinxsearch.cpp	/^	XRANK_LCS,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_MAX_LCS	sphinxsearch.cpp	/^	XRANK_MAX_LCS,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_MAX_WINDOW_HITS	sphinxsearch.cpp	/^	XRANK_MAX_WINDOW_HITS,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_MIN_BEST_SPAN_POS	sphinxsearch.cpp	/^	XRANK_MIN_BEST_SPAN_POS,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_MIN_HIT_POS	sphinxsearch.cpp	/^	XRANK_MIN_HIT_POS,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_QUERY_WORD_COUNT	sphinxsearch.cpp	/^	XRANK_QUERY_WORD_COUNT,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_SUM	sphinxsearch.cpp	/^	XRANK_SUM$/;"	e	enum:ExprRankerNode_e	file:
XRANK_TF_IDF	sphinxsearch.cpp	/^	XRANK_TF_IDF,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_USER_WEIGHT	sphinxsearch.cpp	/^	XRANK_USER_WEIGHT,$/;"	e	enum:ExprRankerNode_e	file:
XRANK_WORD_COUNT	sphinxsearch.cpp	/^	XRANK_WORD_COUNT,$/;"	e	enum:ExprRankerNode_e	file:
Y	sphinxstemru.cpp	/^		Y	= 0x8BD1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
Y	sphinxstemru.cpp	/^		Y	= 0xD18BU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
Y	sphinxstemru.cpp	/^		Y	= 0xFB,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
YA	sphinxstemru.cpp	/^		YA	= 0x8FD1U$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
YA	sphinxstemru.cpp	/^		YA	= 0xD18FU$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
YA	sphinxstemru.cpp	/^		YA	= 0xFF$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
YO	sphinxstemru.cpp	/^		YO	= 0x91D1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
YO	sphinxstemru.cpp	/^		YO	= 0xB8,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
YO	sphinxstemru.cpp	/^		YO	= 0xD191U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
YU	sphinxstemru.cpp	/^		YU	= 0x8ED1U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
YU	sphinxstemru.cpp	/^		YU	= 0xD18EU,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
YU	sphinxstemru.cpp	/^		YU	= 0xFE,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
YYABORT	yysphinxexpr.c	575;"	d	file:
YYABORT	yysphinxql.c	1098;"	d	file:
YYABORT	yysphinxquery.c	477;"	d	file:
YYABORT	yysphinxselect.c	569;"	d	file:
YYACCEPT	yysphinxexpr.c	574;"	d	file:
YYACCEPT	yysphinxql.c	1097;"	d	file:
YYACCEPT	yysphinxquery.c	476;"	d	file:
YYACCEPT	yysphinxselect.c	568;"	d	file:
YYBACKUP	yysphinxexpr.c	586;"	d	file:
YYBACKUP	yysphinxql.c	1109;"	d	file:
YYBACKUP	yysphinxquery.c	488;"	d	file:
YYBACKUP	yysphinxselect.c	580;"	d	file:
YYBISON	yysphinxexpr.c	37;"	d	file:
YYBISON	yysphinxql.c	37;"	d	file:
YYBISON	yysphinxquery.c	37;"	d	file:
YYBISON	yysphinxselect.c	37;"	d	file:
YYCOPY	yysphinxexpr.c	224;"	d	file:
YYCOPY	yysphinxexpr.c	227;"	d	file:
YYCOPY	yysphinxql.c	338;"	d	file:
YYCOPY	yysphinxql.c	341;"	d	file:
YYCOPY	yysphinxquery.c	186;"	d	file:
YYCOPY	yysphinxquery.c	189;"	d	file:
YYCOPY	yysphinxselect.c	197;"	d	file:
YYCOPY	yysphinxselect.c	200;"	d	file:
YYDEBUG	yysphinxexpr.c	133;"	d	file:
YYDEBUG	yysphinxql.c	256;"	d	file:
YYDEBUG	yysphinxquery.c	88;"	d	file:
YYDEBUG	yysphinxselect.c	115;"	d	file:
YYDPRINTF	yysphinxexpr.c	633;"	d	file:
YYDPRINTF	yysphinxexpr.c	717;"	d	file:
YYDPRINTF	yysphinxql.c	1156;"	d	file:
YYDPRINTF	yysphinxql.c	1240;"	d	file:
YYDPRINTF	yysphinxquery.c	535;"	d	file:
YYDPRINTF	yysphinxquery.c	619;"	d	file:
YYDPRINTF	yysphinxselect.c	627;"	d	file:
YYDPRINTF	yysphinxselect.c	711;"	d	file:
YYDSYMPRINT	yysphinxexpr.c	639;"	d	file:
YYDSYMPRINT	yysphinxexpr.c	718;"	d	file:
YYDSYMPRINT	yysphinxql.c	1162;"	d	file:
YYDSYMPRINT	yysphinxql.c	1241;"	d	file:
YYDSYMPRINT	yysphinxquery.c	541;"	d	file:
YYDSYMPRINT	yysphinxquery.c	620;"	d	file:
YYDSYMPRINT	yysphinxselect.c	633;"	d	file:
YYDSYMPRINT	yysphinxselect.c	712;"	d	file:
YYDSYMPRINTF	yysphinxexpr.c	645;"	d	file:
YYDSYMPRINTF	yysphinxexpr.c	719;"	d	file:
YYDSYMPRINTF	yysphinxql.c	1168;"	d	file:
YYDSYMPRINTF	yysphinxql.c	1242;"	d	file:
YYDSYMPRINTF	yysphinxquery.c	547;"	d	file:
YYDSYMPRINTF	yysphinxquery.c	621;"	d	file:
YYDSYMPRINTF	yysphinxselect.c	639;"	d	file:
YYDSYMPRINTF	yysphinxselect.c	713;"	d	file:
YYEMPTY	yysphinxexpr.c	571;"	d	file:
YYEMPTY	yysphinxql.c	1094;"	d	file:
YYEMPTY	yysphinxquery.c	473;"	d	file:
YYEMPTY	yysphinxselect.c	565;"	d	file:
YYEOF	yysphinxexpr.c	572;"	d	file:
YYEOF	yysphinxql.c	1095;"	d	file:
YYEOF	yysphinxquery.c	474;"	d	file:
YYEOF	yysphinxselect.c	566;"	d	file:
YYERRCODE	yysphinxexpr.c	604;"	d	file:
YYERRCODE	yysphinxql.c	1127;"	d	file:
YYERRCODE	yysphinxquery.c	506;"	d	file:
YYERRCODE	yysphinxselect.c	598;"	d	file:
YYERROR	yysphinxexpr.c	576;"	d	file:
YYERROR	yysphinxql.c	1099;"	d	file:
YYERROR	yysphinxquery.c	478;"	d	file:
YYERROR	yysphinxselect.c	570;"	d	file:
YYERROR_VERBOSE	yysphinxexpr.c	138;"	d	file:
YYERROR_VERBOSE	yysphinxexpr.c	139;"	d	file:
YYERROR_VERBOSE	yysphinxexpr.c	141;"	d	file:
YYERROR_VERBOSE	yysphinxql.c	261;"	d	file:
YYERROR_VERBOSE	yysphinxql.c	262;"	d	file:
YYERROR_VERBOSE	yysphinxql.c	264;"	d	file:
YYERROR_VERBOSE	yysphinxquery.c	93;"	d	file:
YYERROR_VERBOSE	yysphinxquery.c	94;"	d	file:
YYERROR_VERBOSE	yysphinxquery.c	96;"	d	file:
YYERROR_VERBOSE	yysphinxselect.c	120;"	d	file:
YYERROR_VERBOSE	yysphinxselect.c	121;"	d	file:
YYERROR_VERBOSE	yysphinxselect.c	123;"	d	file:
YYFAIL	yysphinxexpr.c	582;"	d	file:
YYFAIL	yysphinxql.c	1105;"	d	file:
YYFAIL	yysphinxquery.c	484;"	d	file:
YYFAIL	yysphinxselect.c	576;"	d	file:
YYFINAL	yysphinxexpr.c	263;"	d	file:
YYFINAL	yysphinxql.c	377;"	d	file:
YYFINAL	yysphinxquery.c	225;"	d	file:
YYFINAL	yysphinxselect.c	236;"	d	file:
YYFPRINTF	yysphinxexpr.c	630;"	d	file:
YYFPRINTF	yysphinxql.c	1153;"	d	file:
YYFPRINTF	yysphinxquery.c	532;"	d	file:
YYFPRINTF	yysphinxselect.c	624;"	d	file:
YYINITDEPTH	yysphinxexpr.c	727;"	d	file:
YYINITDEPTH	yysphinxql.c	1250;"	d	file:
YYINITDEPTH	yysphinxquery.c	629;"	d	file:
YYINITDEPTH	yysphinxselect.c	721;"	d	file:
YYLAST	yysphinxexpr.c	265;"	d	file:
YYLAST	yysphinxql.c	379;"	d	file:
YYLAST	yysphinxquery.c	227;"	d	file:
YYLAST	yysphinxselect.c	238;"	d	file:
YYLEX	yysphinxexpr.c	620;"	d	file:
YYLEX	yysphinxexpr.c	622;"	d	file:
YYLEX	yysphinxql.c	1143;"	d	file:
YYLEX	yysphinxql.c	1145;"	d	file:
YYLEX	yysphinxquery.c	522;"	d	file:
YYLEX	yysphinxquery.c	524;"	d	file:
YYLEX	yysphinxselect.c	614;"	d	file:
YYLEX	yysphinxselect.c	616;"	d	file:
YYLEX_PARAM	searchd.cpp	7697;"	d	file:
YYLLOC_DEFAULT	yysphinxexpr.c	610;"	d	file:
YYLLOC_DEFAULT	yysphinxql.c	1133;"	d	file:
YYLLOC_DEFAULT	yysphinxquery.c	512;"	d	file:
YYLLOC_DEFAULT	yysphinxselect.c	604;"	d	file:
YYLSP_NEEDED	yysphinxexpr.c	46;"	d	file:
YYLSP_NEEDED	yysphinxql.c	46;"	d	file:
YYLSP_NEEDED	yysphinxquery.c	46;"	d	file:
YYLSP_NEEDED	yysphinxselect.c	46;"	d	file:
YYMAXDEPTH	yysphinxexpr.c	738;"	d	file:
YYMAXDEPTH	yysphinxexpr.c	742;"	d	file:
YYMAXDEPTH	yysphinxql.c	1261;"	d	file:
YYMAXDEPTH	yysphinxql.c	1265;"	d	file:
YYMAXDEPTH	yysphinxquery.c	640;"	d	file:
YYMAXDEPTH	yysphinxquery.c	644;"	d	file:
YYMAXDEPTH	yysphinxselect.c	732;"	d	file:
YYMAXDEPTH	yysphinxselect.c	736;"	d	file:
YYMAXUTOK	yysphinxexpr.c	278;"	d	file:
YYMAXUTOK	yysphinxql.c	392;"	d	file:
YYMAXUTOK	yysphinxquery.c	240;"	d	file:
YYMAXUTOK	yysphinxselect.c	251;"	d	file:
YYNNTS	yysphinxexpr.c	270;"	d	file:
YYNNTS	yysphinxql.c	384;"	d	file:
YYNNTS	yysphinxquery.c	232;"	d	file:
YYNNTS	yysphinxselect.c	243;"	d	file:
YYNRULES	yysphinxexpr.c	272;"	d	file:
YYNRULES	yysphinxql.c	386;"	d	file:
YYNRULES	yysphinxquery.c	234;"	d	file:
YYNRULES	yysphinxselect.c	245;"	d	file:
YYNSTATES	yysphinxexpr.c	274;"	d	file:
YYNSTATES	yysphinxql.c	388;"	d	file:
YYNSTATES	yysphinxquery.c	236;"	d	file:
YYNSTATES	yysphinxselect.c	247;"	d	file:
YYNTOKENS	yysphinxexpr.c	268;"	d	file:
YYNTOKENS	yysphinxql.c	382;"	d	file:
YYNTOKENS	yysphinxquery.c	230;"	d	file:
YYNTOKENS	yysphinxselect.c	241;"	d	file:
YYPACT_NINF	yysphinxexpr.c	445;"	d	file:
YYPACT_NINF	yysphinxql.c	788;"	d	file:
YYPACT_NINF	yysphinxquery.c	386;"	d	file:
YYPACT_NINF	yysphinxselect.c	409;"	d	file:
YYPOPSTACK	yysphinxexpr.c	946;"	d	file:
YYPOPSTACK	yysphinxql.c	1469;"	d	file:
YYPOPSTACK	yysphinxquery.c	848;"	d	file:
YYPOPSTACK	yysphinxselect.c	940;"	d	file:
YYPURE	yysphinxexpr.c	43;"	d	file:
YYPURE	yysphinxql.c	43;"	d	file:
YYPURE	yysphinxquery.c	43;"	d	file:
YYPURE	yysphinxselect.c	43;"	d	file:
YYRECOVERING	yysphinxexpr.c	584;"	d	file:
YYRECOVERING	yysphinxql.c	1107;"	d	file:
YYRECOVERING	yysphinxquery.c	486;"	d	file:
YYRECOVERING	yysphinxselect.c	578;"	d	file:
YYSIZE_T	yysphinxexpr.c	192;"	d	file:
YYSIZE_T	yysphinxexpr.c	554;"	d	file:
YYSIZE_T	yysphinxexpr.c	557;"	d	file:
YYSIZE_T	yysphinxexpr.c	562;"	d	file:
YYSIZE_T	yysphinxexpr.c	566;"	d	file:
YYSIZE_T	yysphinxql.c	1077;"	d	file:
YYSIZE_T	yysphinxql.c	1080;"	d	file:
YYSIZE_T	yysphinxql.c	1085;"	d	file:
YYSIZE_T	yysphinxql.c	1089;"	d	file:
YYSIZE_T	yysphinxql.c	306;"	d	file:
YYSIZE_T	yysphinxquery.c	154;"	d	file:
YYSIZE_T	yysphinxquery.c	456;"	d	file:
YYSIZE_T	yysphinxquery.c	459;"	d	file:
YYSIZE_T	yysphinxquery.c	464;"	d	file:
YYSIZE_T	yysphinxquery.c	468;"	d	file:
YYSIZE_T	yysphinxselect.c	165;"	d	file:
YYSIZE_T	yysphinxselect.c	548;"	d	file:
YYSIZE_T	yysphinxselect.c	551;"	d	file:
YYSIZE_T	yysphinxselect.c	556;"	d	file:
YYSIZE_T	yysphinxselect.c	560;"	d	file:
YYSKELETON_NAME	yysphinxexpr.c	40;"	d	file:
YYSKELETON_NAME	yysphinxql.c	40;"	d	file:
YYSKELETON_NAME	yysphinxquery.c	40;"	d	file:
YYSKELETON_NAME	yysphinxselect.c	40;"	d	file:
YYSTACK_ALLOC	yysphinxexpr.c	173;"	d	file:
YYSTACK_ALLOC	yysphinxexpr.c	177;"	d	file:
YYSTACK_ALLOC	yysphinxexpr.c	180;"	d	file:
YYSTACK_ALLOC	yysphinxexpr.c	194;"	d	file:
YYSTACK_ALLOC	yysphinxql.c	287;"	d	file:
YYSTACK_ALLOC	yysphinxql.c	291;"	d	file:
YYSTACK_ALLOC	yysphinxql.c	294;"	d	file:
YYSTACK_ALLOC	yysphinxql.c	308;"	d	file:
YYSTACK_ALLOC	yysphinxquery.c	135;"	d	file:
YYSTACK_ALLOC	yysphinxquery.c	139;"	d	file:
YYSTACK_ALLOC	yysphinxquery.c	142;"	d	file:
YYSTACK_ALLOC	yysphinxquery.c	156;"	d	file:
YYSTACK_ALLOC	yysphinxselect.c	146;"	d	file:
YYSTACK_ALLOC	yysphinxselect.c	150;"	d	file:
YYSTACK_ALLOC	yysphinxselect.c	153;"	d	file:
YYSTACK_ALLOC	yysphinxselect.c	167;"	d	file:
YYSTACK_BYTES	yysphinxexpr.c	216;"	d	file:
YYSTACK_BYTES	yysphinxql.c	330;"	d	file:
YYSTACK_BYTES	yysphinxquery.c	178;"	d	file:
YYSTACK_BYTES	yysphinxselect.c	189;"	d	file:
YYSTACK_FREE	yysphinxexpr.c	188;"	d	file:
YYSTACK_FREE	yysphinxexpr.c	195;"	d	file:
YYSTACK_FREE	yysphinxql.c	302;"	d	file:
YYSTACK_FREE	yysphinxql.c	309;"	d	file:
YYSTACK_FREE	yysphinxquery.c	150;"	d	file:
YYSTACK_FREE	yysphinxquery.c	157;"	d	file:
YYSTACK_FREE	yysphinxselect.c	161;"	d	file:
YYSTACK_FREE	yysphinxselect.c	168;"	d	file:
YYSTACK_GAP_MAXIMUM	yysphinxexpr.c	212;"	d	file:
YYSTACK_GAP_MAXIMUM	yysphinxql.c	326;"	d	file:
YYSTACK_GAP_MAXIMUM	yysphinxquery.c	174;"	d	file:
YYSTACK_GAP_MAXIMUM	yysphinxselect.c	185;"	d	file:
YYSTACK_RELOCATE	yysphinxexpr.c	243;"	d	file:
YYSTACK_RELOCATE	yysphinxql.c	357;"	d	file:
YYSTACK_RELOCATE	yysphinxquery.c	205;"	d	file:
YYSTACK_RELOCATE	yysphinxselect.c	216;"	d	file:
YYSTATE	llsphinxql.c	150;"	d	file:
YYSTOREBOUNDS	llsphinxql.c	761;"	d	file:
YYSTYPE	searchd.cpp	7501;"	d	file:
YYSTYPE	sphinx.cpp	5160;"	d	file:
YYSTYPE	yysphinxexpr.c	/^typedef union YYSTYPE {$/;"	u	file:
YYSTYPE	yysphinxexpr.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	yysphinxexpr.h	/^typedef union YYSTYPE {$/;"	u
YYSTYPE	yysphinxexpr.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	yysphinxql.c	/^typedef int YYSTYPE;$/;"	t	file:
YYSTYPE	yysphinxql.h	/^typedef int YYSTYPE;$/;"	t
YYSTYPE	yysphinxquery.c	/^typedef union YYSTYPE {$/;"	u	file:
YYSTYPE	yysphinxquery.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	yysphinxquery.h	/^typedef union YYSTYPE {$/;"	u
YYSTYPE	yysphinxquery.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	yysphinxselect.c	/^typedef int YYSTYPE;$/;"	t	file:
YYSTYPE	yysphinxselect.h	/^typedef int YYSTYPE;$/;"	t
YYSTYPE_IS_DECLARED	yysphinxexpr.c	156;"	d	file:
YYSTYPE_IS_DECLARED	yysphinxexpr.h	116;"	d
YYSTYPE_IS_DECLARED	yysphinxql.c	270;"	d	file:
YYSTYPE_IS_DECLARED	yysphinxql.h	219;"	d
YYSTYPE_IS_DECLARED	yysphinxquery.c	118;"	d	file:
YYSTYPE_IS_DECLARED	yysphinxquery.h	73;"	d
YYSTYPE_IS_DECLARED	yysphinxselect.c	129;"	d	file:
YYSTYPE_IS_DECLARED	yysphinxselect.h	83;"	d
YYSTYPE_IS_TRIVIAL	yysphinxexpr.c	157;"	d	file:
YYSTYPE_IS_TRIVIAL	yysphinxexpr.h	117;"	d
YYSTYPE_IS_TRIVIAL	yysphinxql.c	271;"	d	file:
YYSTYPE_IS_TRIVIAL	yysphinxql.h	220;"	d
YYSTYPE_IS_TRIVIAL	yysphinxquery.c	119;"	d	file:
YYSTYPE_IS_TRIVIAL	yysphinxquery.h	74;"	d
YYSTYPE_IS_TRIVIAL	yysphinxselect.c	130;"	d	file:
YYSTYPE_IS_TRIVIAL	yysphinxselect.h	84;"	d
YYTABLES_NAME	llsphinxql.c	2690;"	d	file:
YYTABLE_NINF	yysphinxexpr.c	470;"	d	file:
YYTABLE_NINF	yysphinxql.c	857;"	d	file:
YYTABLE_NINF	yysphinxquery.c	409;"	d	file:
YYTABLE_NINF	yysphinxselect.c	435;"	d	file:
YYTERROR	yysphinxexpr.c	603;"	d	file:
YYTERROR	yysphinxql.c	1126;"	d	file:
YYTERROR	yysphinxquery.c	505;"	d	file:
YYTERROR	yysphinxselect.c	597;"	d	file:
YYTOKENTYPE	yysphinxexpr.c	52;"	d	file:
YYTOKENTYPE	yysphinxexpr.h	28;"	d
YYTOKENTYPE	yysphinxql.c	52;"	d	file:
YYTOKENTYPE	yysphinxql.h	28;"	d
YYTOKENTYPE	yysphinxquery.c	52;"	d	file:
YYTOKENTYPE	yysphinxquery.h	28;"	d
YYTOKENTYPE	yysphinxselect.c	52;"	d	file:
YYTOKENTYPE	yysphinxselect.h	28;"	d
YYTRANSLATE	yysphinxexpr.c	280;"	d	file:
YYTRANSLATE	yysphinxql.c	394;"	d	file:
YYTRANSLATE	yysphinxquery.c	242;"	d	file:
YYTRANSLATE	yysphinxselect.c	253;"	d	file:
YYUNDEFTOK	yysphinxexpr.c	277;"	d	file:
YYUNDEFTOK	yysphinxql.c	391;"	d	file:
YYUNDEFTOK	yysphinxquery.c	239;"	d	file:
YYUNDEFTOK	yysphinxselect.c	250;"	d	file:
YY_AT_BOL	llsphinxql.c	333;"	d	file:
YY_BREAK	llsphinxql.c	981;"	d	file:
YY_BUFFER_EOF_PENDING	llsphinxql.c	269;"	d	file:
YY_BUFFER_NEW	llsphinxql.c	257;"	d	file:
YY_BUFFER_NORMAL	llsphinxql.c	258;"	d	file:
YY_BUFFER_STATE	llsphinxql.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	llsphinxql.c	167;"	d	file:
YY_BUF_SIZE	llsphinxql.c	169;"	d	file:
YY_CHAR	llsphinxql.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	llsphinxql.c	280;"	d	file:
YY_CURRENT_BUFFER_LVALUE	llsphinxql.c	287;"	d	file:
YY_DECL	llsphinxql.c	969;"	d	file:
YY_DECL	searchd.cpp	7699;"	d	file:
YY_DECL	searchd.cpp	7701;"	d	file:
YY_DECL_IS_OURS	llsphinxql.c	965;"	d	file:
YY_DO_BEFORE_ACTION	llsphinxql.c	354;"	d	file:
YY_END_OF_BUFFER	llsphinxql.c	362;"	d	file:
YY_END_OF_BUFFER_CHAR	llsphinxql.c	158;"	d	file:
YY_EXIT_FAILURE	llsphinxql.c	2345;"	d	file:
YY_EXTRA_TYPE	llsphinxql.c	785;"	d	file:
YY_FATAL_ERROR	llsphinxql.c	956;"	d	file:
YY_FLEX_MAJOR_VERSION	llsphinxql.c	10;"	d	file:
YY_FLEX_MINOR_VERSION	llsphinxql.c	11;"	d	file:
YY_FLEX_SUBMINOR_VERSION	llsphinxql.c	12;"	d	file:
YY_FLUSH_BUFFER	llsphinxql.c	301;"	d	file:
YY_INPUT	llsphinxql.c	909;"	d	file:
YY_INT_ALIGNED	llsphinxql.c	5;"	d	file:
YY_LESS_LINENO	llsphinxql.c	186;"	d	file:
YY_MORE_ADJ	llsphinxql.c	749;"	d	file:
YY_NEW_FILE	llsphinxql.c	156;"	d	file:
YY_NULL	llsphinxql.c	113;"	d	file:
YY_NUM_RULES	llsphinxql.c	361;"	d	file:
YY_READ_BUF_SIZE	llsphinxql.c	891;"	d	file:
YY_READ_BUF_SIZE	llsphinxql.c	893;"	d	file:
YY_REDUCE_PRINT	yysphinxexpr.c	707;"	d	file:
YY_REDUCE_PRINT	yysphinxexpr.c	721;"	d	file:
YY_REDUCE_PRINT	yysphinxql.c	1230;"	d	file:
YY_REDUCE_PRINT	yysphinxql.c	1244;"	d	file:
YY_REDUCE_PRINT	yysphinxquery.c	609;"	d	file:
YY_REDUCE_PRINT	yysphinxquery.c	623;"	d	file:
YY_REDUCE_PRINT	yysphinxselect.c	701;"	d	file:
YY_REDUCE_PRINT	yysphinxselect.c	715;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	llsphinxql.c	750;"	d	file:
YY_RULE_SETUP	llsphinxql.c	984;"	d	file:
YY_SC_TO_UI	llsphinxql.c	120;"	d	file:
YY_SKIP_YYWRAP	llsphinxql.c	338;"	d	file:
YY_STACK_PRINT	yysphinxexpr.c	677;"	d	file:
YY_STACK_PRINT	yysphinxexpr.c	720;"	d	file:
YY_STACK_PRINT	yysphinxql.c	1200;"	d	file:
YY_STACK_PRINT	yysphinxql.c	1243;"	d	file:
YY_STACK_PRINT	yysphinxquery.c	579;"	d	file:
YY_STACK_PRINT	yysphinxquery.c	622;"	d	file:
YY_STACK_PRINT	yysphinxselect.c	671;"	d	file:
YY_STACK_PRINT	yysphinxselect.c	714;"	d	file:
YY_START	llsphinxql.c	149;"	d	file:
YY_START_STACK_INCR	llsphinxql.c	951;"	d	file:
YY_STATE_BUF_SIZE	llsphinxql.c	175;"	d	file:
YY_STATE_EOF	llsphinxql.c	153;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	llsphinxql.c	210;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	llsphinxql.c	178;"	d	file:
YY_TYPEDEF_YY_SCANNER_T	llsphinxql.c	124;"	d	file:
YY_TYPEDEF_YY_SIZE_T	llsphinxql.c	205;"	d	file:
YY_USER_ACTION	llsphinxql.c	976;"	d	file:
YY_USE_CONST	llsphinxql.c	101;"	d	file:
YY_USE_CONST	llsphinxql.c	94;"	d	file:
Z	sphinxstemru.cpp	/^		Z	= 0xB7D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
Z	sphinxstemru.cpp	/^		Z	= 0xD0B7U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
Z	sphinxstemru.cpp	/^		Z	= 0xE7,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
ZH	sphinxstemru.cpp	/^		ZH	= 0xB6D0U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon4	file:
ZH	sphinxstemru.cpp	/^		ZH	= 0xD0B6U,$/;"	e	enum:RussianAlphabetUTF8_t::__anon5	file:
ZH	sphinxstemru.cpp	/^		ZH	= 0xE6,$/;"	e	enum:RussianAlphabetWin1251_t::__anon3	file:
ZipDocid	sphinxrt.cpp	123;"	d	file:
ZipDword	sphinxrt.cpp	117;"	d	file:
ZipInt	sphinx.cpp	/^void CSphWriter::ZipInt ( DWORD uValue )$/;"	f	class:CSphWriter
ZipOffset	sphinx.cpp	/^void CSphWriter::ZipOffset ( SphOffset_t uValue )$/;"	f	class:CSphWriter
ZipOffsets	sphinx.cpp	/^void CSphWriter::ZipOffsets ( CSphVector<SphOffset_t> * pData )$/;"	f	class:CSphWriter
ZipQword	sphinxrt.cpp	118;"	d	file:
ZipT	sphinxrt.cpp	/^static inline void ZipT ( CSphVector < BYTE, P > * pOut, T uValue )$/;"	f	file:
ZipWordid	sphinxrt.cpp	124;"	d	file:
ZoneHash_c	sphinxsearch.cpp	/^typedef CSphOrderedHash < ZoneInfo_t, ZoneKey_t, ZoneHash_fn, 4096 > ZoneHash_c;$/;"	t	file:
ZoneHash_fn	sphinxsearch.cpp	/^struct ZoneHash_fn$/;"	s	file:
ZoneHits_t	sphinxexcerpt.cpp	/^	struct ZoneHits_t$/;"	s	class:SnippetZoneChecker_c	file:
ZoneInfo_t	sphinxsearch.cpp	/^struct ZoneInfo_t$/;"	s	file:
ZoneKey_t	sphinxsearch.cpp	/^	explicit ZoneKey_t ( int iZone=0, SphDocID_t uDocid=0 )$/;"	f	struct:ZoneKey_t
ZoneKey_t	sphinxsearch.cpp	/^struct ZoneKey_t$/;"	s	file:
ZonePacked_t	sphinxexcerpt.cpp	/^typedef uint64_t ZonePacked_t;$/;"	t	file:
_CRT_NONSTDC_NO_DEPRECATE	sphinxstd.h	21;"	d
_CRT_SECURE_NO_DEPRECATE	sphinxstd.h	20;"	d
__STDC_FORMAT_MACROS	sphinxstd.h	53;"	d
__STDC_LIMIT_MACROS	llsphinxql.c	40;"	d	file:
__analysis_assume	sphinxstd.h	79;"	d
__attribute__	sphinxstd.h	33;"	d
_sphinx_	sphinx.h	17;"	d
_sphinxexcerpt_	sphinxexcerpt.h	17;"	d
_sphinxexpr_	sphinxexpr.h	17;"	d
_sphinxfilter_	sphinxfilter.h	17;"	d
_sphinxint_	sphinxint.h	17;"	d
_sphinxquery_	sphinxquery.h	17;"	d
_sphinxrt_	sphinxrt.h	17;"	d
_sphinxsearch_	sphinxsearch.h	17;"	d
_sphinxstd_	sphinxstd.h	17;"	d
_sphinxstem_	sphinxstem.h	17;"	d
_sphinxudf_	sphinxudf.h	24;"	d
_sphinxutils_	sphinxutils.h	20;"	d
abcd	md5.h	/^    md5_word_t abcd[4];		\/* digest buffer *\/$/;"	m	struct:md5_state_s
abs_builddir	Makefile	/^abs_builddir = \/home\/xuliwei\/mycode\/sphinx\/src$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/xuliwei\/mycode\/sphinx\/src$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/xuliwei\/mycode\/sphinx$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/xuliwei\/mycode\/sphinx$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
am__DEPENDENCIES_1	Makefile	/^am__DEPENDENCIES_1 =$/;"	m
am__DEPENDENCIES_2	Makefile	/^am__DEPENDENCIES_2 = libsphinx.a $(am__DEPENDENCIES_1) \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/acinclude.m4 \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__objects_1	Makefile	/^am__objects_1 = sphinx.$(OBJEXT) sphinxexcerpt.$(OBJEXT) \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__tar	Makefile	/^am__tar = ${AMTAR} chof - "$$tardir"$/;"	m
am__untar	Makefile	/^am__untar = ${AMTAR} xf -$/;"	m
am_indexer_OBJECTS	Makefile	/^am_indexer_OBJECTS = indexer.$(OBJEXT)$/;"	m
am_indextool_OBJECTS	Makefile	/^am_indextool_OBJECTS = indextool.$(OBJEXT)$/;"	m
am_libsphinx_a_OBJECTS	Makefile	/^am_libsphinx_a_OBJECTS = $(am__objects_1)$/;"	m
am_search_OBJECTS	Makefile	/^am_search_OBJECTS = search.$(OBJEXT)$/;"	m
am_searchd_OBJECTS	Makefile	/^am_searchd_OBJECTS = searchd.$(OBJEXT)$/;"	m
am_spelldump_OBJECTS	Makefile	/^am_spelldump_OBJECTS = spelldump.$(OBJEXT)$/;"	m
am_tests_OBJECTS	Makefile	/^am_tests_OBJECTS = tests.$(OBJEXT)$/;"	m
arg	sphinxexpr.y	/^arg:$/;"	l
arg	sphinxql.y	/^arg:$/;"	l
arg	sphinxselect.y	/^arg:$/;"	l
arg_count	sphinxudf.h	/^	int							arg_count;		\/\/\/< number of arguments$/;"	m	struct:st_sphinx_udf_args
arg_names	sphinxudf.h	/^	char **						arg_names;		\/\/\/< argument names (ASCIIZ argname in 'expr AS argname' case; NULL otherwise)$/;"	m	struct:st_sphinx_udf_args
arg_types	sphinxudf.h	/^	enum sphinx_udf_argtype *	arg_types;		\/\/\/< argument types$/;"	m	struct:st_sphinx_udf_args	typeref:enum:st_sphinx_udf_args::sphinx_udf_argtype
arg_values	sphinxudf.h	/^	char **						arg_values;		\/\/\/< argument values (strings are not (!) ASCIIZ; see str_lengths below)$/;"	m	struct:st_sphinx_udf_args
arglist	sphinxexpr.y	/^arglist:$/;"	l
arglist	sphinxql.y	/^arglist:$/;"	l
arglist	sphinxselect.y	/^arglist:$/;"	l
assert	sphinxstd.h	283;"	d
assert	sphinxstd.h	284;"	d
atom	sphinxquery.y	/^atom:$/;"	l
attach_index	sphinxql.y	/^attach_index:$/;"	l
attr	sphinxexpr.y	/^attr:$/;"	l
avgmva	udfexample.c	/^DLLEXPORT double avgmva ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error_flag )$/;"	f
avgmva_init	udfexample.c	/^DLLEXPORT int avgmva_init ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error_message )$/;"	f
bTermsTree	sphinxsearch.cpp	/^		static const bool			bTermsTree = true;		\/\/\/< we work with ExtTerm nodes$/;"	m	class:FSMphrase	file:
bTermsTree	sphinxsearch.cpp	/^	static const bool			bTermsTree = true;		\/\/\/< we work with ExtTerm nodes$/;"	m	class:FSMproximity	file:
bTermsTree	sphinxsearch.cpp	/^	static const bool			bTermsTree = true;	\/\/\/< we work with generic (not just ExtTerm) nodes$/;"	m	class:FSMmultinear	file:
beforelist	sphinxquery.y	/^beforelist:$/;"	l
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = indexer$(EXEEXT) searchd$(EXEEXT) search$(EXEEXT) \\$/;"	m
bind	sphinxstd.h	/^bind ( T CLASS::* ptr )$/;"	f
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
boolean_value	sphinxql.y	/^boolean_value:$/;"	l
buf	md5.h	/^    md5_byte_t buf[64];		\/* accumulate block *\/$/;"	m	struct:md5_state_s
build_alias	Makefile	/^build_alias = $/;"	m
builddir	Makefile	/^builddir = .$/;"	m
call_arg	sphinxql.y	/^call_arg:$/;"	l
call_args_list	sphinxql.y	/^call_args_list:$/;"	l
call_opt	sphinxql.y	/^call_opt:$/;"	l
call_opt_name	sphinxql.y	/^call_opt_name:$/;"	l
call_opts_list	sphinxql.y	/^call_opts_list:$/;"	l
call_proc	sphinxql.y	/^call_proc:$/;"	l
ccomment	llsphinxql.c	772;"	d	file:
cidxDone	sphinx.cpp	/^bool CSphIndex_VLN::cidxDone ( const char * sHeaderExtension, int iMemLimit )$/;"	f	class:CSphIndex_VLN
cidxFinishDoclistEntry	sphinx.cpp	/^void CSphIndex_VLN::cidxFinishDoclistEntry ( Hitpos_t uLastPos )$/;"	f	class:CSphIndex_VLN
cidxHit	sphinx.cpp	/^void CSphIndex_VLN::cidxHit ( CSphAggregateHit * hit, CSphRowitem * pAttrs )$/;"	f	class:CSphIndex_VLN
cidxWriteRawVLB	sphinx.cpp	/^int CSphIndex_VLN::cidxWriteRawVLB ( int fd, CSphWordHit * pHit, int iHits, DWORD * pDocinfo, int iDocinfos, int iStride )$/;"	f	class:CSphIndex_VLN
column_list	sphinxql.y	/^column_list:$/;"	l
const_float	sphinxql.y	/^const_float:$/;"	l
const_int	sphinxql.y	/^const_int:$/;"	l
const_list	sphinxql.y	/^const_list:$/;"	l
const_string_list	sphinxql.y	/^const_string_list:$/;"	l
constlist	sphinxexpr.y	/^constlist:$/;"	l
constlist_or_uservar	sphinxexpr.y	/^constlist_or_uservar:$/;"	l
count	md5.h	/^    md5_word_t count[2];	\/* message length in bits, lsw first *\/$/;"	m	struct:md5_state_s
create_function	sphinxql.y	/^create_function:$/;"	l
cstr	sphinxstd.h	/^	const char * cstr () const$/;"	f	struct:CSphString
cstr	sphinxstd.h	/^	const char * cstr() const$/;"	f	class:CSphStringBuilder
dMask	yysphinxquery.c	/^		CSphSmallBitvec		dMask;			\/\/ acceptable fields mask$/;"	m	struct:YYSTYPE::__anon2	file:
dMask	yysphinxquery.h	/^		CSphSmallBitvec		dMask;			\/\/ acceptable fields mask$/;"	m	struct:YYSTYPE::__anon15
dModeName	spelldump.cpp	/^const char * dModeName[] =$/;"	v
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
delete_from	sphinxql.y	/^delete_from:$/;"	l
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/config\/depcomp$/;"	m
describe	sphinxql.y	/^describe:$/;"	l
describe_tok	sphinxql.y	/^describe_tok:$/;"	l
dlclose	sphinxexpr.cpp	/^int dlclose ( void * lib )$/;"	f
dlerror	sphinxexpr.cpp	/^const char * dlerror()$/;"	f
dlerror	sphinxexpr.cpp	44;"	d	file:
dlopen	sphinxexpr.cpp	/^void * dlopen ( const char * libname, int )$/;"	f
dlsym	sphinxexpr.cpp	/^void * dlsym ( void * lib, const char * name )$/;"	f
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
drop_function	sphinxql.y	/^drop_function:$/;"	l
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
eExcerpt_Flags	searchd.cpp	/^enum eExcerpt_Flags$/;"	g	file:
encodeKeyword	sphinx.cpp	/^inline int encodeKeyword ( BYTE * pBuf, const char * pKeyword )$/;"	f
encodeVLB	sphinx.cpp	/^inline int encodeVLB ( BYTE * buf, DWORD v )$/;"	f
encodeVLB8	sphinx.cpp	/^inline int encodeVLB8 ( BYTE * buf, uint64_t v )$/;"	f
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
expr	sphinxexpr.y	/^expr:$/;"	l
expr	sphinxql.y	/^expr:$/;"	l
expr	sphinxquery.y	/^expr:$/;"	l
expr	sphinxselect.y	/^expr:$/;"	l
expr_float_unhandled	sphinxql.y	/^expr_float_unhandled:	$/;"	l
expr_ident	sphinxql.y	/^expr_ident:$/;"	l
exprline	sphinxexpr.y	/^exprline:$/;"	l
fConst	yysphinxexpr.c	/^	float			fConst;			\/\/ constant value$/;"	m	union:YYSTYPE	file:
fConst	yysphinxexpr.h	/^	float			fConst;			\/\/ constant value$/;"	m	union:YYSTYPE
flex_int16_t	llsphinxql.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	llsphinxql.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	llsphinxql.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	llsphinxql.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	llsphinxql.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	llsphinxql.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	llsphinxql.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	llsphinxql.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	llsphinxql.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	llsphinxql.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	llsphinxql.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	llsphinxql.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
floatval	sphinxstd.h	/^	float floatval () const$/;"	f	struct:CSphVariant
flush_rtindex	sphinxql.y	/^flush_rtindex:$/;"	l
fstat	sphinx.cpp	81;"	d	file:
ftruncate	searchd.cpp	637;"	d	file:
func_data	sphinxudf.h	/^	void *						func_data;		\/\/\/< function data (will be passed to calls, deinit)$/;"	m	struct:st_sphinx_udf_init
function	sphinxexpr.y	/^function:$/;"	l
function	sphinxql.y	/^function:$/;"	l
function	sphinxselect.y	/^function:$/;"	l
g_MvaArena	sphinx.cpp	/^static CSphArena g_MvaArena; \/\/ global mega-arena$/;"	v	file:
g_bAcceptUnlocked	searchd.cpp	/^static volatile bool	g_bAcceptUnlocked	= true;		\/\/ whether this preforked child is guaranteed to be *not* holding a lock around accept$/;"	v	file:
g_bBuildFreqs	indexer.cpp	/^bool			g_bBuildFreqs	= false;$/;"	v
g_bCollectIOStats	sphinx.cpp	/^static bool g_bCollectIOStats = false;$/;"	v	file:
g_bCompatResults	searchd.cpp	/^static bool				g_bCompatResults	= true;$/;"	v	file:
g_bCpuStats	searchd.cpp	/^static bool				g_bCpuStats		= false;$/;"	v	file:
g_bDaemonAtShutdown	searchd.cpp	/^static CSphSharedBuffer<DWORD> g_bDaemonAtShutdown;$/;"	v	file:
g_bDebugCheck	sphinx.cpp	/^static bool			g_bDebugCheck				= false;$/;"	v	file:
g_bDoDelete	searchd.cpp	/^static volatile bool	g_bDoDelete			= false;	\/\/ do we need to delete any indexes?$/;"	v	file:
g_bGotSigchld	searchd.cpp	/^static volatile sig_atomic_t g_bGotSigchld		= 0;	\/\/ we just received SIGCHLD; need to count dead children$/;"	v	file:
g_bGotSighup	searchd.cpp	/^static volatile sig_atomic_t g_bGotSighup		= 0;	\/\/ we just received SIGHUP; need to log$/;"	v	file:
g_bGotSigterm	searchd.cpp	/^static volatile sig_atomic_t g_bGotSigterm		= 0;	\/\/ we just received SIGTERM; need to shutdown$/;"	v	file:
g_bGotSigusr1	searchd.cpp	/^static volatile sig_atomic_t g_bGotSigusr1		= 0;	\/\/ we just received SIGUSR1; need to reopen logs$/;"	v	file:
g_bHeadDaemon	searchd.cpp	/^static bool				g_bHeadDaemon	= false;$/;"	v	file:
g_bHeadProcess	sphinx.cpp	/^bool g_bHeadProcess = true;$/;"	v
g_bIOStats	searchd.cpp	/^static bool				g_bIOStats		= false;$/;"	v	file:
g_bLogStdout	searchd.cpp	/^static bool				g_bLogStdout	= true;$/;"	v	file:
g_bLogSyslog	searchd.cpp	/^static bool				g_bLogSyslog	= false;$/;"	v	file:
g_bLogTty	searchd.cpp	/^static bool				g_bLogTty		= false;			\/\/ cached isatty(g_iLogFile)$/;"	v	file:
g_bOnDiskDicts	searchd.cpp	/^static bool				g_bOnDiskDicts		= false;$/;"	v	file:
g_bOptNoDetach	searchd.cpp	/^static bool				g_bOptNoDetach	= false;$/;"	v	file:
g_bOptNoLock	searchd.cpp	/^static bool				g_bOptNoLock	= false;$/;"	v	file:
g_bPreopenIndexes	searchd.cpp	/^static bool				g_bPreopenIndexes	= false;$/;"	v	file:
g_bPreopenIndexes	searchd.cpp	/^static bool				g_bPreopenIndexes	= true;$/;"	v	file:
g_bPrintQueries	indexer.cpp	/^bool			g_bPrintQueries	= false;$/;"	v
g_bProgress	indexer.cpp	/^bool			g_bProgress		= true;$/;"	v
g_bQuerySyslog	searchd.cpp	/^static bool				g_bQuerySyslog	= false;$/;"	v	file:
g_bQuiet	indexer.cpp	/^bool			g_bQuiet		= false;$/;"	v
g_bRTChangesAllowed	sphinxrt.cpp	/^static bool				g_bRTChangesAllowed		= false;$/;"	v	file:
g_bRotate	indexer.cpp	/^bool			g_bRotate		= false;$/;"	v
g_bRotateEach	indexer.cpp	/^bool			g_bRotateEach	= false;$/;"	v
g_bRotateShutdown	searchd.cpp	/^static volatile bool						g_bRotateShutdown = false;$/;"	v	file:
g_bRtFlushShutdown	searchd.cpp	/^static volatile bool						g_bRtFlushShutdown = false;$/;"	v	file:
g_bSafeTrace	searchd.cpp	/^static bool				g_bSafeTrace	= false;$/;"	v	file:
g_bSeamlessRotate	searchd.cpp	/^static bool				g_bSeamlessRotate	= false;$/;"	v	file:
g_bSeamlessRotate	searchd.cpp	/^static bool				g_bSeamlessRotate	= true;$/;"	v	file:
g_bService	searchd.cpp	/^static bool				g_bService		= false;$/;"	v	file:
g_bServiceStop	searchd.cpp	/^static bool				g_bServiceStop	= false;$/;"	v	file:
g_bSphQuiet	sphinx.cpp	/^static bool			g_bSphQuiet					= false;$/;"	v	file:
g_bStripPath	searchd.cpp	/^static bool				g_bStripPath	= false;$/;"	v	file:
g_bUdfEnabled	sphinxexpr.cpp	/^static bool								g_bUdfEnabled = false;$/;"	v	file:
g_bUnlinkOld	sphinxutils.cpp	/^static bool g_bUnlinkOld = true;$/;"	v	file:
g_bWatchdog	searchd.cpp	/^static bool				g_bWatchdog			= true;$/;"	v	file:
g_dApiCommands	searchd.cpp	/^const char * g_dApiCommands[SEARCHD_COMMAND_TOTAL] =$/;"	v
g_dArgs	searchd.cpp	/^static CSphVector<CSphString>	g_dArgs;$/;"	v	file:
g_dCaseRules	sphinxstemcz.cpp	/^static ClampRule_t g_dCaseRules [] =$/;"	v	file:
g_dChildren	searchd.cpp	/^static CSphVector<int>	g_dChildren;$/;"	v	file:
g_dCollPlanes_UTF8CI	sphinxsort.cpp	/^static unsigned short * g_dCollPlanes_UTF8CI[0x100];$/;"	v	file:
g_dCollWeights_UTF8CI	sphinxsort.cpp	/^static unsigned short g_dCollWeights_UTF8CI[0xb00] =$/;"	v	file:
g_dConnID	searchd.cpp	/^static CSphSharedBuffer<BYTE>	g_dConnID;			\/\/\/< global conn-id storage in prefork (protected by accept mutex)$/;"	v	file:
g_dCrashQueryBuff	searchd.cpp	/^static BYTE		g_dCrashQueryBuff [4096];$/;"	v	file:
g_dCurExts	searchd.cpp	/^const char * g_dCurExts[] = { ".sph", ".spa", ".spi", ".spd", ".spp", ".spm", ".spk", ".sps", ".mvp" };$/;"	v
g_dEncodeBase64	searchd.cpp	/^static const char g_dEncodeBase64[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v	file:
g_dExt	indexer.cpp	/^const char *	g_dExt[EXT_COUNT] = { "sph", "spa", "spi", "spd", "spp", "spm", "spk", "sps" };$/;"	v
g_dFuncs	sphinxexpr.cpp	/^static FuncDesc_t g_dFuncs[] =$/;"	v	file:
g_dHupChildren	searchd.cpp	/^static CSphVector<int>	g_dHupChildren;					\/\/ children to send hup signal on rotation is done$/;"	v	file:
g_dKeysIndex	sphinxutils.cpp	/^static KeyDesc_t g_dKeysIndex[] =$/;"	v	file:
g_dKeysIndexer	sphinxutils.cpp	/^static KeyDesc_t g_dKeysIndexer[] =$/;"	v	file:
g_dKeysSearchd	sphinxutils.cpp	/^static KeyDesc_t g_dKeysSearchd[] =$/;"	v	file:
g_dKeysSource	sphinxutils.cpp	/^static KeyDesc_t g_dKeysSource[] =$/;"	v	file:
g_dListeners	searchd.cpp	/^static CSphVector<Listener_t>	g_dListeners;$/;"	v	file:
g_dMemCategoryStat	sphinxstd.cpp	/^static MemCategorized_t g_dMemCategoryStat[Memory::SPH_MEM_TOTAL];$/;"	v	file:
g_dNewExts	searchd.cpp	/^const char * g_dNewExts[EXT_COUNT] = { ".new.sph", ".new.spa", ".new.spi", ".new.spd", ".new.spp", ".new.spm", ".new.spk", ".new.sps" };$/;"	v
g_dOldExts	searchd.cpp	/^const char * g_dOldExts[] = { ".old.sph", ".old.spa", ".old.spi", ".old.spd", ".old.spp", ".old.spm", ".old.spk", ".old.sps", ".old.mvp" };$/;"	v
g_dPalatalizeRules	sphinxstemcz.cpp	/^static ReplaceRule_t g_dPalatalizeRules [] =$/;"	v	file:
g_dPipes	searchd.cpp	/^static CSphVector<PipeInfo_t>	g_dPipes;		\/\/\/< currently open read-pipes to children processes$/;"	v	file:
g_dPosessiveRules	sphinxstemcz.cpp	/^static ClampRule_t g_dPosessiveRules [] =$/;"	v	file:
g_dProtoNames	searchd.cpp	/^const char * g_dProtoNames[PROTO_TOTAL] =$/;"	v
g_dRotateQueue	searchd.cpp	/^static CSphVector<CSphString>				g_dRotateQueue;		\/\/ FIXME? maybe replace it with lockless ring buffer$/;"	v	file:
g_dRotating	searchd.cpp	/^static CSphVector<const char *>				g_dRotating;			\/\/ names of indexes to be rotated this time$/;"	v	file:
g_dSortDataGens	tests.cpp	/^SortDataGenDesc_t g_dSortDataGens[] =$/;"	v
g_dSphinxCRC32	sphinx.cpp	/^DWORD g_dSphinxCRC32 [ 256 ] =$/;"	v
g_dSqlStmts	searchd.cpp	/^const char * g_dSqlStmts[STMT_TOTAL] =$/;"	v
g_dThd	searchd.cpp	/^static CSphVector<ThdDesc_t*>	g_dThd;				\/\/\/< existing threads table$/;"	v	file:
g_dThdStates	searchd.cpp	/^const char * g_dThdStates[THD_STATE_TOTAL] = {$/;"	v
g_dTimerNames	sphinx.cpp	/^static const char * const g_dTimerNames [ TIMERS_TOTAL ] =$/;"	v	file:
g_dTimers	sphinx.cpp	/^static CSphTimer	g_dTimers [ SPH_MAX_TIMERS ];$/;"	v	file:
g_eCollation	searchd.cpp	/^static ESphCollation	g_eCollation = SPH_COLLATION_DEFAULT;$/;"	v	file:
g_eLogFormat	searchd.cpp	/^static LogFormat_e		g_eLogFormat	= LOG_FORMAT_PLAIN;$/;"	v	file:
g_eLogLevel	searchd.cpp	/^static ESphLogLevel		g_eLogLevel		= SPH_LOG_INFO;$/;"	v	file:
g_eOnFileFieldError	indexer.cpp	/^ESphOnFileFieldError	g_eOnFileFieldError = FFE_IGNORE_FIELD;$/;"	v
g_eWorkers	searchd.cpp	/^static Mpm_e			g_eWorkers			= USE_WINDOWS ? MPM_THREADS : MPM_FORK;$/;"	v	file:
g_fTotalMB	testrt.cpp	/^float		g_fTotalMB = 0.0f;$/;"	v
g_hDistIndexes	searchd.cpp	/^static SmallStringHash_T < DistributedIndex_t >		g_hDistIndexes;$/;"	v	file:
g_hPipe	searchd.cpp	/^HANDLE					g_hPipe			= INVALID_HANDLE_VALUE;$/;"	v
g_hUdfFuncs	sphinxexpr.cpp	/^static SmallStringHash_T<UdfFunc_t>		g_hUdfFuncs;$/;"	v	file:
g_hUdfLibs	sphinxexpr.cpp	/^static SmallStringHash_T<UdfLib_t>		g_hUdfLibs;$/;"	v	file:
g_hUservars	searchd.cpp	/^static SmallStringHash_T<Uservar_t>	g_hUservars;$/;"	v	file:
g_iAllocsId	sphinxstd.cpp	/^static int				g_iAllocsId		= 0;$/;"	v	file:
g_iAttrFlushPeriod	searchd.cpp	/^static int				g_iAttrFlushPeriod	= 0;			\/\/ in seconds; 0 means "do not flush"$/;"	v	file:
g_iClientFD	searchd.cpp	/^static int				g_iClientFD			= -1;$/;"	v	file:
g_iClientTimeout	searchd.cpp	/^static int				g_iClientTimeout	= 300;$/;"	v	file:
g_iConnID	searchd.cpp	/^static int						g_iConnID = 0;		\/\/\/< global conn-id in none\/fork\/threads; current conn-id in prefork$/;"	v	file:
g_iCrashInfoLen	searchd.cpp	/^static int		g_iCrashInfoLen = 0;$/;"	v	file:
g_iCurAllocs	sphinxstd.cpp	/^static int				g_iCurAllocs	= 0;$/;"	v	file:
g_iCurBytes	sphinxstd.cpp	/^static int64_t			g_iCurBytes		= 0;$/;"	v	file:
g_iDistThreads	searchd.cpp	/^static int				g_iDistThreads		= 0;$/;"	v	file:
g_iExpansionLimit	searchd.cpp	/^static int				g_iExpansionLimit	= 0;$/;"	v	file:
g_iIndexerCurrentDocID	sphinx.cpp	/^int64_t		g_iIndexerCurrentDocID		= 0;$/;"	v
g_iIndexerCurrentHits	sphinx.cpp	/^int64_t		g_iIndexerCurrentHits		= 0;$/;"	v
g_iIndexerCurrentRangeMax	sphinx.cpp	/^int64_t		g_iIndexerCurrentRangeMax	= 0;$/;"	v
g_iIndexerCurrentRangeMin	sphinx.cpp	/^int64_t		g_iIndexerCurrentRangeMin	= 0;$/;"	v
g_iIndexerPoolStartDocID	sphinx.cpp	/^int64_t		g_iIndexerPoolStartDocID	= 0;$/;"	v
g_iIndexerPoolStartHit	sphinx.cpp	/^int64_t		g_iIndexerPoolStartHit		= 0;$/;"	v
g_iLogFile	searchd.cpp	/^static int				g_iLogFile		= STDOUT_FILENO;	\/\/ log file descriptor$/;"	v	file:
g_iMaxBatchQueries	searchd.cpp	/^static int				g_iMaxBatchQueries	= 32;$/;"	v	file:
g_iMaxCachedDocs	searchd.cpp	/^static int				g_iMaxCachedDocs	= 0;	\/\/ in bytes$/;"	v	file:
g_iMaxCachedHits	searchd.cpp	/^static int				g_iMaxCachedHits	= 0;	\/\/ in bytes$/;"	v	file:
g_iMaxChildren	searchd.cpp	/^static int				g_iMaxChildren		= 0;$/;"	v	file:
g_iMaxFileFieldBuffer	indexer.cpp	/^int				g_iMaxFileFieldBuffer	= 1024*1024;$/;"	v
g_iMaxFilterValues	searchd.cpp	/^static int				g_iMaxFilterValues	= 4096;$/;"	v	file:
g_iMaxFilters	searchd.cpp	/^static int				g_iMaxFilters		= 256;$/;"	v	file:
g_iMaxIOSize	sphinx.cpp	/^static int		g_iMaxIOSize	= 0;$/;"	v	file:
g_iMaxIOps	sphinx.cpp	/^static int		g_iMaxIOps		= 0;$/;"	v	file:
g_iMaxMatches	searchd.cpp	/^static int				g_iMaxMatches	= 1000;$/;"	v	file:
g_iMaxPacketSize	searchd.cpp	/^static int				g_iMaxPacketSize	= 8*1024*1024;	\/\/ in bytes; for both query packets from clients and response packets from agents$/;"	v	file:
g_iMaxXmlpipe2Field	indexer.cpp	/^int				g_iMaxXmlpipe2Field		= 0;$/;"	v
g_iMemLimit	indexer.cpp	/^int				g_iMemLimit				= 32*1024*1024;$/;"	v
g_iMutexBench	tests.cpp	/^volatile int g_iMutexBench = 0;$/;"	v
g_iMysqlHandshake	searchd.cpp	/^static int						g_iMysqlHandshake = 0;$/;"	v	file:
g_iPeakAllocs	sphinxstd.cpp	/^static int				g_iPeakAllocs	= 0;$/;"	v	file:
g_iPeakBytes	sphinxstd.cpp	/^static int64_t			g_iPeakBytes	= 0;$/;"	v	file:
g_iPidFD	searchd.cpp	/^static int				g_iPidFD		= -1;$/;"	v	file:
g_iPreforkChildren	searchd.cpp	/^static int				g_iPreforkChildren	= 10;		\/\/ how much workers to keep$/;"	v	file:
g_iQueryLineLen	searchd.cpp	/^static const int g_iQueryLineLen = 80;$/;"	v	file:
g_iQueryLogFile	searchd.cpp	/^static int				g_iQueryLogFile	= -1;$/;"	v	file:
g_iReadBuffer	sphinx.cpp	/^static int					g_iReadBuffer				= DEFAULT_READ_BUFFER;$/;"	v	file:
g_iReadTimeout	searchd.cpp	/^static int				g_iReadTimeout		= 5;	\/\/ sec$/;"	v	file:
g_iReadUnhinted	sphinx.cpp	/^static int					g_iReadUnhinted				= DEFAULT_READ_UNHINTED;$/;"	v	file:
g_iRotateCount	searchd.cpp	/^static volatile int		g_iRotateCount		= 0;		\/\/ flag that we are rotating now; set from SIGHUP; cleared on rotation success$/;"	v	file:
g_iRotationThrottle	searchd.cpp	/^static int				g_iRotationThrottle		= 0;	\/\/ pause between children term signals after rotation is done$/;"	v	file:
g_iRwlock	tests.cpp	/^int g_iRwlock;$/;"	v
g_iThreadStackSize	sphinxstd.cpp	/^int g_iThreadStackSize = 65536;$/;"	v
g_iTimer	sphinx.cpp	/^static int			g_iTimer						= -1;$/;"	v	file:
g_iTimerTrialsWall	sphinx.cpp	/^static int64_t		g_iTimerTrialsWall				= 0;$/;"	v	file:
g_iTimers	sphinx.cpp	/^static int			g_iTimers						= 0;$/;"	v	file:
g_iTopStops	indexer.cpp	/^int				g_iTopStops		= 100;$/;"	v
g_iTotalAllocs	sphinxstd.cpp	/^static int				g_iTotalAllocs	= 0;$/;"	v	file:
g_iWeights	tests.cpp	/^static const int g_iWeights[RT_PASS_COUNT] = { 1500, 1500, 1500, 1500, 1500 }; \/\/ { 1500, 1302, 1252, 1230, 1219 };$/;"	v	file:
g_iWriteBuffer	indexer.cpp	/^int				g_iWriteBuffer			= 0;$/;"	v
g_iWriteTimeout	searchd.cpp	/^static int				g_iWriteTimeout		= 5;$/;"	v	file:
g_pAllocs	sphinxstd.cpp	/^static CSphMemHeader *	g_pAllocs		= NULL;$/;"	v	file:
g_pBacktraceAddresses	sphinxutils.cpp	/^static void * g_pBacktraceAddresses [SPH_BACKTRACE_ADDR_COUNT];$/;"	v	file:
g_pBinlog	sphinxrt.cpp	/^ISphBinlog *			g_pBinlog				= NULL;$/;"	v
g_pCfg	searchd.cpp	/^static CSphConfigParser g_pCfg;$/;"	v	file:
g_pConnID	searchd.cpp	/^static int *					g_pConnID = NULL;	\/\/\/< global conn-id ptr in prefork$/;"	v	file:
g_pFlush	searchd.cpp	/^static volatile FlushState_t *	g_pFlush		= NULL;$/;"	v	file:
g_pIndex	testrt.cpp	/^static ISphRtIndex * g_pIndex = NULL;$/;"	v	file:
g_pIndexes	searchd.cpp	/^static IndexHash_c *						g_pIndexes = NULL;		\/\/ served indexes hash$/;"	v	file:
g_pLogger	sphinxutils.cpp	/^static SphLogger_fn g_pLogger = NULL;$/;"	v	file:
g_pMvaArena	sphinx.cpp	/^static DWORD *				g_pMvaArena = NULL;		\/\/\/< initialized by sphArenaInit()$/;"	v	file:
g_pPrereading	searchd.cpp	/^static CSphIndex *							g_pPrereading	= NULL;	\/\/ rotation "buffer"$/;"	v	file:
g_pRtBinlog	sphinxrt.cpp	/^static RtBinlog_c *		g_pRtBinlog				= NULL;$/;"	v	file:
g_pStats	searchd.cpp	/^static SearchdStats_t *			g_pStats		= NULL;$/;"	v	file:
g_pUservarsHook	sphinxexpr.cpp	/^UservarIntSet_c * ( *g_pUservarsHook )( const CSphString & sUservar );$/;"	v
g_sBuildStops	indexer.cpp	/^const char *	g_sBuildStops	= NULL;$/;"	v
g_sConfigFile	searchd.cpp	/^static CSphString		g_sConfigFile;$/;"	v	file:
g_sCrashInfo	searchd.cpp	/^static char		g_sCrashInfo [SPH_TIME_PID_MAX_SIZE] = "[][]\\n";$/;"	v	file:
g_sCrashedBannerAPI	searchd.cpp	/^const char		g_sCrashedBannerAPI[] = "\\n--- crashed SphinxAPI request dump ---\\n";$/;"	v
g_sCrashedBannerMySQL	searchd.cpp	/^const char		g_sCrashedBannerMySQL[] = "\\n--- crashed SphinxQL request dump ---\\n";$/;"	v
g_sCrashedBannerTail	searchd.cpp	/^const char		g_sCrashedBannerTail[] = "\\n--- request dump end ---\\n";$/;"	v
g_sFieldsData	tests.cpp	/^const char * g_sFieldsData[] = { "33", "1033", "If I were a cat...", "We are the greatest cat" };$/;"	v
g_sIntAttrPrefix	sphinxsort.cpp	/^static const char g_sIntAttrPrefix[] = "@int_str2ptr_";$/;"	v	file:
g_sLogFile	searchd.cpp	/^static CSphString		g_sLogFile;							\/\/ log file name$/;"	v	file:
g_sMemoryStatBanner	searchd.cpp	/^const char		g_sMemoryStatBanner[] = "\\n--- memory statistics ---\\n";$/;"	v
g_sMinidump	indexer.cpp	/^char			g_sMinidump[256];$/;"	v
g_sMinidump	searchd.cpp	/^static char		g_sMinidump[SPH_TIME_PID_MAX_SIZE] = "";$/;"	v	file:
g_sMinidumpBanner	searchd.cpp	/^const char		g_sMinidumpBanner[] = "minidump located at: ";$/;"	v
g_sMysqlHandshake	searchd.cpp	/^static char						g_sMysqlHandshake[128];$/;"	v	file:
g_sPidFile	searchd.cpp	/^static const char *		g_sPidFile		= NULL;$/;"	v	file:
g_sPrereading	searchd.cpp	/^static const char *							g_sPrereading	= NULL;	\/\/ name of index currently being preread$/;"	v	file:
g_sQueryLogFile	searchd.cpp	/^static CSphString		g_sQueryLogFile;$/;"	v	file:
g_sSafeInfoBuf	sphinxutils.cpp	/^static char g_sSafeInfoBuf [ 1024 ];$/;"	v	file:
g_sServiceName	searchd.cpp	/^static const char *		g_sServiceName	= "searchd";$/;"	v	file:
g_sTmpfile	tests.cpp	/^const char * g_sTmpfile = "__libsphinxtest.tmp";$/;"	v
g_sUdfDir	sphinxexpr.cpp	/^static CSphString						g_sUdfDir;$/;"	v	file:
g_ss	searchd.cpp	/^SERVICE_STATUS			g_ss;$/;"	v
g_ssHandle	searchd.cpp	/^SERVICE_STATUS_HANDLE	g_ssHandle;$/;"	v
g_tAllocsMutex	sphinxstd.cpp	/^static CSphStaticMutex	g_tAllocsMutex;$/;"	v	file:
g_tCfgStat	searchd.cpp	/^static struct stat		g_tCfgStat;$/;"	v	typeref:struct:stat	file:
g_tConnKey	searchd.cpp	/^static SphThreadKey_t			g_tConnKey;			\/\/\/< current conn-id TLS in threads$/;"	v	file:
g_tDistLock	searchd.cpp	/^static StaticThreadsOnlyMutex_t				g_tDistLock;$/;"	v	file:
g_tFlushBuffer	searchd.cpp	/^static CSphSharedBuffer<FlushState_t>	g_tFlushBuffer;$/;"	v	file:
g_tFlushMutex	searchd.cpp	/^static CSphMutex g_tFlushMutex;$/;"	v	file:
g_tIOStatsTls	sphinx.cpp	/^static SphThreadKey_t g_tIOStatsTls;$/;"	v	file:
g_tRotateConfigMutex	searchd.cpp	/^static ThreadsOnlyMutex_t					g_tRotateConfigMutex;$/;"	v	file:
g_tRotateQueueMutex	searchd.cpp	/^static ThreadsOnlyMutex_t					g_tRotateQueueMutex;$/;"	v	file:
g_tRotateThread	searchd.cpp	/^static SphThread_t							g_tRotateThread;$/;"	v	file:
g_tRtFlushThread	searchd.cpp	/^static SphThread_t							g_tRtFlushThread;$/;"	v	file:
g_tRwlock	tests.cpp	/^CSphRwlock g_tRwlock;$/;"	v
g_tStatsBuffer	searchd.cpp	/^static CSphSharedBuffer<SearchdStats_t>	g_tStatsBuffer;$/;"	v	file:
g_tStatsMutex	searchd.cpp	/^static CSphProcessSharedMutex	g_tStatsMutex;$/;"	v	file:
g_tTLSMemCategory	sphinxstd.cpp	/^SphThreadKey_t g_tTLSMemCategory;$/;"	v
g_tThdMutex	searchd.cpp	/^static CSphStaticMutex			g_tThdMutex;$/;"	v	file:
g_tUdfMutex	sphinxexpr.cpp	/^static CSphStaticMutex					g_tUdfMutex;$/;"	v	file:
g_tUservarsMutex	searchd.cpp	/^static CSphStaticMutex				g_tUservarsMutex;$/;"	v	file:
g_tmLastIOTime	sphinx.cpp	/^static int64_t	g_tmLastIOTime	= 0;$/;"	v	file:
g_tmRotateChildren	searchd.cpp	/^static int64_t			g_tmRotateChildren		= 0;	\/\/ pause to next children term signal after rotation is done$/;"	v	file:
g_uCfgCRC32	searchd.cpp	/^static DWORD			g_uCfgCRC32		= 0;$/;"	v	file:
getpid	searchd.cpp	638;"	d	file:
group_clause	sphinxql.y	/^group_clause:$/;"	l
group_order_clause	sphinxql.y	/^group_order_clause:$/;"	l
host_alias	Makefile	/^host_alias = $/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
iAttrLocator	yysphinxexpr.c	/^	uint64_t		iAttrLocator;	\/\/ attribute locator (rowitem for int\/float; offset+size for bits)$/;"	m	union:YYSTYPE	file:
iAttrLocator	yysphinxexpr.h	/^	uint64_t		iAttrLocator;	\/\/ attribute locator (rowitem for int\/float; offset+size for bits)$/;"	m	union:YYSTYPE
iBYTESIZE	sphinxstd.h	/^	static const int iBYTESIZE = iTOTALBITS \/ 8;$/;"	m	class:CSphSmallBitvec
iConst	yysphinxexpr.c	/^	int64_t			iConst;			\/\/ constant value$/;"	m	union:YYSTYPE	file:
iConst	yysphinxexpr.h	/^	int64_t			iConst;			\/\/ constant value$/;"	m	union:YYSTYPE
iELEMBITS	sphinxstd.h	/^	static const int iELEMBITS = sizeof(DWORD) * 8;$/;"	m	class:CSphSmallBitvec
iFunc	yysphinxexpr.c	/^	int				iFunc;			\/\/ function id$/;"	m	union:YYSTYPE	file:
iFunc	yysphinxexpr.h	/^	int				iFunc;			\/\/ function id$/;"	m	union:YYSTYPE
iLength	sphinxmetaphone.cpp	/^	int		iLength;$/;"	m	struct:CurrentWord_t	file:
iLengthPadded	sphinxmetaphone.cpp	/^	int		iLengthPadded;$/;"	m	struct:CurrentWord_t	file:
iMaxPos	yysphinxquery.c	/^		int			iMaxPos;		\/\/ max allowed position within field$/;"	m	struct:YYSTYPE::__anon2	file:
iMaxPos	yysphinxquery.h	/^		int			iMaxPos;		\/\/ max allowed position within field$/;"	m	struct:YYSTYPE::__anon15
iNode	yysphinxexpr.c	/^	int				iNode;			\/\/ node, or uservar, or udf index$/;"	m	union:YYSTYPE	file:
iNode	yysphinxexpr.h	/^	int				iNode;			\/\/ node, or uservar, or udf index$/;"	m	union:YYSTYPE
iPrevSunday	sphinxsort.cpp	/^	int iPrevSunday = (1+tSplit.tm_yday) - tSplit.tm_wday; \/\/ prev Sunday day of year, base 1$/;"	v
iStrIndex	yysphinxquery.c	/^		int			iStrIndex;$/;"	m	struct:YYSTYPE::__anon1	file:
iStrIndex	yysphinxquery.h	/^		int			iStrIndex;$/;"	m	struct:YYSTYPE::__anon14
iTOTALBITS	sphinxstd.h	/^	static const int iTOTALBITS = 256;$/;"	m	class:CSphSmallBitvec
iValue	yysphinxquery.c	/^		int			iValue;$/;"	m	struct:YYSTYPE::__anon1	file:
iValue	yysphinxquery.h	/^		int			iValue;$/;"	m	struct:YYSTYPE::__anon14
iYear	sphinxsort.cpp	/^	int iYear = tSplit.tm_year+1900;$/;"	v
iZoneVec	yysphinxquery.c	/^	int				iZoneVec;$/;"	m	union:YYSTYPE	file:
iZoneVec	yysphinxquery.h	/^	int				iZoneVec;$/;"	m	union:YYSTYPE
ident_list	sphinxql.y	/^ident_list:$/;"	l
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
indexer_DEPENDENCIES	Makefile	/^indexer_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
indexer_LDADD	Makefile	/^indexer_LDADD = $(LDADD)$/;"	m
indexer_OBJECTS	Makefile	/^indexer_OBJECTS = $(am_indexer_OBJECTS)$/;"	m
indexer_SOURCES	Makefile	/^indexer_SOURCES = indexer.cpp$/;"	m
indextool_DEPENDENCIES	Makefile	/^indextool_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
indextool_LDADD	Makefile	/^indextool_LDADD = $(LDADD)$/;"	m
indextool_OBJECTS	Makefile	/^indextool_OBJECTS = $(am_indextool_OBJECTS)$/;"	m
indextool_SOURCES	Makefile	/^indextool_SOURCES = indextool.cpp$/;"	m
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
inline	sphinxstemen.cpp	19;"	d	file:
insert_into	sphinxql.y	/^insert_into:$/;"	l
insert_or_replace	sphinxql.y	/^insert_or_replace:$/;"	l
insert_row	sphinxql.y	/^insert_row:$/;"	l
insert_rows_list	sphinxql.y	/^insert_rows_list:$/;"	l
insert_val	sphinxql.y	/^insert_val:$/;"	l
insert_vals_list	sphinxql.y	/^insert_vals_list:$/;"	l
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/xuliwei\/mycode\/sphinx\/config\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
int64_t	sphinxstd.h	/^typedef __int64 int64_t;$/;"	t
int64_t	sphinxstd.h	/^typedef long long int64_t;$/;"	t
int64val	sphinxstd.h	/^	int64_t int64val () const$/;"	f	struct:CSphVariant
intval	sphinxstd.h	/^	int intval () const$/;"	f	struct:CSphVariant
is_const	sphinxudf.h	/^	char						is_const;		\/\/\/< whether a function returns a constant$/;"	m	struct:st_sphinx_udf_init
is_vowel	sphinxstemen.cpp	46;"	d	file:
isolation_level	sphinxql.y	/^isolation_level:$/;"	l
keyword	sphinxquery.y	/^keyword:$/;"	l
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libsphinx_a_AR	Makefile	/^libsphinx_a_AR = $(AR) $(ARFLAGS)$/;"	m
libsphinx_a_LIBADD	Makefile	/^libsphinx_a_LIBADD =$/;"	m
libsphinx_a_OBJECTS	Makefile	/^libsphinx_a_OBJECTS = $(am_libsphinx_a_OBJECTS)$/;"	m
libsphinx_a_SOURCES	Makefile	/^libsphinx_a_SOURCES = $(SRC_SPHINX)$/;"	m
limit_clause	sphinxql.y	/^limit_clause:$/;"	l
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localtime_r	sphinx.cpp	/^void localtime_r ( const time_t * clock, struct tm * res )$/;"	f
logf	sphinx.cpp	/^static inline float logf ( float v )$/;"	f	file:
ltrim	sphinxutils.cpp	/^static char * ltrim ( char * sLine )$/;"	f	file:
m_Docs	sphinxsearch.cpp	/^	CSphVector<ExtDoc_t>			m_Docs;$/;"	m	class:NodeCacheContainer_t	file:
m_Hash	sphinx.cpp	/^	CSphMultiformHash	m_Hash;$/;"	m	struct:CSphMultiformContainer	file:
m_Hits	sphinxsearch.cpp	/^	CSphVector<ExtHit_t>			m_Hits;$/;"	m	class:NodeCacheContainer_t	file:
m_InlineAttrs	sphinxsearch.cpp	/^	CSphVector<CSphRowitem>			m_InlineAttrs;$/;"	m	class:NodeCacheContainer_t	file:
m_LowerCaser	spelldump.cpp	/^	CSphLowercaser m_LowerCaser;$/;"	m	class:CISpellAffix	file:
m_StateOk	sphinxsearch.cpp	/^	bool							m_StateOk;$/;"	m	class:NodeCacheContainer_t	file:
m_bAgent	sphinx.h	/^	bool						m_bAgent;		\/\/\/< agent mode (may need extra cols on output)$/;"	m	class:CSphQuery
m_bAllFieldsKnown	sphinxsearch.h	/^	bool			m_bAllFieldsKnown; \/\/\/< whether the all match fields is known, or only low 32.$/;"	m	class:ISphQword
m_bAllowEmpty	sphinxexcerpt.h	/^	bool			m_bAllowEmpty;		\/\/\/< whether to allow empty snippets (by default, return something from the start)$/;"	m	struct:ExcerptQuery_t
m_bAutoCommit	searchd.cpp	/^	bool			m_bAutoCommit;$/;"	m	struct:SessionVars_t	file:
m_bBinlog	sphinx.h	/^	bool						m_bBinlog;$/;"	m	class:CSphIndex
m_bBlackhole	searchd.cpp	/^	bool			m_bBlackhole;	\/\/\/< blackhole agent flag$/;"	m	struct:AgentDesc_t	file:
m_bBlendAdd	sphinx.h	/^	bool							m_bBlendAdd;				\/\/\/< whether we have more pending blended variants (of current accumulator) to return$/;"	m	class:ISphTokenizer
m_bBlendSkipPure	sphinx.h	/^	bool							m_bBlendSkipPure;			\/\/\/< skip purely blended tokens$/;"	m	class:ISphTokenizer
m_bBlended	sphinx.cpp	/^		bool			m_bBlended;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_bBlended	sphinx.h	/^	bool							m_bBlended;					\/\/\/< whether last token (as in just returned from GetToken()) was blended$/;"	m	class:ISphTokenizer
m_bBlendedPart	sphinx.cpp	/^		bool			m_bBlendedPart;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_bBlendedPart	sphinx.h	/^	bool							m_bBlendedPart;				\/\/\/< whether last token is a normal subtoken of a blended token$/;"	m	class:ISphTokenizer
m_bBoundary	sphinx.cpp	/^		bool			m_bBoundary;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_bBoundary	sphinx.h	/^	bool							m_bBoundary;				\/\/\/< boundary flag (true immediately after boundary codepoint)$/;"	m	class:ISphTokenizer
m_bBufOwned	sphinxint.h	/^	bool		m_bBufOwned;$/;"	m	class:CSphReader
m_bBuildMultiform	sphinx.cpp	/^	bool				m_bBuildMultiform;$/;"	m	class:CSphTokenizer_Filter	file:
m_bCanUnpack	sphinx.h	/^	bool				m_bCanUnpack;$/;"	m	struct:CSphSource_SQL
m_bCheckCrosses	spelldump.cpp	/^	bool		m_bCheckCrosses;$/;"	m	class:CISpellAffix	file:
m_bCheckInFieldAggr	sphinxsearch.cpp	/^	bool					m_bCheckInFieldAggr;$/;"	m	class:ExprRankerHook_c	file:
m_bCrc32	sphinx.h	/^	bool			m_bCrc32;$/;"	m	struct:CSphDictSettings
m_bCrossProduct	spelldump.cpp	/^	bool		m_bCrossProduct;$/;"	m	class:CISpellAffixRule	file:
m_bDetectSentences	sphinx.h	/^	bool							m_bDetectSentences;			\/\/\/< should we detect sentence boundaries?$/;"	m	class:ISphTokenizer
m_bDistinct	sphinxsort.cpp	/^	bool				m_bDistinct;		\/\/\/< whether we need distinct$/;"	m	struct:CSphGroupSorterSettings	file:
m_bDocumentDone	sphinx.h	/^		bool m_bDocumentDone;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_bDone	sphinxsearch.cpp	/^	bool						m_bDone;			\/\/\/< am i done$/;"	m	class:ExtQuorum_c	file:
m_bDone	sphinxsearch.cpp	/^	bool						m_bDone;$/;"	m	class:ExtOrder_c	file:
m_bDupe	sphinx.cpp	/^	bool			m_bDupe;		\/\/\/< whether the word occurs only once in current query$/;"	m	class:DiskIndexQwordTraits_c	file:
m_bDynamic	sphinx.h	/^	bool			m_bDynamic;$/;"	m	struct:CSphAttrLocator
m_bEOF	sphinx.h	/^	bool			m_bEOF;				\/\/\/< EOF encountered$/;"	m	class:CSphSource_XMLPipe
m_bEmitZones	sphinxexcerpt.h	/^	bool			m_bEmitZones;		\/\/\/< whether to emit zone for passage$/;"	m	struct:ExcerptQuery_t
m_bEmpty	sphinxquery.cpp	/^	bool					m_bEmpty;$/;"	m	class:XQParser_t	file:
m_bEmptyStopword	sphinxquery.cpp	/^	bool					m_bEmptyStopword;$/;"	m	class:XQParser_t	file:
m_bEnableStar	sphinx.h	/^	bool						m_bEnableStar;			\/\/\/< enable star-syntax$/;"	m	class:CSphIndex
m_bEnabled	searchd.cpp	/^	bool				m_bEnabled;		\/\/\/< to disable index in cases when rotation fails$/;"	m	struct:ServedDesc_t	file:
m_bEnabled	sphinx.h	/^	bool		m_bEnabled;$/;"	m	class:CSphIOStats
m_bError	searchd.cpp	/^	bool			m_bError;$/;"	m	class:InputBuffer_c	file:
m_bError	searchd.cpp	/^	bool		m_bError;			\/\/\/< if there were any write errors$/;"	m	class:NetOutputBuffer_c	file:
m_bError	searchd.cpp	/^	bool		m_bError;$/;"	m	struct:PipeReader_t	file:
m_bError	sphinx.cpp	/^	bool				m_bError;	\/\/ FIXME? sort of redundant, but states are a mess$/;"	m	struct:CSphBin	file:
m_bError	sphinx.cpp	/^	bool				m_bError;$/;"	m	class:CSphCharsetDefinitionParser	file:
m_bError	sphinxexpr.cpp	/^	mutable char					m_bError;$/;"	m	class:Expr_Udf_c	file:
m_bError	sphinxint.h	/^	bool			m_bError;$/;"	m	class:CSphWriter
m_bError	sphinxint.h	/^	bool		m_bError;$/;"	m	class:CSphReader
m_bEscaped	sphinx.h	/^	bool							m_bEscaped;					\/\/\/< backslash handling flag$/;"	m	class:ISphTokenizer
m_bExactPhrase	sphinxexcerpt.cpp	/^	bool					m_bExactPhrase;$/;"	m	class:ExcerptGen_c	file:
m_bExactPhrase	sphinxexcerpt.h	/^	bool			m_bExactPhrase;		\/\/\/< whether to highlight exact phrase matches only$/;"	m	struct:ExcerptQuery_t
m_bExclude	sphinx.h	/^	bool				m_bExclude;		\/\/\/< whether this is "include" or "exclude" filter (default is "include")$/;"	m	class:CSphFilterSettings
m_bExcluded	sphinxquery.h	/^	bool				m_bExcluded;	\/\/\/< excluded by query (rval to operator NOT)$/;"	m	struct:XQKeyword_t
m_bExcluded	sphinxsearch.cpp	/^	bool		m_bExcluded;	\/\/\/< excluded by the query (eg. bb in (aa AND NOT bb))$/;"	m	struct:ExtQword_t	file:
m_bExcluded	sphinxsearch.h	/^	bool			m_bExcluded;	\/\/\/< excluded by the query (rval to operator NOT)$/;"	m	class:ISphQword
m_bExpand	searchd.cpp	/^	bool				m_bExpand;$/;"	m	struct:ServedDesc_t	file:
m_bExpandKeywords	sphinx.h	/^	bool						m_bExpandKeywords;		\/\/\/< enable automatic query-time keyword expansion (to "( word | =word | *word* )")$/;"	m	class:CSphIndex
m_bExpanded	sphinx.h	/^		bool				m_bExpanded;		\/\/\/< is this term from query itself or was expanded$/;"	m	struct:CSphQueryResultMeta::WordStat_t
m_bExpanded	sphinxquery.h	/^	bool				m_bExpanded;	\/\/\/< added by prefix expansion$/;"	m	struct:XQKeyword_t
m_bExpanded	sphinxsearch.cpp	/^	bool		m_bExpanded;	\/\/\/< added by prefix expansion$/;"	m	struct:ExtQword_t	file:
m_bExpanded	sphinxsearch.h	/^	bool			m_bExpanded;	\/\/\/< added by prefix expansion$/;"	m	class:ISphQword
m_bFieldEnd	sphinxquery.h	/^	bool				m_bFieldEnd;	\/\/\/< must occur at very end$/;"	m	struct:XQKeyword_t
m_bFieldSpec	sphinxquery.h	/^	bool					m_bFieldSpec;	\/\/\/< whether field spec was already explicitly set$/;"	m	struct:XQLimitSpec_t
m_bFieldStart	sphinxquery.h	/^	bool				m_bFieldStart;	\/\/\/< must occur at very start$/;"	m	struct:XQKeyword_t
m_bFilename	sphinx.h	/^	bool							m_bFilename;	\/\/\/< column is a file name$/;"	m	struct:CSphColumnInfo
m_bFirstCaseConv	spelldump.cpp	/^	bool		m_bFirstCaseConv;$/;"	m	class:CISpellAffix	file:
m_bFirstSeparator	sphinxstd.h	/^	bool	m_bFirstSeparator;$/;"	m	class:CSphStringBuilder
m_bFirstTagAfterDocset	sphinx.cpp	/^	bool			m_bFirstTagAfterDocset;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bFixupUTF8	sphinx.cpp	/^	bool			m_bFixupUTF8;		\/\/\/< whether to replace invalid utf-8 codepoints with spaces$/;"	m	class:CSphSource_XMLPipe2	file:
m_bFlushEnabled	searchd.cpp	/^	bool		m_bFlushEnabled;	\/\/\/< in frozen state we never flush until special command$/;"	m	class:NetOutputBuffer_c	file:
m_bFlushing	searchd.cpp	/^	int		m_bFlushing;		\/\/\/< update flushing in progress$/;"	m	struct:FlushState_t	file:
m_bForceAllWords	sphinxexcerpt.h	/^	bool			m_bForceAllWords;	\/\/\/< whether to ignore limit until all needed keywords are highlighted (#448)$/;"	m	struct:ExcerptQuery_t
m_bForceCheck	searchd.cpp	/^	bool	m_bForceCheck;		\/\/\/< forced check\/flush flag$/;"	m	struct:FlushState_t	file:
m_bGeoAnchor	sphinx.h	/^	bool			m_bGeoAnchor;		\/\/\/< do we have an anchor$/;"	m	class:CSphQuery
m_bGotQuery	searchd.cpp	/^	bool			m_bGotQuery;$/;"	m	struct:SqlParser_c	file:
m_bHasAfterPassageMacro	sphinxexcerpt.h	/^	bool			m_bHasAfterPassageMacro;$/;"	m	struct:ExcerptQuery_t
m_bHasBeforePassageMacro	sphinxexcerpt.h	/^	bool			m_bHasBeforePassageMacro;$/;"	m	struct:ExcerptQuery_t
m_bHasHitlist	sphinx.cpp	/^	bool			m_bHasHitlist;$/;"	m	class:CSphDictReader	file:
m_bHasHitlist	sphinxsearch.h	/^	bool			m_bHasHitlist;	\/\/\/< hitlist presence flag$/;"	m	class:ISphQword
m_bHasMorphology	sphinxint.h	/^	bool m_bHasMorphology;$/;"	m	struct:ExpansionContext_t
m_bHasWideFields	sphinxsearch.cpp	/^	bool						m_bHasWideFields;	\/\/\/< whether fields mask for this term refer to fields 32+$/;"	m	class:ExtTerm_c	file:
m_bHighlightQuery	sphinxexcerpt.h	/^	bool			m_bHighlightQuery;	\/\/\/< whether try to highlight the whole query, or always word-by-word$/;"	m	struct:ExcerptQuery_t
m_bHitblock	sphinx.cpp	/^	bool							m_bHitblock;		\/\/\/< should we store words on GetWordID or not$/;"	m	class:CSphDictKeywords	file:
m_bHitlistOver	sphinx.cpp	/^	bool			m_bHitlistOver;$/;"	m	class:DiskIndexQwordTraits_c	file:
m_bHitsReady	sphinx.h	/^	bool			m_bHitsReady;$/;"	m	class:CSphSource_XMLPipe
m_bHtmlStrip	sphinx.h	/^	bool			m_bHtmlStrip;$/;"	m	struct:CSphIndexSettings
m_bId32to64	sphinx.h	/^	bool						m_bId32to64;			\/\/\/< did we convert id32 to id64 on startup$/;"	m	class:CSphIndex
m_bInDocset	sphinx.cpp	/^	bool			m_bInDocset;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bInDocument	sphinx.cpp	/^	bool			m_bInDocument;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bInId	sphinx.cpp	/^	bool			m_bInId;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bInIgnoredTag	sphinx.cpp	/^	bool			m_bInIgnoredTag;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bInKillList	sphinx.cpp	/^	bool			m_bInKillList;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bInSchema	sphinx.cpp	/^	bool			m_bInSchema;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bInTransaction	searchd.cpp	/^	bool			m_bInTransaction;$/;"	m	struct:SessionVars_t	file:
m_bIndexAttrs	sphinx.h	/^		bool					m_bIndexAttrs;	\/\/\/< whether to index attrs$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_bIndexExactWords	sphinx.h	/^	bool	m_bIndexExactWords;	\/\/\/< exact (non-stemmed) word indexing flag$/;"	m	struct:CSphSourceSettings
m_bIndexExactWords	sphinxexcerpt.cpp	/^	bool	m_bIndexExactWords;$/;"	m	class:TokenFunctorTraits_c	file:
m_bIndexSP	sphinx.h	/^	bool	m_bIndexSP;			\/\/\/< whether to index sentence and paragraph delimiters$/;"	m	struct:CSphSourceSettings
m_bIndexed	sphinx.h	/^	bool			m_bIndexed;		\/\/\/< whether to index this column as fulltext field too$/;"	m	struct:CSphColumnInfo
m_bInfixes	sphinxint.h	/^	bool				m_bInfixes;$/;"	m	class:CSphDictStarV8
m_bInitialized	sphinxstd.h	/^	bool				m_bInitialized;$/;"	m	class:CSphRwlock
m_bInitialized	sphinxstd.h	/^	bool m_bInitialized;$/;"	m	class:CSphMutex
m_bInline	sphinx.h	/^		bool					m_bInline;		\/\/\/< whether this tag is inline$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_bInplaceSettings	sphinx.h	/^	bool						m_bInplaceSettings;$/;"	m	class:CSphIndex
m_bInterruptNow	sphinxsearch.cpp	/^	static volatile bool		m_bInterruptNow; \/\/\/< may be set from outside to indicate the globally received sigterm$/;"	m	class:ExtTerm_c	file:
m_bInterruptNow	sphinxsearch.cpp	/^volatile bool ExtTerm_c::m_bInterruptNow = false;$/;"	m	class:ExtTerm_c	file:
m_bIntr	searchd.cpp	/^	bool				m_bIntr;$/;"	m	class:NetInputBuffer_c	file:
m_bIsEmpty	sphinx.cpp	/^	bool						m_bIsEmpty;				\/\/\/< do we have actually indexed documents (m_iTotalDocuments is just fetched documents, not indexed!)$/;"	m	class:CSphIndex_VLN	file:
m_bKeepFilesOpen	sphinx.h	/^	bool						m_bKeepFilesOpen;		\/\/\/< keep files open to avoid race on seamless rotation$/;"	m	class:CSphIndex
m_bLocal	searchd.cpp	/^	bool						m_bLocal;$/;"	m	struct:SnippetWorker_t	file:
m_bLookupFilter	sphinxint.h	/^	bool						m_bLookupFilter;		\/\/\/< row data lookup required at filtering stage$/;"	m	class:CSphQueryContext
m_bLookupSort	sphinxint.h	/^	bool						m_bLookupSort;			\/\/\/< row data lookup required at sorting stage$/;"	m	class:CSphQueryContext
m_bMVA	sphinxsort.cpp	/^	bool				m_bMVA;				\/\/\/< whether we're grouping by MVA attribute$/;"	m	struct:CSphGroupSorterSettings	file:
m_bMarked	sphinxquery.cpp	/^	bool		m_bMarked;$/;"	m	struct:MarkedNode_t	file:
m_bMerging	sphinx.cpp	/^	bool						m_bMerging;$/;"	m	class:CSphIndex_VLN	file:
m_bMlock	searchd.cpp	/^	bool				m_bMlock;$/;"	m	struct:ServedDesc_t	file:
m_bMlock	sphinxstd.h	/^	bool				m_bMlock;	\/\/\/< whether to lock data in RAM$/;"	m	class:CSphSharedBuffer
m_bMultiQueue	searchd.cpp	/^	bool							m_bMultiQueue;	\/\/\/< whether current subset is subject to multi-queue optimization$/;"	m	class:SearchHandler_c	file:
m_bMva64	sphinx.cpp	/^	bool				m_bMva64;$/;"	m	struct:FieldMVARedirect_t	file:
m_bMva64	sphinxsort.cpp	/^	bool				m_bMva64;$/;"	m	class:CSphKBufferMVAGroupSorter	file:
m_bMva64	sphinxsort.cpp	/^	bool				m_bMva64;$/;"	m	struct:CSphGroupSorterSettings	file:
m_bMySQL	searchd.cpp	/^	bool					m_bMySQL;	\/\/ is query from MySQL or API$/;"	m	struct:CrashQuery_t	file:
m_bNamedVecBusy	searchd.cpp	/^	bool						m_bNamedVecBusy;$/;"	m	struct:SqlParser_c	file:
m_bNonBlended	sphinx.h	/^	bool							m_bNonBlended;				\/\/\/< internal, whether there were any normal chars in that blended token$/;"	m	class:ISphTokenizer
m_bNotWeighted	sphinxquery.h	/^	bool					m_bNotWeighted;	\/\/\/< this our expanded but empty word's node$/;"	m	struct:XQNode_t
m_bNotWeighted	sphinxsearch.cpp	/^	const bool					m_bNotWeighted;$/;"	m	class:ExtTerm_c	file:
m_bOnDiskDict	searchd.cpp	/^	bool				m_bOnDiskDict;$/;"	m	struct:ServedDesc_t	file:
m_bOnlyNew	searchd.cpp	/^	bool				m_bOnlyNew;$/;"	m	struct:ServedDesc_t	file:
m_bOwnFile	sphinxint.h	/^	bool			m_bOwnFile;$/;"	m	class:CSphWriter
m_bPalatalize	sphinxstemcz.cpp	/^	bool	m_bPalatalize;$/;"	m	struct:ClampRule_t	file:
m_bPara	sphinx.h	/^		bool					m_bPara;		\/\/\/< whether to mark a paragraph boundary$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_bPassedBufferEnd	sphinx.cpp	/^	bool			m_bPassedBufferEnd;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bPassthrough	sphinxsearch.cpp	/^	bool						m_bPassthrough;$/;"	m	class:ExtAndNot_c	file:
m_bPayload	sphinx.h	/^	bool							m_bPayload;$/;"	m	struct:CSphColumnInfo
m_bPayload	sphinx.h	/^	bool				m_bPayload;$/;"	m	struct:CSphJoinedField
m_bPhrase	sphinx.h	/^	bool							m_bPhrase;$/;"	m	class:ISphTokenizer
m_bPosAware	sphinxsearch.cpp	/^	bool						m_bPosAware;$/;"	m	class:ExtTwofer_c	file:
m_bPreallocated	sphinx.cpp	/^	bool						m_bPreallocated;		\/\/\/< are we ready to preread$/;"	m	class:CSphIndex_VLN	file:
m_bPrefixes	sphinxint.h	/^	bool				m_bPrefixes;$/;"	m	class:CSphDictStarV8
m_bPreloadWordlist	sphinx.h	/^	bool						m_bPreloadWordlist;		\/\/\/< preload wordlists or keep them on disk$/;"	m	class:CSphIndex
m_bPreopen	searchd.cpp	/^	bool				m_bPreopen;$/;"	m	struct:ServedDesc_t	file:
m_bPrintQueries	sphinx.h	/^	bool							m_bPrintQueries;$/;"	m	struct:CSphSourceParams_SQL
m_bProcessingHits	sphinx.h	/^		bool m_bProcessingHits;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_bQueryMode	sphinx.h	/^	bool							m_bQueryMode;				\/\/\/< is this indexing time or searching time?$/;"	m	class:ISphTokenizer
m_bQueryMode	sphinxexcerpt.cpp	/^	bool									m_bQueryMode;$/;"	m	class:SnippetsDocIndex_c	file:
m_bQuoted	sphinxquery.cpp	/^	bool					m_bQuoted;$/;"	m	class:XQParser_t	file:
m_bRT	searchd.cpp	/^	bool				m_bRT;$/;"	m	struct:ServedDesc_t	file:
m_bRandomize	sphinx.h	/^	bool				m_bRandomize;$/;"	m	class:ISphMatchSorter
m_bRemove	sphinx.h	/^		bool					m_bRemove;		\/\/\/< whether to remove contents$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_bRemoveParsed	sphinx.cpp	/^	bool			m_bRemoveParsed;$/;"	m	class:CSphSource_XMLPipe2	file:
m_bRemoveSpaces	sphinxexcerpt.h	/^	bool			m_bRemoveSpaces;	\/\/\/< whether to collapse whitespace$/;"	m	struct:ExcerptQuery_t
m_bResult	searchd.cpp	/^	bool				m_bResult;$/;"	m	struct:LocalSearch_t	file:
m_bReverseScan	sphinx.h	/^	bool			m_bReverseScan;		\/\/\/< perform scan in reverse order$/;"	m	class:CSphQuery
m_bScattered	searchd.cpp	/^	mutable bool m_bScattered;$/;"	m	struct:SnippetRequestBuilder_t	file:
m_bSetNull	searchd.cpp	/^	bool					m_bSetNull;$/;"	m	struct:SqlStmt_t	file:
m_bSetupReaders	sphinx.cpp	/^	bool					m_bSetupReaders;$/;"	m	class:DiskIndexQwordSetup_c	file:
m_bShitHappened	sphinx.cpp	/^	bool	m_bShitHappened;$/;"	m	class:DeleteOnFail	file:
m_bShortTokenFilter	sphinx.h	/^	bool							m_bShortTokenFilter;		\/\/\/< short token filter flag$/;"	m	class:ISphTokenizer
m_bSingleWord	sphinxquery.h	/^	bool					m_bSingleWord;$/;"	m	struct:XQQuery_t
m_bSortByDistinct	sphinxsort.cpp	/^	bool			m_bSortByDistinct;$/;"	m	class:CSphKBufferGroupSorter	file:
m_bSorted	sphinxsort.cpp	/^	bool			m_bSorted;$/;"	m	class:CSphUniqounter	file:
m_bSpecial	sphinx.cpp	/^		bool			m_bSpecial;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_bSphinxql	searchd.cpp	/^	bool							m_bSphinxql;	\/\/\/< if the query get from sphinxql - to avoid applying sphinxql magick for others$/;"	m	class:SearchHandler_c	file:
m_bSqlConnected	sphinx.h	/^	bool				m_bSqlConnected;	\/\/\/< am i connected?$/;"	m	struct:CSphSource_SQL
m_bStar	searchd.cpp	/^	bool				m_bStar;$/;"	m	struct:ServedDesc_t	file:
m_bStarEnabled	sphinxint.h	/^	bool m_bStarEnabled;$/;"	m	struct:ExpansionContext_t
m_bStopOnInvalid	sphinxquery.cpp	/^	bool					m_bStopOnInvalid;$/;"	m	class:XQParser_t	file:
m_bStripHTML	sphinx.h	/^	bool								m_bStripHTML;	\/\/\/< whether to strip HTML$/;"	m	class:CSphSource
m_bStripperInited	sphinx.h	/^	bool						m_bStripperInited;		\/\/\/< was stripper initialized (old index version (<9) handling)$/;"	m	class:CSphIndex
m_bSuccess	searchd.cpp	/^	bool			m_bSuccess;		\/\/\/< whether last request was successful (ie. there are available results)$/;"	m	struct:AgentConn_t	file:
m_bTag	sphinxstd.h	/^	bool			m_bTag;$/;"	m	struct:CSphVariant
m_bTemporary	sphinxint.h	/^	bool		m_bTemporary;	\/\/\/< whether to unlink this file on Close()$/;"	m	class:CSphAutofile
m_bToDelete	searchd.cpp	/^	bool						m_bToDelete;				\/\/\/< should be deleted$/;"	m	struct:DistributedIndex_t	file:
m_bToDelete	searchd.cpp	/^	bool				m_bToDelete;$/;"	m	struct:ServedDesc_t	file:
m_bToDrop	sphinxexpr.cpp	/^	bool				m_bToDrop;		\/\/\/< scheduled for DROP; do not use$/;"	m	struct:UdfFunc_t	file:
m_bTokenBoundary	sphinx.h	/^	bool							m_bTokenBoundary;			\/\/\/< last token boundary flag (true after boundary codepoint followed by separator)$/;"	m	class:ISphTokenizer
m_bTruncated	sphinx.h	/^		bool				m_bTruncated;	\/\/\/< whether data was truncated when fetching rows$/;"	m	struct:CSphSource_ODBC::QueryColumn_t
m_bTwofer	sphinxsearch.cpp	/^	bool						m_bTwofer;			\/\/\/< if we have 2- or N-way NEAR$/;"	m	class:FSMmultinear	file:
m_bUnicode	sphinx.h	/^		bool				m_bUnicode;		\/\/\/< whether this column needs UCS-2 to UTF-8 translation$/;"	m	struct:CSphSource_ODBC::QueryColumn_t
m_bUnicode	sphinx.h	/^	bool					m_bUnicode;$/;"	m	struct:CSphSource_ODBC
m_bUnicode	sphinx.h	/^	bool		m_bUnicode;			\/\/\/< whether to ask for Unicode or SBCS (C char) data (MS SQL only)$/;"	m	struct:CSphSourceParams_ODBC
m_bUnpackFailed	sphinx.h	/^	bool				m_bUnpackFailed;$/;"	m	struct:CSphSource_SQL
m_bUnpackOverflow	sphinx.h	/^	bool				m_bUnpackOverflow;$/;"	m	struct:CSphSource_SQL
m_bUse64	sphinx.cpp	/^	bool						m_bUse64;				\/\/\/< whether the header is id64$/;"	m	class:CSphIndex_VLN	file:
m_bUseBoundaries	sphinxexcerpt.h	/^	bool			m_bUseBoundaries;	\/\/\/< whether to extract passages by phrase boundaries setup in tokenizer$/;"	m	struct:ExcerptQuery_t
m_bUseDictConversion	spelldump.cpp	/^	bool		m_bUseDictConversion;$/;"	m	class:CISpellAffix	file:
m_bUseLowerCaser	spelldump.cpp	/^	bool		m_bUseLowerCaser;$/;"	m	class:CISpellAffix	file:
m_bUsesAttrs	sphinxfilter.h	/^	bool m_bUsesAttrs;$/;"	m	struct:ISphFilter
m_bUsesAttrs	sphinxsort.cpp	/^	const bool					m_bUsesAttrs;$/;"	m	class:CSphMatchQueueTraits	file:
m_bUtf8	sphinxexcerpt.cpp	/^	bool					m_bUtf8;$/;"	m	class:ExcerptGen_c	file:
m_bVerbose	sphinx.h	/^	bool			m_bVerbose;$/;"	m	struct:CSphIndexSettings
m_bVirtuallyPlain	sphinxquery.h	/^	bool					m_bVirtuallyPlain;	\/\/\/< "virtually plain" flag (currently only used by expanded nodes)$/;"	m	struct:XQNode_t
m_bWarned	sphinx.h	/^	bool			m_bWarned;			\/\/\/< warned of buffer size already$/;"	m	class:CSphSource_XMLPipe
m_bWasBlended	sphinxquery.cpp	/^	bool					m_bWasBlended;$/;"	m	class:XQParser_t	file:
m_bWasSpecial	sphinx.h	/^	bool							m_bWasSpecial;				\/\/\/< special token flag$/;"	m	class:ISphTokenizer
m_bWasSynonym	sphinx.h	/^	bool							m_bWasSynonym;				\/\/\/< last token is a synonym token$/;"	m	class:ISphTokenizer
m_bWeight	sphinx.h	/^	bool							m_bWeight;		\/\/\/< is a weight column$/;"	m	struct:CSphColumnInfo
m_bWeightOrder	sphinxexcerpt.h	/^	bool			m_bWeightOrder;		\/\/\/< whether to order best passages in document (default) or weight order$/;"	m	struct:ExcerptQuery_t
m_bWinAuth	sphinx.h	/^	bool					m_bWinAuth;$/;"	m	struct:CSphSource_ODBC
m_bWinAuth	sphinx.h	/^	bool		m_bWinAuth;			\/\/\/< auth type (MS SQL only)$/;"	m	struct:CSphSourceParams_ODBC
m_bWordDict	sphinx.cpp	/^	bool								m_bWordDict;$/;"	m	class:CWordlist	file:
m_bWordDict	sphinx.cpp	/^	bool						m_bWordDict;$/;"	m	class:CSphIndex_VLN	file:
m_bWordDict	sphinx.cpp	/^	bool				m_bWordDict;$/;"	m	struct:CSphBin	file:
m_bWordDict	sphinx.h	/^	bool			m_bWordDict;$/;"	m	struct:CSphDictSettings
m_bWouldTemporary	sphinxint.h	/^	bool		m_bWouldTemporary; \/\/\/< backup of the m_bTemporary$/;"	m	class:CSphAutofile
m_bZone	sphinx.h	/^		bool					m_bZone;		\/\/\/< whether to mark a zone boundary$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_bZonePrefix	sphinx.h	/^		bool					m_bZonePrefix;	\/\/\/< whether the zone name is a full name or a prefix$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_bmAgentStats	searchd.cpp	/^	DWORD			m_bmAgentStats[STATS_MAX_AGENTS\/32];	\/\/\/< per-agent storage usage bitmap$/;"	m	struct:SearchdStats_t	file:
m_cFlag	spelldump.cpp	/^	char		m_cFlag;$/;"	m	class:CISpellAffixRule	file:
m_dAgentStats	searchd.cpp	/^	AgentStats_t	m_dAgentStats[STATS_MAX_AGENTS];		\/\/\/< per-agent storage$/;"	m	struct:SearchdStats_t	file:
m_dAgentTimes	searchd.cpp	/^	CSphVector < CSphVector<int64_t> >	m_dAgentTimes;				\/\/\/< per-agent time stats$/;"	m	class:SearchHandler_c	file:
m_dAgents	searchd.cpp	/^	CSphVector<AgentConn_t>		m_dAgents;$/;"	m	struct:SnippetsRemote_t	file:
m_dAgents	searchd.cpp	/^	CSphVector<AgentDesc_t>		m_dAgents;					\/\/\/< remote agents$/;"	m	struct:DistributedIndex_t	file:
m_dAggregates	sphinxsort.cpp	/^	CSphVector<IAggrFunc *>		m_dAggregates;$/;"	m	class:CSphKBufferGroupSorter	file:
m_dArgs	sphinxexpr.cpp	/^	CSphVector<ISphExpr *> m_dArgs;$/;"	m	struct:Expr_Arglist_c	file:
m_dArgs	sphinxexpr.cpp	/^	CSphVector<ISphExpr*>			m_dArgs;$/;"	m	class:Expr_Udf_c	file:
m_dArgvals	sphinxexpr.cpp	/^	mutable CSphVector<int64_t>		m_dArgvals;$/;"	m	class:Expr_Udf_c	file:
m_dAtomPos	sphinxsearch.cpp	/^		CSphVector<int>				m_dAtomPos;				\/\/\/< lets use it as finite automata states and keep references on it$/;"	m	class:FSMphrase	file:
m_dAttrToMVA	sphinx.cpp	/^	CSphVector < int > m_dAttrToMVA;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dAttrs	sphinx.cpp	/^		CSphVector<CSphString>	m_dAttrs;$/;"	m	struct:CSphSource_XMLPipe2::Document_t	file:
m_dAttrs	sphinx.cpp	/^	CSphVector <const char *> m_dAttrs;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dAttrs	sphinx.h	/^		CSphVector<CSphString>	m_dAttrs;		\/\/\/< attr names to index$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_dAttrs	sphinx.h	/^	CSphVector<CSphColumnInfo>		m_dAttrs;			\/\/\/< all my attributes$/;"	m	struct:CSphSchema
m_dAttrs	sphinx.h	/^	CSphVector<CSphColumnInfo>		m_dAttrs;		\/\/\/< update schema (ie. what attrs to update)$/;"	m	struct:CSphAttrUpdate
m_dAttrs	sphinx.h	/^	CSphVector<CSphColumnInfo>		m_dAttrs;$/;"	m	struct:CSphSourceParams_SQL
m_dAutofiles	sphinx.cpp	/^	CSphVector<CSphAutofile*> m_dAutofiles;$/;"	m	class:DeleteOnFail	file:
m_dAvgs	sphinxsort.cpp	/^	CSphVector<IAggrFunc *>		m_dAvgs;$/;"	m	class:CSphKBufferGroupSorter	file:
m_dBitWeights	sphinxexpr.cpp	/^	CSphVector<ISphExpr *> m_dBitWeights;$/;"	m	class:Expr_Bitdot_c	file:
m_dBitmasks	sphinxquery.cpp	/^	CSphVector<BitMask_t>		m_dBitmasks;		\/\/ all bitmasks for all the nodes$/;"	m	class:RevealCommon_t	file:
m_dBuf	searchd.cpp	/^	char m_dBuf[4096];$/;"	m	class:SqlRowBuffer_c	file:
m_dBuf	sphinxsort.cpp	/^	mutable CSphTightVector<BYTE> m_dBuf;$/;"	m	class:LibcCSHash_fn	file:
m_dBuffer	searchd.cpp	/^	BYTE		m_dBuffer[NETOUTBUF];	\/\/\/< my buffer$/;"	m	class:NetOutputBuffer_c	file:
m_dBuffer	sphinx.cpp	/^	BYTE *				m_dBuffer;$/;"	m	struct:CSphBin	file:
m_dCalcFilter	sphinxint.h	/^	CSphVector<CalcItem_t>		m_dCalcFilter;			\/\/\/< items to compute for filtering$/;"	m	class:CSphQueryContext
m_dCalcFinal	sphinxint.h	/^	CSphVector<CalcItem_t>		m_dCalcFinal;			\/\/\/< items to compute when finalizing result set$/;"	m	class:CSphQueryContext
m_dCalcSort	sphinxint.h	/^	CSphVector<CalcItem_t>		m_dCalcSort;			\/\/\/< items to compute for sorting\/grouping$/;"	m	class:CSphQueryContext
m_dCallOptNames	searchd.cpp	/^	CSphVector<CSphString>	m_dCallOptNames;$/;"	m	struct:SqlStmt_t	file:
m_dCallOptValues	searchd.cpp	/^	CSphVector<SqlInsert_t>	m_dCallOptValues;$/;"	m	struct:SqlStmt_t	file:
m_dCallStrings	searchd.cpp	/^	CSphVector<CSphString>	m_dCallStrings;$/;"	m	struct:SqlStmt_t	file:
m_dCharset	spelldump.cpp	/^	char		m_dCharset [256];$/;"	m	class:CISpellAffix	file:
m_dCheckpoints	sphinx.cpp	/^	CSphFixedVector<CSphWordlistCheckpoint>	m_dCheckpoints;			\/\/\/< checkpoint offsets$/;"	m	class:CWordlist	file:
m_dCheckpoints	sphinx.cpp	/^	CSphTightVector<CSphWordlistCheckpoint>	m_dCheckpoints;		\/\/\/< checkpoint offsets$/;"	m	struct:CSphDictCRCTraits	file:
m_dChildren	sphinxquery.h	/^	CSphVector<XQNode_t*>	m_dChildren;	\/\/\/< non-plain node children$/;"	m	struct:XQNode_t
m_dChildren	sphinxsearch.cpp	/^	CSphVector<ExtNode_i *>		m_dChildren;$/;"	m	class:ExtOrder_c	file:
m_dChildren	sphinxsearch.cpp	/^	CSphVector<ExtNode_i*>		m_dChildren;		\/\/\/< my children nodes (simply ExtTerm_c for now)$/;"	m	class:ExtQuorum_c	file:
m_dClose	sphinxexcerpt.cpp	/^		CSphVector<Hitpos_t> m_dClose;$/;"	m	struct:SnippetZoneChecker_c::ZoneHits_t	file:
m_dCollection	sphinx.cpp	/^	CSphVector<SphDocID_t> * m_dCollection;$/;"	m	class:tDocCollector	file:
m_dColumns	sphinx.h	/^	CSphVector<QueryColumn_t>	m_dColumns;$/;"	m	struct:CSphSource_ODBC
m_dContents	sphinx.h	/^		CSphVector<char>	m_dContents;$/;"	m	struct:CSphSource_ODBC::QueryColumn_t
m_dData	sphinx.h	/^	CSphVector<CSphWordHit> m_dData;$/;"	m	class:ISphHits
m_dDefaultAttrs	sphinx.cpp	/^	CSphVector<CSphString> m_dDefaultAttrs;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dDeleteIds	searchd.cpp	/^	CSphVector<SphDocID_t>	m_dDeleteIds;$/;"	m	struct:SqlStmt_t	file:
m_dDeltas	sphinxsearch.cpp	/^	CSphVector<int> 			m_dDeltas; \/\/ used for weight calculation$/;"	m	class:FSMproximity	file:
m_dDescStemmers	sphinx.cpp	/^	CSphVector<DescStemmer_t> m_dDescStemmers;$/;"	m	struct:CSphDictCRCTraits	file:
m_dDictBlocks	sphinx.cpp	/^	CSphVector<DictBlock_t>			m_dDictBlocks;		\/\/\/< on-disk locations of dict entry blocks$/;"	m	class:CSphDictKeywords	file:
m_dDictChunks	sphinx.cpp	/^	CSphVector<DictKeyword_t*>		m_dDictChunks;		\/\/\/< dict entry chunks, only used when sorting final dict$/;"	m	class:CSphDictKeywords	file:
m_dDocHits	sphinxexcerpt.cpp	/^	CSphVector< CSphVector<int> >			m_dDocHits;$/;"	m	class:SnippetsDocIndex_c	file:
m_dDocids	sphinx.h	/^	CSphVector<SphDocID_t>			m_dDocids;		\/\/\/< document IDs vector$/;"	m	struct:CSphAttrUpdate
m_dDoclistBuf	sphinx.cpp	/^	BYTE			m_dDoclistBuf [ MINIBUFFER_LEN ];$/;"	m	class:DiskIndexQwordTraits_c	file:
m_dDocs	sphinxsearch.cpp	/^	ExtDoc_t					m_dDocs[MAX_DOCS];$/;"	m	class:ExtNode_i	file:
m_dDynamicUsed	sphinx.h	/^	CSphVector<int>					m_dDynamicUsed;		\/\/\/< dynamic row part map$/;"	m	struct:CSphSchema
m_dEnd	sphinx.h	/^	int							m_dEnd[MAX_CHAR_INDEX];		\/\/\/< maps index of the first tag name char to end offset in m_dTags$/;"	m	class:CSphHTMLStripper
m_dEnds	sphinxsearch.cpp	/^	CSphVector<Hitpos_t> m_dEnds;$/;"	m	struct:ZoneInfo_t	file:
m_dEntries	spelldump.cpp	/^	CSphVector < CISpellDictWord > m_dEntries;$/;"	m	class:CISpellDict	file:
m_dEntries	sphinx.cpp	/^		int					m_dEntries[MAX_LOGENTRIES];$/;"	m	struct:CSphArena::AllocsLogEntry_t	file:
m_dEntries	sphinxsort.cpp	/^	CSphVector<HashEntry_t>		m_dEntries;		\/\/\/< key-value pairs storage pool$/;"	m	class:CSphFixedHash	file:
m_dEntryChunks	sphinx.cpp	/^	CSphVector<HitblockKeyword_t*>	m_dEntryChunks;		\/\/\/< hash chunks, only used when indexing hitblocks$/;"	m	class:CSphDictKeywords	file:
m_dExceptions	sphinx.cpp	/^	CSphVector<HitblockException_t>	m_dExceptions;$/;"	m	class:CSphDictKeywords	file:
m_dExtraSchemas	searchd.cpp	/^	mutable CSphVector<CSphSchemaMT>		m_dExtraSchemas; \/\/\/< the extra fields for agents$/;"	m	class:SearchHandler_c	file:
m_dFailuresSet	searchd.cpp	/^	CSphVector<SearchFailuresLog_c>	m_dFailuresSet;					\/\/\/< failure logs for each query$/;"	m	class:SearchHandler_c	file:
m_dFieldMVAs	sphinx.cpp	/^	CSphVector < CSphVector <DWORD> > m_dFieldMVAs;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dFieldMask	sphinx.cpp	/^	CSphSmallBitvec	m_dFieldMask;	\/\/\/< mask of fields containing this word, 0 for regular hits, non-0 for aggregate hits$/;"	m	struct:CSphAggregateHit	file:
m_dFieldMask	sphinxquery.h	/^	CSphSmallBitvec			m_dFieldMask;	\/\/\/< fields mask (spec part)$/;"	m	struct:XQLimitSpec_t
m_dFieldPtrs	sphinx.cpp	/^	CSphVector<BYTE*>m_dFieldPtrs;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dFieldWeights	sphinx.h	/^	CSphVector<CSphNamedInt>	m_dFieldWeights;	\/\/\/< per-field weights$/;"	m	class:CSphQuery
m_dFields	sphinx.cpp	/^		CSphVector<CSphString>	m_dFields;$/;"	m	struct:CSphSource_XMLPipe2::Document_t	file:
m_dFields	sphinx.h	/^		BYTE ** m_dFields;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_dFields	sphinx.h	/^	BYTE *				m_dFields [ SPH_MAX_FIELDS ];$/;"	m	struct:CSphSource_SQL
m_dFields	sphinx.h	/^	CSphVector<CSphColumnInfo>		m_dFields;		\/\/\/< my fulltext-searchable fields$/;"	m	struct:CSphSchema
m_dFields	tests.cpp	/^	char m_dFields[m_iMaxFields][m_iMaxFieldLen];$/;"	m	class:SphDocRandomizer_c	file:
m_dFieldsMask	sphinxstd.h	/^	DWORD m_dFieldsMask[IELEMENTS];$/;"	m	class:CSphSmallBitvec
m_dFileFields	sphinx.h	/^	CSphVector<CSphString>			m_dFileFields;$/;"	m	struct:CSphSourceParams_SQL
m_dFilteredHits	sphinxsearch.cpp	/^	ExtHit_t					m_dFilteredHits[MAX_HITS];	\/\/\/< hits from requested subset of the documents (for GetHitsChunk())$/;"	m	class:ExtTermPos_c	file:
m_dFilters	sphinx.h	/^	CSphVector<CSphFilterSettings>	m_dFilters;	\/\/\/< filters$/;"	m	class:CSphQuery
m_dFilters	sphinxfilter.cpp	/^	CSphVector<ISphFilter *> m_dFilters;$/;"	m	struct:Filter_And	file:
m_dFloatAttrs	sphinxint.h	/^	CSphVector<CSphAttrLocator>	m_dFloatAttrs;$/;"	m	class:AttrIndexBuilder_t
m_dFloatIndexMax	sphinxint.h	/^	CSphVector<float>			m_dFloatIndexMax;$/;"	m	class:AttrIndexBuilder_t
m_dFloatIndexMin	sphinxint.h	/^	CSphVector<float>			m_dFloatIndexMin;$/;"	m	class:AttrIndexBuilder_t
m_dFloatMax	sphinxint.h	/^	CSphVector<float>			m_dFloatMax;$/;"	m	class:AttrIndexBuilder_t
m_dFloatMin	sphinxint.h	/^	CSphVector<float>			m_dFloatMin;$/;"	m	class:AttrIndexBuilder_t
m_dFloats	sphinxexpr.cpp	/^	CSphVector<float>		m_dFloats;		\/\/\/< float storage$/;"	m	class:ConstList_c	file:
m_dFree	sphinxsort.cpp	/^	CSphVector<int>				m_dFree;		\/\/\/< free pair indexes$/;"	m	class:CSphFixedHash	file:
m_dHash	sphinx.cpp	/^	CSphOrderedHash < int, CSphString, CSphStrHashFunc, 1048576 >	m_dHash;$/;"	m	struct:WordformContainer_t	file:
m_dHash	sphinx.cpp	/^	HitblockKeyword_t *				m_dHash [ SLOTS ];	\/\/\/< hash by wordid (!)$/;"	m	class:CSphDictKeywords	file:
m_dHash	sphinxsort.cpp	/^	CSphVector<int>				m_dHash;		\/\/\/< hash into m_dEntries pool$/;"	m	class:CSphFixedHash	file:
m_dHash	sphinxstd.h	/^	HashEntry_t *	m_dHash [ LENGTH ];		\/\/\/< all the hash entries$/;"	m	class:CSphOrderedHash
m_dHitlessWords	sphinx.cpp	/^	CSphVector<SphWordID_t>		m_dHitlessWords;$/;"	m	class:CSphIndex_VLN	file:
m_dHitlistBuf	sphinx.cpp	/^	BYTE			m_dHitlistBuf [ MINIBUFFER_LEN ];$/;"	m	class:DiskIndexQwordTraits_c	file:
m_dHits	sphinxsearch.cpp	/^	ExtHit_t					m_dHits[MAX_HITS];$/;"	m	class:ExtNode_i	file:
m_dIDF	sphinxsearch.cpp	/^	CSphVector<float>	m_dIDF;$/;"	m	struct:RankerState_Expr_fn	file:
m_dIndexWeights	sphinx.h	/^	CSphVector<CSphNamedInt>	m_dIndexWeights;	\/\/\/< per-index weights$/;"	m	class:CSphQuery
m_dInfixFields	sphinx.h	/^	CSphVector<CSphString>	m_dInfixFields;		\/\/\/< list of infix fields$/;"	m	struct:CSphSourceSettings
m_dInitialChildren	sphinxsearch.cpp	/^	CSphVector<ExtNode_i*>		m_dInitialChildren;	\/\/\/< my children nodes (simply ExtTerm_c for now)$/;"	m	class:ExtQuorum_c	file:
m_dInsertSchema	searchd.cpp	/^	CSphVector<CSphString>	m_dInsertSchema;$/;"	m	struct:SqlStmt_t	file:
m_dInsertValues	searchd.cpp	/^	CSphVector<SqlInsert_t>	m_dInsertValues; \/\/ reused by CALL$/;"	m	struct:SqlStmt_t	file:
m_dIntAttrs	sphinxint.h	/^	CSphVector<CSphAttrLocator>	m_dIntAttrs;$/;"	m	class:AttrIndexBuilder_t
m_dIntIndexMax	sphinxint.h	/^	CSphVector<SphAttr_t>		m_dIntIndexMax;$/;"	m	class:AttrIndexBuilder_t
m_dIntIndexMin	sphinxint.h	/^	CSphVector<SphAttr_t>		m_dIntIndexMin;$/;"	m	class:AttrIndexBuilder_t
m_dIntMax	sphinxint.h	/^	CSphVector<SphAttr_t>		m_dIntMax;$/;"	m	class:AttrIndexBuilder_t
m_dIntMin	sphinxint.h	/^	CSphVector<SphAttr_t>		m_dIntMin;$/;"	m	class:AttrIndexBuilder_t
m_dIntTokens	sphinxquery.cpp	/^	CSphVector<CSphString>	m_dIntTokens;$/;"	m	class:XQParser_t	file:
m_dInts	sphinxexpr.cpp	/^	CSphVector<int64_t>		m_dInts;		\/\/\/< dword\/int64 storage$/;"	m	class:ConstList_c	file:
m_dInvalid	sphinx.cpp	/^	CSphVector<CSphString> m_dInvalid;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dIsColumnBool	sphinx.h	/^	CSphVector<bool>		m_dIsColumnBool;$/;"	m	struct:CSphSource_PgSQL
m_dItems	sphinx.h	/^	CSphVector<CSphQueryItem>	m_dItems;		\/\/\/< parsed select-list$/;"	m	class:CSphQuery
m_dJoinedFields	sphinx.h	/^	CSphVector<CSphJoinedField>		m_dJoinedFields;$/;"	m	struct:CSphSourceParams_SQL
m_dKeywordChunks	sphinx.cpp	/^	CSphVector<BYTE*>				m_dKeywordChunks;	\/\/\/< keyword storage$/;"	m	class:CSphDictKeywords	file:
m_dKeywords	sphinxexcerpt.cpp	/^	CSphVector<Keyword_t>	m_dKeywords;$/;"	m	class:ExcerptGen_c	file:
m_dKeywordsBuffer	sphinxexcerpt.cpp	/^	CSphVector<char>		m_dKeywordsBuffer;$/;"	m	class:ExcerptGen_c	file:
m_dKillList	sphinx.cpp	/^	CSphVector < SphDocID_t > m_dKillList;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dLastDocFields	sphinx.cpp	/^	CSphSmallBitvec				m_dLastDocFields;		\/\/\/< doclist entry$/;"	m	class:CSphIndex_VLN	file:
m_dLocal	searchd.cpp	/^	CSphVector<CSphString>			m_dLocal;		\/\/\/< local indexes for the current subset$/;"	m	class:SearchHandler_c	file:
m_dLocal	searchd.cpp	/^	CSphVector<CSphString>		m_dLocal;					\/\/\/< local indexes$/;"	m	struct:DistributedIndex_t	file:
m_dLockedAttrs	searchd.cpp	/^	CSphVector<const CSphIndex*>		m_dLockedAttrs;		\/\/\/< indexes which are hold in the memory untill sending result$/;"	m	struct:AggrResult_t	file:
m_dLog	searchd.cpp	/^	CSphVector<SearchFailure_t>		m_dLog;$/;"	m	class:SearchFailuresLog_c	file:
m_dMVA	sphinxint.h	/^	CSphVector < CSphVector<DWORD> >	m_dMVA;$/;"	m	struct:CSphDocMVA
m_dMatchCounts	searchd.cpp	/^	CSphVector<int>				m_dMatchCounts;		\/\/\/< aggregated resultsets lengths (for schema minimization)$/;"	m	struct:AggrResult_t	file:
m_dMatches	sphinx.h	/^	CSphSwapVector<CSphMatch>	m_dMatches;			\/\/\/< top matching documents, no more than MAX_MATCHES$/;"	m	class:CSphQueryResult
m_dMatches	sphinxsearch.cpp	/^	CSphMatch					m_dMatches[ExtNode_i::MAX_DOCS];	\/\/\/< exposed for caller$/;"	m	class:ExtRanker_c	file:
m_dMaxID	sphinxsearch.cpp	/^	CSphVector<SphDocID_t>		m_dMaxID;		\/\/\/< max DOCID from the last chunk$/;"	m	class:ExtOrder_c	file:
m_dMinibufer	searchd.cpp	/^	BYTE				m_dMinibufer[NET_MINIBUFFER_SIZE];$/;"	m	class:NetInputBuffer_c	file:
m_dMorph	sphinx.cpp	/^	CSphVector < int >	m_dMorph;$/;"	m	struct:CSphDictCRCTraits	file:
m_dMva	sphinx.h	/^	CSphVector<DWORD>					m_dMva;			\/\/\/< MVA storage for mva64$/;"	m	class:CSphSource
m_dMvaAttrs	sphinxint.h	/^	CSphVector<CSphAttrLocator>	m_dMvaAttrs;$/;"	m	class:AttrIndexBuilder_t
m_dMvaIndexMax	sphinxint.h	/^	CSphVector<int64_t>			m_dMvaIndexMax;$/;"	m	class:AttrIndexBuilder_t
m_dMvaIndexMin	sphinxint.h	/^	CSphVector<int64_t>			m_dMvaIndexMin;$/;"	m	class:AttrIndexBuilder_t
m_dMvaMax	sphinxint.h	/^	CSphVector<int64_t>			m_dMvaMax;$/;"	m	class:AttrIndexBuilder_t
m_dMvaMin	sphinxint.h	/^	CSphVector<int64_t>			m_dMvaMin;$/;"	m	class:AttrIndexBuilder_t
m_dMvaStorage	searchd.cpp	/^	CSphVector<DWORD>				m_dMvaStorage;$/;"	m	class:SearchHandler_c	file:
m_dMvaStorage	searchd.cpp	/^	CSphVector<DWORD> &	m_dMvaStorage;$/;"	m	struct:SearchReplyParser_t	file:
m_dMyDocs	sphinxsearch.cpp	/^	ExtDoc_t					m_dMyDocs[ExtNode_i::MAX_DOCS];		\/\/\/< my local documents pool; for filtering$/;"	m	class:ExtRanker_c	file:
m_dMyDocs	sphinxsearch.cpp	/^	ExtDoc_t					m_dMyDocs[MAX_DOCS];		\/\/\/< all documents within the required pos range$/;"	m	class:ExtTermPos_c	file:
m_dMyHits	sphinxsearch.cpp	/^	ExtHit_t					m_dMyHits[MAX_HITS];		\/\/\/< all hits within the required pos range$/;"	m	class:ExtTermPos_c	file:
m_dMyHits	sphinxsearch.cpp	/^	ExtHit_t					m_dMyHits[MAX_HITS];	\/\/\/< buffer for all my phrase hits; inherited m_dHits will receive filtered results$/;"	m	class:ExtNWayT	file:
m_dMyHits	sphinxsearch.cpp	/^	ExtHit_t					m_dMyHits[MAX_HITS];	\/\/\/< buffer for all my phrase hits; inherited m_dHits will receive filtered results$/;"	m	class:ExtOrder_c	file:
m_dMyHits	sphinxsearch.cpp	/^	ExtHit_t			m_dMyHits[MAX_HITS];	\/\/\/< matching hits buffer (inherited m_dHits will receive filtered results)$/;"	m	class:ExtUnit_c	file:
m_dMyMatches	sphinxsearch.cpp	/^	CSphMatch					m_dMyMatches[ExtNode_i::MAX_DOCS];	\/\/\/< my local matches pool; for filtering$/;"	m	class:ExtRanker_c	file:
m_dNamedVec	searchd.cpp	/^	CSphVector<CSphNamedInt>	m_dNamedVec;$/;"	m	struct:SqlParser_c	file:
m_dNodePos	sphinxsearch.cpp	/^	WORD						m_dNodePos[2];$/;"	m	class:ExtTwofer_c	file:
m_dNodes	sphinxexpr.cpp	/^	CSphVector<ExprNode_t>	m_dNodes;$/;"	m	class:ExprParser_t	file:
m_dNodes	sphinxsearch.cpp	/^	const CSphVector<ExtNode_i *> & m_dNodes;$/;"	m	struct:ExtNodeTFExt_fn	file:
m_dNormalForms	sphinx.cpp	/^	CSphVector <CSphString>		m_dNormalForms;$/;"	m	struct:WordformContainer_t	file:
m_dNpos	sphinxsearch.cpp	/^	CSphVector<WORD>			m_dNpos;			\/\/\/< query positions for multinear$/;"	m	class:FSMmultinear	file:
m_dOffsets	sphinxint.h	/^	CSphVector < DWORD >				m_dOffsets;$/;"	m	struct:CSphDocMVA
m_dOpen	sphinxexcerpt.cpp	/^		CSphVector<Hitpos_t> m_dOpen;$/;"	m	struct:SnippetZoneChecker_c::ZoneHits_t	file:
m_dOverrideIn	sphinxint.h	/^	CSphVector<CSphAttrLocator>				m_dOverrideIn;$/;"	m	class:CSphQueryContext
m_dOverrideOut	sphinxint.h	/^	CSphVector<CSphAttrLocator>				m_dOverrideOut;$/;"	m	class:CSphQueryContext
m_dOverrides	sphinx.h	/^	CSphVector<CSphAttrOverride>	m_dOverrides;	\/\/\/< per-query attribute value overrides$/;"	m	class:CSphQuery
m_dPackedKeywords	sphinx.cpp	/^	CSphVector<BYTE>		m_dPackedKeywords;$/;"	m	class:CRtDictKeywords	file:
m_dParsedDocuments	sphinx.cpp	/^	CSphVector<Document_t *>	m_dParsedDocuments;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dPassages	sphinxexcerpt.cpp	/^	CSphVector<Passage_t>	m_dPassages;	\/\/\/< extracted passages$/;"	m	class:ExcerptGen_c	file:
m_dPool	sphinx.h	/^	CSphVector<DWORD>				m_dPool;		\/\/\/< update values pool$/;"	m	struct:CSphAttrUpdate
m_dPrefixFields	sphinx.h	/^	CSphVector<CSphString>	m_dPrefixFields;	\/\/\/< list of prefix fields$/;"	m	struct:CSphSourceSettings
m_dProx	sphinxsearch.cpp	/^	CSphVector<DWORD>			m_dProx; \/\/ proximity hit position for i-th word$/;"	m	class:FSMproximity	file:
m_dQposDelta	sphinxsearch.cpp	/^		CSphVector<int>				m_dQposDelta;			\/\/\/< next expected qpos delta for each existing qpos (for skipped stopwords case)$/;"	m	class:FSMphrase	file:
m_dQueriedFields	sphinxsearch.cpp	/^	CSphSmallBitvec				m_dQueriedFields;	\/\/\/< accepted fields mask$/;"	m	class:ExtTerm_c	file:
m_dQueries	searchd.cpp	/^	CSphVector<CSphQuery>			m_dQueries;						\/\/\/< queries which i need to search$/;"	m	class:SearchHandler_c	file:
m_dQueries	searchd.cpp	/^	CSphVector<ExcerptQuery_t> &	m_dQueries;$/;"	m	struct:SnippetsRemote_t	file:
m_dQueries	searchd.cpp	/^	const CSphVector<CSphQuery> &		m_dQueries;$/;"	m	struct:SearchRequestBuilder_t	file:
m_dQueryPost	sphinx.h	/^	CSphVector<CSphString>			m_dQueryPost;$/;"	m	struct:CSphSourceParams_SQL
m_dQueryPostIndex	sphinx.h	/^	CSphVector<CSphString>			m_dQueryPostIndex;$/;"	m	struct:CSphSourceParams_SQL
m_dQueryPre	sphinx.h	/^	CSphVector<CSphString>			m_dQueryPre;$/;"	m	struct:CSphSourceParams_SQL
m_dQwordFields	sphinxsearch.h	/^	CSphSmallBitvec m_dQwordFields;	\/\/\/< current match fields$/;"	m	class:ISphQword
m_dRaw	sphinx.h	/^		CSphVector<char>	m_dRaw;$/;"	m	struct:CSphSource_ODBC::QueryColumn_t
m_dRefs	searchd.cpp	/^	CSphVector < CSphRefcountedPtr<UservarIntSet_c> > m_dRefs;$/;"	m	struct:SqlStmt_t	file:
m_dResult	sphinxexcerpt.cpp	/^	CSphVector<BYTE>					m_dResult;$/;"	m	class:TokenFunctorTraits_c	file:
m_dResult	sphinxexcerpt.cpp	/^	CSphVector<BYTE>		m_dResult;		\/\/\/< result holder$/;"	m	class:ExcerptGen_c	file:
m_dResults	searchd.cpp	/^	CSphVector<AggrResult_t>		m_dResults;						\/\/\/< results which i obtained$/;"	m	class:SearchHandler_c	file:
m_dResults	searchd.cpp	/^	CSphVector<CSphQueryResult>		m_dResults;		\/\/\/< multi-query results$/;"	m	struct:AgentConn_t	file:
m_dRing	sphinxsearch.cpp	/^	CSphVector<ExtHit_t>		m_dRing;			\/\/\/< ring buffer for multihit data$/;"	m	class:FSMmultinear	file:
m_dRowOffset	sphinx.h	/^	CSphVector<int>					m_dRowOffset;	\/\/\/< document row offsets in the pool (1 per doc, i.e. the length is the same as of m_dDocids)$/;"	m	struct:CSphAttrUpdate
m_dRows	sphinx.h	/^	CSphVector<const CSphRowitem*>	m_dRows;		\/\/\/< document attribute's vector, used instead of m_dDocids.$/;"	m	struct:CSphAttrUpdate
m_dRules	spelldump.cpp	/^	CSphVector < CISpellAffixRule > m_dRules;$/;"	m	class:CISpellAffix	file:
m_dSWFileInfos	indexer.cpp	/^	CSphVector <CSphSavedFile>	m_dSWFileInfos;$/;"	m	class:CSphStopwordBuilderDict	file:
m_dSWFileInfos	sphinx.cpp	/^	CSphVector<CSphSavedFile>	m_dSWFileInfos;$/;"	m	struct:CSphDictCRCTraits	file:
m_dSchemas	searchd.cpp	/^	CSphVector<CSphSchema>		m_dSchemas;			\/\/\/< aggregated resultsets schemas (for schema minimization)$/;"	m	struct:AggrResult_t	file:
m_dSetValues	searchd.cpp	/^	CSphVector<SphAttr_t>	m_dSetValues;$/;"	m	struct:SqlStmt_t	file:
m_dShared	sphinx.cpp	/^	CSphSharedBuffer<DWORD>		m_dShared;				\/\/\/< are we ready to search$/;"	m	class:CSphIndex_VLN	file:
m_dSpawned	sphinxquery.cpp	/^	CSphVector<XQNode_t*>	m_dSpawned;$/;"	m	class:XQParser_t	file:
m_dSpec	sphinxquery.h	/^	XQLimitSpec_t			m_dSpec;		\/\/\/< specification by field, zone(s), etc.$/;"	m	struct:XQNode_t
m_dSpecPool	sphinxquery.cpp	/^	CSphVector<XQLimitSpec_t *>		m_dSpecPool;$/;"	m	class:XQParser_t	file:
m_dStarBuffer	sphinxexcerpt.cpp	/^	CSphVector<BYTE>						m_dStarBuffer;$/;"	m	class:SnippetsDocIndex_c	file:
m_dStarred	sphinxexcerpt.cpp	/^	CSphVector<SphWordID_t>					m_dStarred;$/;"	m	class:SnippetsDocIndex_c	file:
m_dStars	sphinxexcerpt.cpp	/^	CSphVector<ExcerptGen_c::Keyword_t>		m_dStars;$/;"	m	class:SnippetsDocIndex_c	file:
m_dStart	sphinx.h	/^	int							m_dStart[MAX_CHAR_INDEX];	\/\/\/< maps index of the first tag name char to start offset in m_dTags$/;"	m	class:CSphHTMLStripper
m_dStarts	sphinxsearch.cpp	/^	CSphVector<Hitpos_t> m_dStarts;$/;"	m	struct:ZoneInfo_t	file:
m_dStateSpec	sphinxquery.cpp	/^	CSphVector<XQLimitSpec_t *>		m_dStateSpec;$/;"	m	class:XQParser_t	file:
m_dStates	sphinxsearch.cpp	/^		CSphVector<State_t>			m_dStates;				\/\/\/< pointers to states of finite automata$/;"	m	class:FSMphrase	file:
m_dStaticUsed	sphinx.h	/^	CSphVector<int>					m_dStaticUsed;		\/\/\/< static row part map (amount of used bits in each rowitem)$/;"	m	struct:CSphSchema
m_dStemmers	sphinx.cpp	/^	CSphVector < sb_stemmer * >	m_dStemmers;$/;"	m	struct:CSphDictCRCTraits	file:
m_dStmt	searchd.cpp	/^	CSphVector<SqlStmt_t> & m_dStmt;$/;"	m	struct:SqlParser_c	file:
m_dStopwordContainer	sphinx.cpp	/^	CSphFixedVector<SphWordID_t> m_dStopwordContainer;$/;"	m	struct:CSphDictCRCTraits	file:
m_dStorage2Free	sphinx.h	/^	CSphVector<BYTE *>		m_dStorage2Free;	\/\/\/ < aggregated external storage from rt indexes$/;"	m	class:CSphQueryResult
m_dStoredTokens	sphinx.cpp	/^	CSphVector<StoredToken_t>		m_dStoredTokens;$/;"	m	class:CSphTokenizer_Filter	file:
m_dStrAttrs	sphinx.h	/^	CSphVector<CSphString>				m_dStrAttrs;	\/\/\/< current document string attrs$/;"	m	class:CSphSource
m_dStringsStorage	searchd.cpp	/^	CSphVector<BYTE>				m_dStringsStorage;$/;"	m	class:SearchHandler_c	file:
m_dStringsStorage	searchd.cpp	/^	CSphVector<BYTE> &	m_dStringsStorage;$/;"	m	struct:SearchReplyParser_t	file:
m_dSubQueries	sphinxquery.cpp	/^	CSphVector<uint64_t>		m_dSubQueries;		\/\/ final vector with roadmap for tree division.$/;"	m	class:RevealCommon_t	file:
m_dSynEnd	sphinx.cpp	/^	CSphVector<int>					m_dSynEnd;					\/\/\/< map 1st byte to candidate range end$/;"	m	class:CSphTokenizerTraits	file:
m_dSynStart	sphinx.cpp	/^	CSphVector<int>					m_dSynStart;				\/\/\/< map 1st byte to candidate range start$/;"	m	class:CSphTokenizerTraits	file:
m_dSynonyms	sphinx.cpp	/^	CSphVector<CSphSynonym>			m_dSynonyms;				\/\/\/< active synonyms$/;"	m	class:CSphTokenizerTraits	file:
m_dTFIDF	sphinxsearch.cpp	/^	float				m_dTFIDF[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_dTag2Pools	searchd.cpp	/^	CSphVector<PoolPtrs_t>		m_dTag2Pools;		\/\/\/< tag to MVA and strings storage pools mapping$/;"	m	struct:AggrResult_t	file:
m_dTags	sphinx.h	/^	CSphVector<StripperTag_t>	m_dTags;					\/\/\/< known tags to index attrs and\/or to remove contents$/;"	m	class:CSphHTMLStripper
m_dTerms	sphinxexcerpt.cpp	/^	CSphVector<SphWordID_t>					m_dTerms;$/;"	m	class:SnippetsDocIndex_c	file:
m_dTokens	sphinx.cpp	/^	CSphVector<CSphString>	m_dTokens;$/;"	m	struct:CSphMultiform	file:
m_dTokens	sphinxexcerpt.cpp	/^	CSphVector<ExcerptGen_c::Token_t> *		m_dTokens;$/;"	m	class:ISnippetsQword	file:
m_dTokens	sphinxexcerpt.cpp	/^	CSphVector<Token_t>		m_dTokens;		\/\/\/< source text tokens$/;"	m	class:ExcerptGen_c	file:
m_dTurnPoints	sphinxexpr.cpp	/^	CSphVector<ISphExpr *> m_dTurnPoints;$/;"	m	class:Expr_Interval_c	file:
m_dUdfCalls	sphinxexpr.cpp	/^	CSphVector<UdfCall_t*>	m_dUdfCalls;$/;"	m	class:ExprParser_t	file:
m_dUnpack	sphinx.h	/^	CSphVector<CSphUnpackInfo>		m_dUnpack;$/;"	m	struct:CSphSourceParams_SQL
m_dUnpack	sphinx.h	/^	ESphUnpackFormat	m_dUnpack [ SPH_MAX_FIELDS ];$/;"	m	struct:CSphSource_SQL
m_dUnpackBuffers	sphinx.h	/^	CSphVector<char>	m_dUnpackBuffers [ SPH_MAX_FIELDS ];$/;"	m	struct:CSphSource_SQL
m_dUservars	sphinxexpr.cpp	/^	CSphVector<CSphString>	m_dUservars;$/;"	m	class:ExprParser_t	file:
m_dValues	sphinx.h	/^	CSphVector<IdValuePair_t>	m_dValues;		\/\/\/< id-value overrides$/;"	m	class:CSphAttrOverride
m_dValues	sphinx.h	/^	CSphVector<SphAttr_t>	m_dValues;		\/\/\/< integer values set$/;"	m	class:CSphFilterSettings
m_dValues	sphinxexpr.cpp	/^	CSphVector<T> m_dValues;$/;"	m	class:Expr_ArgVsConstSet_c	file:
m_dWarned	sphinx.cpp	/^	CSphVector<CSphString> m_dWarned;$/;"	m	class:CSphSource_XMLPipe2	file:
m_dWeights	sphinxint.h	/^	int							m_dWeights [ SPH_MAX_FIELDS ];	\/\/\/< search query field weights$/;"	m	class:CSphQueryContext
m_dWindow	sphinxsearch.cpp	/^	CSphVector<DWORD>	m_dWindow;$/;"	m	struct:RankerState_Expr_fn	file:
m_dWordformContainers	sphinx.cpp	/^	static CSphVector<WordformContainer_t*>		m_dWordformContainers;$/;"	m	struct:CSphDictCRCTraits	file:
m_dWordformContainers	sphinx.cpp	/^CSphVector < WordformContainer_t * > CSphDictCRCTraits::m_dWordformContainers;$/;"	m	class:CSphDictCRCTraits	file:
m_dWordforms	sphinx.cpp	/^	CSphVector<CSphMultiform*> m_dWordforms;$/;"	m	struct:CSphMultiforms	file:
m_dWords	sphinxexcerpt.cpp	/^	CSphVector<Token_t>		m_dWords;		\/\/\/< query words tokens$/;"	m	class:ExcerptGen_c	file:
m_dWords	sphinxquery.h	/^	CSphVector<XQKeyword_t>	m_dWords;		\/\/\/< query words (plain node)$/;"	m	struct:XQNode_t
m_dWorkers	searchd.cpp	/^	CSphVector<SnippetWorker_t>	m_dWorkers;$/;"	m	struct:SnippetsRemote_t	file:
m_dWriters	sphinx.cpp	/^	CSphVector<CSphWriter*> m_dWriters;$/;"	m	class:DeleteOnFail	file:
m_dZoneEnd	sphinxsearch.cpp	/^	CSphVector<const ExtDoc_t*>	m_dZoneEnd;$/;"	m	class:ExtRanker_c	file:
m_dZoneEndTerm	sphinxsearch.cpp	/^	CSphVector<ExtTerm_c*>		m_dZoneEndTerm;$/;"	m	class:ExtRanker_c	file:
m_dZoneMax	sphinxsearch.cpp	/^	CSphVector<SphDocID_t>		m_dZoneMax;				\/\/\/< last docid we (tried) to cache$/;"	m	class:ExtRanker_c	file:
m_dZoneMin	sphinxsearch.cpp	/^	CSphVector<SphDocID_t>		m_dZoneMin;				\/\/\/< first docid we (tried) to cache$/;"	m	class:ExtRanker_c	file:
m_dZoneParent	sphinxexcerpt.cpp	/^	CSphVector<int>				m_dZoneParent;	\/\/\/< zones parent type$/;"	m	class:ExcerptGen_c	file:
m_dZonePos	sphinxexcerpt.cpp	/^	CSphVector<int>				m_dZonePos;	\/\/\/< zones positions (in characters)$/;"	m	class:ExcerptGen_c	file:
m_dZoneStart	sphinxsearch.cpp	/^	CSphVector<const ExtDoc_t*>	m_dZoneStart;$/;"	m	class:ExtRanker_c	file:
m_dZoneStartTerm	sphinxsearch.cpp	/^	CSphVector<ExtTerm_c*>		m_dZoneStartTerm;$/;"	m	class:ExtRanker_c	file:
m_dZoneVecs	sphinxquery.cpp	/^	CSphVector < CSphVector<int> >	m_dZoneVecs;$/;"	m	class:XQParser_t	file:
m_dZones	sphinxexcerpt.cpp	/^	CSphVector<ZoneHits_t> m_dZones;$/;"	m	class:SnippetZoneChecker_c	file:
m_dZones	sphinxexcerpt.cpp	/^	CSphVector<ZonePacked_t>	m_dZones;		\/\/\/< zones for current document$/;"	m	class:ExcerptGen_c	file:
m_dZones	sphinxexcerpt.cpp	/^	CSphVector<ZonePacked_t>	m_dZones;$/;"	m	class:TokenFunctorTraits_c	file:
m_dZones	sphinxquery.h	/^	CSphVector<CSphString>	m_dZones;$/;"	m	struct:XQQuery_t
m_dZones	sphinxquery.h	/^	CSphVector<int>			m_dZones;		\/\/\/< zone indexes in per-query zones list$/;"	m	struct:XQLimitSpec_t
m_dZones	sphinxsearch.cpp	/^	CSphVector<CSphString>		m_dZones;$/;"	m	class:ExtRanker_c	file:
m_dZones	sphinxsearch.cpp	/^	mutable CSphVector<int>		m_dZones;					\/\/\/< zone ids for this particular term$/;"	m	class:ExtTermPos_c	file:
m_eAggrFunc	sphinx.h	/^	ESphAggrFunc					m_eAggrFunc;	\/\/\/< aggregate function on top of expression (for GROUP BY)$/;"	m	struct:CSphColumnInfo
m_eAggrFunc	sphinx.h	/^	ESphAggrFunc	m_eAggrFunc;$/;"	m	struct:CSphQueryItem
m_eArgType	sphinxexpr.cpp	/^	ESphAttr		m_eArgType;	\/\/\/< args type$/;"	m	struct:ExprNode_t	file:
m_eAttrType	sphinx.h	/^	ESphAttr					m_eAttrType;	\/\/\/< attribute type$/;"	m	class:CSphAttrOverride
m_eAttrType	sphinx.h	/^	ESphAttr		m_eAttrType;	\/\/\/< attribute type$/;"	m	struct:CSphColumnInfo
m_eCategory	sphinxint.h	/^	const Memory::Category_e m_eCategory; \/\/\/< category$/;"	m	struct:MemTracker_c
m_eCollation	searchd.cpp	/^	ESphCollation	m_eCollation;$/;"	m	struct:SessionVars_t	file:
m_eCollation	searchd.cpp	/^	ESphCollation	m_eCollation;$/;"	m	struct:SqlParser_c	file:
m_eCollation	sphinx.h	/^	ESphCollation				m_eCollation;	\/\/\/< ORDER BY collation$/;"	m	class:CSphQuery
m_eDocinfo	sphinx.h	/^	ESphDocinfo		m_eDocinfo;$/;"	m	struct:CSphIndexSettings
m_eDocinfo	sphinxsearch.h	/^	ESphDocinfo				m_eDocinfo;$/;"	m	class:ISphQwordSetup
m_eExprType	sphinxsearch.cpp	/^	ESphAttr			m_eExprType;$/;"	m	struct:RankerState_Expr_fn	file:
m_eExtQuerySPZ	searchd.cpp	/^	DWORD m_eExtQuerySPZ;$/;"	m	class:SnippetContext_t	file:
m_eFormat	sphinx.h	/^	ESphUnpackFormat	m_eFormat;$/;"	m	struct:CSphUnpackInfo
m_eFunc	sphinxexpr.cpp	/^	Func_e			m_eFunc;$/;"	m	struct:FuncDesc_t	file:
m_eGroupBy	sphinxsort.cpp	/^	ESphGroupBy		m_eGroupBy;			\/\/\/< group-by function$/;"	m	class:CSphKBufferGroupSorter	file:
m_eGroupFunc	sphinx.h	/^	ESphGroupBy		m_eGroupFunc;		\/\/\/< function to pre-process group-by attribute value with$/;"	m	class:CSphQuery
m_eHitFormat	sphinx.h	/^	ESphHitFormat	m_eHitFormat;$/;"	m	struct:CSphIndexSettings
m_eHitless	sphinx.cpp	/^	ESphHitless		m_eHitless;$/;"	m	class:CSphDictReader	file:
m_eHitless	sphinx.h	/^	ESphHitless		m_eHitless;$/;"	m	struct:CSphIndexSettings
m_eKeypart	sphinx.h	/^	ESphSortKeyPart		m_eKeypart[MAX_ATTRS];		\/\/\/< sort-by key part type$/;"	m	struct:CSphMatchComparatorState
m_eMode	sphinx.cpp	/^	ESphHitless			m_eMode;$/;"	m	struct:CSphBin	file:
m_eMode	sphinx.h	/^	ESphMatchMode	m_eMode;		\/\/\/< match mode. default is "match all"$/;"	m	class:CSphQuery
m_eOnFileFieldError	sphinx.h	/^	ESphOnFileFieldError			m_eOnFileFieldError;$/;"	m	struct:CSphSourceParams_SQL
m_eOnFileFieldError	sphinx.h	/^	ESphOnFileFieldError	m_eOnFileFieldError;$/;"	m	class:CSphSource_Document
m_eOp	sphinxquery.cpp	/^	XQOperator_e				m_eOp;				\/\/ my operator which I process$/;"	m	class:RevealCommon_t	file:
m_eOp	sphinxquery.h	/^	XQOperator_e			m_eOp;			\/\/\/< operation over childen$/;"	m	struct:XQNode_t
m_ePassageSPZ	sphinxexcerpt.h	/^	DWORD			m_ePassageSPZ;$/;"	m	struct:ExcerptQuery_t
m_ePhase	sphinx.h	/^	Phase_e			m_ePhase;		\/\/\/< current indexing phase$/;"	m	struct:CSphIndexProgress
m_eProto	searchd.cpp	/^	ProtocolType_e		m_eProto;$/;"	m	struct:Listener_t	file:
m_eProto	searchd.cpp	/^	ProtocolType_e	m_eProto;$/;"	m	struct:ListenerDesc_t	file:
m_eProto	searchd.cpp	/^	ProtocolType_e	m_eProto;$/;"	m	struct:ThdDesc_t	file:
m_eRanker	sphinx.h	/^	ESphRankMode	m_eRanker;		\/\/\/< ranking mode, default is proximity+BM25$/;"	m	class:CSphQuery
m_eRet	sphinxexpr.cpp	/^	ESphAttr		m_eRet;$/;"	m	struct:FuncDesc_t	file:
m_eRetType	sphinxexpr.cpp	/^	ESphAttr				m_eRetType;		\/\/\/< SPH_ATTR_INTEGER, SPH_ATTR_BIGINT, or SPH_ATTR_FLOAT$/;"	m	class:ConstList_c	file:
m_eRetType	sphinxexpr.cpp	/^	ESphAttr			m_eRetType;		\/\/\/< function type, currently FLOAT or INT$/;"	m	struct:UdfFunc_t	file:
m_eRetType	sphinxexpr.cpp	/^	ESphAttr		m_eRetType;	\/\/\/< result type$/;"	m	struct:ExprNode_t	file:
m_eRule	spelldump.cpp	/^	RuleType_e	m_eRule;$/;"	m	class:CISpellAffixRule	file:
m_eSet	searchd.cpp	/^	SqlSet_e				m_eSet;$/;"	m	struct:SqlStmt_t	file:
m_eSort	sphinx.h	/^	ESphSortOrder	m_eSort;		\/\/\/< sort mode$/;"	m	class:CSphQuery
m_eSrc	sphinx.h	/^	ESphAttrSrc		m_eSrc;			\/\/\/< attr source (for multi-valued attrs only)$/;"	m	struct:CSphColumnInfo
m_eStage	sphinx.h	/^	ESphEvalStage					m_eStage;		\/\/\/< column evaluation stage (who and how computes this column)$/;"	m	struct:CSphColumnInfo
m_eState	searchd.cpp	/^	AgentState_e	m_eState;		\/\/\/< current state$/;"	m	struct:AgentConn_t	file:
m_eState	sphinx.cpp	/^	ESphBinState		m_eState;$/;"	m	struct:CSphBin	file:
m_eState	sphinxsearch.cpp	/^	}							m_eState;					\/\/\/< internal GetHitsChunk() state (are we copying from my hits, or passing trailing raw hits, or done)$/;"	m	class:ExtTermPos_c	typeref:enum:ExtTermPos_c::__anon12	file:
m_eStmt	searchd.cpp	/^	SqlStmt_e				m_eStmt;$/;"	m	struct:SqlStmt_t	file:
m_eTag	sphinx.h	/^	Tag_e			m_eTag;				\/\/\/< what's our current tag$/;"	m	class:CSphSource_XMLPipe
m_eThdState	searchd.cpp	/^	ThdState_e		m_eThdState;$/;"	m	struct:ThdDesc_t	file:
m_eTimer	sphinx.cpp	/^	ESphTimer		m_eTimer;$/;"	m	class:CSphEasyTimer	file:
m_eTimer	sphinx.cpp	/^	ESphTimer		m_eTimer;$/;"	m	struct:CSphTimer	file:
m_eType	searchd.cpp	/^	Uservar_e			m_eType;$/;"	m	struct:Uservar_t	file:
m_eType	sphinx.h	/^	ESphFilter			m_eType;		\/\/\/< filter type$/;"	m	class:CSphFilterSettings
m_eType	sphinxexcerpt.cpp	/^		Token_e				m_eType;		\/\/\/< token type$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_eType	sphinxint.h	/^		ESphAttr				m_eType;				\/\/\/< result type$/;"	m	struct:CSphQueryContext::CalcItem_t
m_eUdfType	searchd.cpp	/^	ESphAttr				m_eUdfType;$/;"	m	struct:SqlStmt_t	file:
m_eWordpart	sphinx.h	/^	ESphWordpart	m_eWordpart;	\/\/\/< wordpart processing type$/;"	m	struct:CSphColumnInfo
m_fAnchorLat	sphinxexpr.cpp	/^	float		m_fAnchorLat;$/;"	m	class:Expr_GeodistAttrConst_c	file:
m_fAnchorLat	sphinxexpr.cpp	/^	float		m_fAnchorLat;$/;"	m	class:Expr_GeodistConst_c	file:
m_fAnchorLon	sphinxexpr.cpp	/^	float		m_fAnchorLon;$/;"	m	class:Expr_GeodistAttrConst_c	file:
m_fAnchorLon	sphinxexpr.cpp	/^	float		m_fAnchorLon;$/;"	m	class:Expr_GeodistConst_c	file:
m_fConst	sphinxexpr.cpp	/^		float			m_fConst;		\/\/\/< constant value, for TOK_CONST_FLOAT type$/;"	m	union:ExprNode_t::__anon16	file:
m_fGeoAnchorLat	sphinxsort.cpp	/^	float				m_fGeoAnchorLat;$/;"	m	struct:ExprGeodist_t	file:
m_fGeoAnchorLong	sphinxsort.cpp	/^	float				m_fGeoAnchorLong;$/;"	m	struct:ExprGeodist_t	file:
m_fGeoLatitude	sphinx.h	/^	float			m_fGeoLatitude;		\/\/\/< anchor latitude$/;"	m	class:CSphQuery
m_fGeoLongitude	sphinx.h	/^	float			m_fGeoLongitude;	\/\/\/< anchor longitude$/;"	m	class:CSphQuery
m_fIDF	sphinxsearch.cpp	/^	float						m_fIDF;				\/\/\/< IDF for this term (might be 0.0f for non-1st occurences in query)$/;"	m	class:ExtTerm_c	file:
m_fIDF	sphinxsearch.cpp	/^	float		m_fIDF;			\/\/\/< IDF value$/;"	m	struct:ExtQword_t	file:
m_fMaxValue	sphinx.h	/^		float			m_fMaxValue;	\/\/\/< range max$/;"	m	union:CSphFilterSettings::__anon9
m_fMaxValue	sphinxfilter.cpp	/^	float m_fMaxValue;$/;"	m	struct:Filter_FloatRange	file:
m_fMinValue	sphinx.h	/^		float			m_fMinValue;	\/\/\/< range min$/;"	m	union:CSphFilterSettings::__anon8
m_fMinValue	sphinxfilter.cpp	/^	float m_fMinValue;$/;"	m	struct:Filter_FloatRange	file:
m_fRelocFactor	sphinx.h	/^	float						m_fRelocFactor;$/;"	m	class:CSphIndex
m_fTFIDF	sphinxsearch.cpp	/^	float			m_fTFIDF;$/;"	m	struct:ExtDoc_t	file:
m_fVal	searchd.cpp	/^	float					m_fVal;$/;"	m	struct:SqlInsert_t	file:
m_fValue	searchd.cpp	/^	float					m_fValue;$/;"	m	struct:SqlNode_t	file:
m_fValue	sphinx.h	/^			float				m_fValue;		\/\/\/< attribute value$/;"	m	union:CSphAttrOverride::IdValuePair_t::__anon10
m_fValue	sphinxexpr.cpp	/^	float m_fValue;$/;"	m	struct:Expr_GetConst_c	file:
m_fValue	sphinxstd.h	/^	float			m_fValue;$/;"	m	struct:CSphVariant
m_fWriteFactor	sphinx.h	/^	float						m_fWriteFactor;$/;"	m	class:CSphIndex
m_fnDeinit	sphinxexpr.cpp	/^	UdfDeinit_fn		m_fnDeinit;		\/\/\/< per-query deinit function, optional$/;"	m	struct:UdfFunc_t	file:
m_fnFunc	sphinxexpr.cpp	/^	void *				m_fnFunc;		\/\/\/< per-row worker function, mandatory$/;"	m	struct:UdfFunc_t	file:
m_fnGen	tests.cpp	/^	SortDataGen_fn		m_fnGen;$/;"	m	struct:SortDataGenDesc_t	file:
m_fnInit	sphinxexpr.cpp	/^	UdfInit_fn			m_fnInit;		\/\/\/< per-query init function, mandatory$/;"	m	struct:UdfFunc_t	file:
m_fnStrCmp	sphinx.h	/^	SphStringCmp_fn		m_fnStrCmp;					\/\/\/< string comparator$/;"	m	struct:CSphMatchComparatorState
m_fpDumpRows	sphinx.h	/^	FILE *					m_fpDumpRows;$/;"	m	class:CSphSource_Document
m_hBitOrders	sphinxquery.cpp	/^	CDwordHash					m_hBitOrders;		\/\/ order numbers for found common subnodes$/;"	m	class:RevealCommon_t	file:
m_hColBuffers	sphinx.h	/^	SmallStringHash_T<int>		m_hColBuffers;$/;"	m	struct:CSphSource_ODBC
m_hDBC	sphinx.h	/^	SQLHDBC					m_hDBC;$/;"	m	struct:CSphSource_ODBC
m_hEnv	sphinx.h	/^	SQLHENV					m_hEnv;$/;"	m	struct:CSphSource_ODBC
m_hGroup2Match	sphinxsort.cpp	/^	CSphFixedHash < CSphMatch *, SphGroupKey_t, IdentityHash_fn >	m_hGroup2Match;$/;"	m	class:CSphKBufferGroupSorter	file:
m_hInterSections	sphinxquery.cpp	/^	CAssociations_t				m_hInterSections;	\/\/ initial accumulator for nodes$/;"	m	class:RevealCommon_t	file:
m_hKeywords	sphinx.cpp	/^	SmallStringHash_T<int>	m_hKeywords;$/;"	m	class:CRtDictKeywords	file:
m_hMutex	sphinxstd.h	/^	HANDLE m_hMutex;$/;"	m	class:CSphMutex
m_hNodes	sphinxquery.cpp	/^	CAssociations_t				m_hNodes;			\/\/ initial accumulator for nodes$/;"	m	class:RevealCommon_t	file:
m_hReadEvent	sphinxstd.h	/^	HANDLE				m_hReadEvent;$/;"	m	class:CSphRwlock
m_hStmt	sphinx.h	/^	SQLHANDLE				m_hStmt;$/;"	m	struct:CSphSource_ODBC
m_hUsed	searchd.cpp	/^	mutable SmallStringHash_T<int>	m_hUsed;$/;"	m	class:SearchHandler_c	file:
m_hWordStats	sphinx.h	/^	SmallStringHash_T<WordStat_t>	m_hWordStats; \/\/\/< hash of i-th search term (normalized word form)$/;"	m	class:CSphQueryResultMeta
m_hWords	indexer.cpp	/^	CSphMTFHash < int, 1048576, HashFunc_t >	m_hWords;$/;"	m	class:CSphStopwordBuilderDict	file:
m_hWriteMutex	sphinxstd.h	/^	HANDLE				m_hWriteMutex;$/;"	m	class:CSphRwlock
m_hZoneInfo	sphinxsearch.cpp	/^	ZoneHash_c					m_hZoneInfo;$/;"	m	class:ExtRanker_c	file:
m_hZones	sphinxexcerpt.cpp	/^	SmallStringHash_T<int>		m_hZones;	\/\/\/< zones names$/;"	m	class:ExcerptGen_c	file:
m_hZones	sphinxexcerpt.cpp	/^	SmallStringHash_T<int>		m_hZones;$/;"	m	class:TokenFunctorTraits_c	file:
m_i64Value	sphinxstd.h	/^	int64_t			m_i64Value;$/;"	m	struct:CSphVariant
m_iAccum	sphinx.cpp	/^	int					m_iAccum;							\/\/\/< boundary token size$/;"	m	class:CSphTokenizerTraits	file:
m_iAffected	sphinx.h	/^	int					m_iAffected;	\/\/\/< num of updated rows.$/;"	m	struct:CSphAttrUpdateEx
m_iAfterLen	sphinxexcerpt.cpp	/^	int		m_iAfterLen;$/;"	m	class:HighlightPlain_c	file:
m_iAfterPostLen	sphinxexcerpt.cpp	/^	int		m_iAfterPostLen;$/;"	m	class:HighlightPlain_c	file:
m_iAgentConnect	searchd.cpp	/^	int64_t		m_iAgentConnect;$/;"	m	struct:SearchdStats_t	file:
m_iAgentConnectTimeout	searchd.cpp	/^	int							m_iAgentConnectTimeout;		\/\/\/< in msec$/;"	m	struct:DistributedIndex_t	file:
m_iAgentConnectTimeout	searchd.cpp	/^	int							m_iAgentConnectTimeout;$/;"	m	struct:SnippetsRemote_t	file:
m_iAgentQueryTimeout	searchd.cpp	/^	int							m_iAgentQueryTimeout;		\/\/\/< in msec$/;"	m	struct:DistributedIndex_t	file:
m_iAgentQueryTimeout	searchd.cpp	/^	int							m_iAgentQueryTimeout;$/;"	m	struct:SnippetsRemote_t	file:
m_iAgentRetry	searchd.cpp	/^	int64_t		m_iAgentRetry;$/;"	m	struct:SearchdStats_t	file:
m_iAllocId	sphinxstd.cpp	/^	int				m_iAllocId;$/;"	m	struct:CSphMemHeader	file:
m_iAllocs	sphinx.cpp	/^		int					m_iAllocs;				\/\/\/< active allocs$/;"	m	struct:CSphArena::TagDesc_t	file:
m_iAppendLen	spelldump.cpp	/^	int			m_iAppendLen;$/;"	m	class:CISpellAffixRule	file:
m_iArgs	sphinxexpr.cpp	/^		int				m_iArgs;		\/\/\/< args count, for arglist (token==',') type$/;"	m	union:ExprNode_t::__anon16	file:
m_iArgs	sphinxexpr.cpp	/^	int				m_iArgs;$/;"	m	struct:FuncDesc_t	file:
m_iAround	sphinxexcerpt.h	/^	int				m_iAround;			\/\/\/< how much words to highlight around each match$/;"	m	struct:ExcerptQuery_t
m_iAroundAfter	sphinxexcerpt.cpp	/^		int			m_iAroundAfter;				\/\/\/< how many words after last matched words$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iAroundBefore	sphinxexcerpt.cpp	/^		int			m_iAroundBefore;			\/\/\/< how many words before first matched words$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iAtomPos	sphinxquery.cpp	/^	int						m_iAtomPos;$/;"	m	class:XQParser_t	file:
m_iAtomPos	sphinxquery.h	/^	int						m_iAtomPos;		\/\/\/< atom position override (currently only used within expanded nodes)$/;"	m	struct:XQNode_t
m_iAtomPos	sphinxquery.h	/^	int					m_iAtomPos;$/;"	m	struct:XQKeyword_t
m_iAtomPos	sphinxsearch.cpp	/^	int								m_iAtomPos; \/\/ minimal position from original donor, used for shifting$/;"	m	class:NodeCacheContainer_t	file:
m_iAtomPos	sphinxsearch.cpp	/^	int							m_iAtomPos;		\/\/\/< we now need it on this level for tricks like expanded keywords within phrases$/;"	m	class:ExtNode_i	file:
m_iAtomPos	sphinxsearch.h	/^	int				m_iAtomPos;		\/\/\/< word position, from query$/;"	m	class:ISphQword
m_iAttr	sphinx.cpp	/^	int					m_iAttr;$/;"	m	struct:FieldMVARedirect_t	file:
m_iAttr	sphinx.cpp	/^	int			m_iAttr;$/;"	m	struct:MvaEntry_t	file:
m_iAttrs	sphinx.h	/^	int64_t			m_iAttrs;		\/\/\/< PHASE_COLLECT_MVA, PHASE_SORT_MVA: attrs processed so far$/;"	m	struct:CSphIndexProgress
m_iAttrsTotal	sphinx.h	/^	int64_t			m_iAttrsTotal;	\/\/\/< PHASE_SORT_MVA: attrs total$/;"	m	struct:CSphIndexProgress
m_iBeforeLen	sphinxexcerpt.cpp	/^	int		m_iBeforeLen;$/;"	m	class:HighlightPlain_c	file:
m_iBeforePostLen	sphinxexcerpt.cpp	/^	int		m_iBeforePostLen;$/;"	m	class:HighlightPlain_c	file:
m_iBin	sphinx.cpp	/^	int m_iBin;$/;"	m	struct:CSphHitQueueEntry	file:
m_iBitCount	sphinx.h	/^	int				m_iBitCount;$/;"	m	struct:CSphAttrLocator
m_iBitOffset	sphinx.h	/^	int				m_iBitOffset;$/;"	m	struct:CSphAttrLocator
m_iBits	sphinxquery.cpp	/^	int		m_iBits;			\/\/ number of non-unique associations$/;"	m	class:CAssociations_t	file:
m_iBits	sphinxquery.cpp	/^	mutable int				m_iBits;$/;"	m	class:BitAssociation_t	file:
m_iBlendID	sphinxexcerpt.cpp	/^		SphWordID_t			m_iBlendID;		\/\/\/< blended word ID (eg. "T-mobile" would not tokenize itself, but still shadow "T" and "mobile")$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_iBlendNormalEnd	sphinx.cpp	/^	int					m_iBlendNormalEnd;						\/\/\/< points just past (!) last normal char in the accumulators (might be NULL)$/;"	m	class:CSphTokenizerTraits	file:
m_iBlendNormalStart	sphinx.cpp	/^	int					m_iBlendNormalStart;					\/\/\/< points to first normal char in the accumulators (might be NULL)$/;"	m	class:CSphTokenizerTraits	file:
m_iBlock	sphinx.cpp	/^	int m_iBlock;$/;"	m	struct:DictKeywordTagged_t	file:
m_iBoundaryOffset	sphinx.h	/^	int								m_iBoundaryOffset;			\/\/\/< boundary character offset (in bytes)$/;"	m	class:ISphTokenizer
m_iBoundaryStep	sphinx.h	/^	int		m_iBoundaryStep;	\/\/\/< additional boundary word position increment$/;"	m	struct:CSphSourceSettings
m_iBoundaryStep	sphinxexcerpt.cpp	/^	int		m_iBoundaryStep;$/;"	m	class:TokenFunctorTraits_c	file:
m_iBufSize	sphinxint.h	/^	int			m_iBufSize;$/;"	m	class:CSphReader
m_iBuffPos	sphinxint.h	/^	int			m_iBuffPos;$/;"	m	class:CSphReader
m_iBuffUsed	sphinxint.h	/^	int			m_iBuffUsed;$/;"	m	class:CSphReader
m_iBufferSize	sphinx.cpp	/^	int				m_iBufferSize;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iBufferSize	sphinx.h	/^		int					m_iBufferSize;	\/\/\/< size of m_dContents and m_dRaw buffers, in bytes$/;"	m	struct:CSphSource_ODBC::QueryColumn_t
m_iBufferSize	sphinx.h	/^	int				m_iBufferSize;		\/\/\/< buffer size$/;"	m	class:CSphSource_XMLPipe
m_iBufferSize	sphinxint.h	/^	int				m_iBufferSize;$/;"	m	class:CSphWriter
m_iBuildLastStep	sphinx.h	/^		int m_iBuildLastStep;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_iBytes	sphinx.h	/^	int64_t			m_iBytes;		\/\/\/< PHASE_COLLECT: bytes collected so far;$/;"	m	struct:CSphIndexProgress
m_iBytesTotal	sphinx.h	/^	int64_t			m_iBytesTotal;	\/\/\/< PHASE_PREREAD: total bytes to read;$/;"	m	struct:CSphIndexProgress
m_iCalls	sphinx.cpp	/^	int				m_iCalls;			\/\/\/< number of times this timer was called$/;"	m	struct:CSphTimer	file:
m_iCheckFrom	sphinxsearch.cpp	/^	mutable int					m_iCheckFrom;$/;"	m	class:ExtTermPos_c	file:
m_iCheckLength	sphinxstemcz.cpp	/^	int		m_iCheckLength;$/;"	m	struct:ClampRule_t	file:
m_iCheckpointsPos	sphinx.cpp	/^	int64_t								m_iCheckpointsPos;		\/\/\/< checkpoints offset$/;"	m	class:CWordlist	file:
m_iChild	sphinx.cpp	/^	int				m_iChild;$/;"	m	struct:CSphTimer	file:
m_iChildrenCalls	sphinx.cpp	/^	int				m_iChildrenCalls;	\/\/\/< number of times all subtimers (children, grandchildren etc) of this timer were called$/;"	m	struct:CSphTimer	file:
m_iChunk	sphinxexcerpt.cpp	/^	int			m_iChunk;$/;"	m	class:ISnippetsQword	file:
m_iChunks	sphinx.h	/^	int					m_iChunks;					\/\/\/< how much chunks are actually allocated$/;"	m	class:CSphLowercaser
m_iClientSock	searchd.cpp	/^	int				m_iClientSock;$/;"	m	struct:ThdDesc_t	file:
m_iCode	sphinx.cpp	/^	int				m_iCode;$/;"	m	struct:HtmlEntity_t	file:
m_iCodes	sphinxexcerpt.cpp	/^		int					m_iCodes;			\/\/\/< codepoints count$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iCommandCount	searchd.cpp	/^	int64_t		m_iCommandCount[SEARCHD_COMMAND_TOTAL];$/;"	m	struct:SearchdStats_t	file:
m_iCondLen	spelldump.cpp	/^	int			m_iCondLen;$/;"	m	class:CISpellAffixRule	file:
m_iConnID	searchd.cpp	/^	int				m_iConnID;						\/\/\/< current conn-id for this thread$/;"	m	struct:ThdDesc_t	file:
m_iConnectFailures	searchd.cpp	/^	int64_t		m_iConnectFailures;	\/\/\/< failed to connect$/;"	m	struct:AgentStats_t	file:
m_iConnections	searchd.cpp	/^	int64_t		m_iConnections;$/;"	m	struct:SearchdStats_t	file:
m_iConst	sphinxexpr.cpp	/^		int64_t			m_iConst;		\/\/\/< constant value, for TOK_CONST_INT type$/;"	m	union:ExprNode_t::__anon16	file:
m_iConstNow	sphinxexpr.cpp	/^	int						m_iConstNow;$/;"	m	class:ExprParser_t	file:
m_iCount	indexer.cpp	/^	int				m_iCount;$/;"	m	struct:Word_t	file:
m_iCount	sphinx.h	/^	int						m_iCount;			\/\/\/< count which will be actually served (computed from total, offset and limit)$/;"	m	class:CSphQueryResult
m_iCount	sphinxsort.cpp	/^	int				m_iCount;$/;"	m	struct:SphGroupedValue_t	file:
m_iCount	sphinxstd.cpp	/^	int		m_iCount;$/;"	m	struct:MemCategorized_t	file:
m_iCountPos	sphinxsort.cpp	/^	int				m_iCountPos;$/;"	m	class:CSphUniqounter	file:
m_iCounter	sphinxquery.cpp	/^	int			m_iCounter;$/;"	m	struct:MarkedNode_t	file:
m_iCounter	sphinxquery.h	/^	int						m_iCounter;$/;"	m	struct:XQNode_t
m_iCpuTime	sphinx.h	/^	int64_t					m_iCpuTime;			\/\/\/< user time, microseconds$/;"	m	class:CSphQueryResultMeta
m_iCurAttr	sphinx.cpp	/^	int				m_iCurAttr;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iCurField	sphinx.cpp	/^	int				m_iCurField;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iCurrentField	sphinxsearch.cpp	/^	int					m_iCurrentField;$/;"	m	struct:RankerState_Expr_fn	file:
m_iCutoff	sphinx.h	/^	int				m_iCutoff;			\/\/\/< matches count threshold to stop searching at (default is 0; means to search until all matches are found)$/;"	m	class:CSphQuery
m_iDictChunkFree	sphinx.cpp	/^	int								m_iDictChunkFree;$/;"	m	class:CSphDictKeywords	file:
m_iDictLimit	sphinx.cpp	/^	int								m_iDictLimit;		\/\/\/< allowed memory limit for dict block collection$/;"	m	class:CSphDictKeywords	file:
m_iDiskReadBytes	searchd.cpp	/^	int64_t		m_iDiskReadBytes;	\/\/\/< total read IO traffic$/;"	m	struct:SearchdStats_t	file:
m_iDiskReadTime	searchd.cpp	/^	int64_t		m_iDiskReadTime;	\/\/\/< total read IO time$/;"	m	struct:SearchdStats_t	file:
m_iDiskReads	searchd.cpp	/^	int64_t		m_iDiskReads;		\/\/\/< total read IO calls (fired by search queries)$/;"	m	struct:SearchdStats_t	file:
m_iDistLocalTime	searchd.cpp	/^	int64_t		m_iDistLocalTime;	\/\/\/< wall time spent searching local indexes in distributed queries$/;"	m	struct:SearchdStats_t	file:
m_iDistQueries	searchd.cpp	/^	int64_t		m_iDistQueries;		\/\/\/< distributed queries count$/;"	m	struct:SearchdStats_t	file:
m_iDistWaitTime	searchd.cpp	/^	int64_t		m_iDistWaitTime;	\/\/\/< time spent waiting for remote agents in distributed queries$/;"	m	struct:SearchdStats_t	file:
m_iDistWallTime	searchd.cpp	/^	int64_t		m_iDistWallTime;	\/\/\/< wall time spent on distributed queries$/;"	m	struct:SearchdStats_t	file:
m_iDoc	sphinxexcerpt.cpp	/^	int m_iDoc;$/;"	m	struct:DocQueryZonePair_t	file:
m_iDocID	sphinx.cpp	/^		SphDocID_t				m_iDocID;$/;"	m	struct:CSphSource_XMLPipe2::Document_t	file:
m_iDocID	sphinx.cpp	/^	SphDocID_t		m_iDocID;		\/\/\/< document ID$/;"	m	struct:CSphAggregateHit	file:
m_iDocID	sphinx.h	/^	SphDocID_t				m_iDocID;		\/\/\/< document ID$/;"	m	class:CSphMatch
m_iDocID	sphinx.h	/^	SphDocID_t		m_iDocID;		\/\/\/< document ID$/;"	m	struct:CSphWordHit
m_iDocID	sphinxint.h	/^	SphDocID_t							m_iDocID;$/;"	m	struct:CSphDocMVA
m_iDocIndex	sphinxsearch.cpp	/^	int							m_iDocIndex;		\/\/\/< store the current position in m_Docs for GetDocsChunk()$/;"	m	class:ExtNodeCached_t	file:
m_iDocLen	sphinxexcerpt.cpp	/^	int		m_iDocLen;$/;"	m	class:TokenFunctorTraits_c	file:
m_iDocinfoGap	sphinx.h	/^	int							m_iDocinfoGap;$/;"	m	class:CSphIndex
m_iDoclistHint	sphinx.cpp	/^	int				m_iDoclistHint;$/;"	m	struct:WordDictInfo_t	file:
m_iDoclistOffset	sphinx.cpp	/^	SphOffset_t		m_iDoclistOffset;$/;"	m	class:CSphDictReader	file:
m_iDocs	sphinx.cpp	/^		int							m_iDocs;$/;"	m	struct:CSphDictKeywords::DictKeyword_t	file:
m_iDocs	sphinx.cpp	/^	int				m_iDocs;$/;"	m	class:CSphDictReader	file:
m_iDocs	sphinx.cpp	/^	int				m_iDocs;$/;"	m	struct:WordDictInfo_t	file:
m_iDocs	sphinx.h	/^		int64_t					m_iDocs;			\/\/\/< document count for this term$/;"	m	struct:CSphQueryResultMeta::WordStat_t
m_iDocs	sphinx.h	/^	int				m_iDocs;$/;"	m	struct:CSphKeywordInfo
m_iDocs	sphinxsearch.cpp	/^	int			m_iDocs;		\/\/\/< matching documents$/;"	m	struct:ExtQword_t	file:
m_iDocs	sphinxsearch.h	/^	int				m_iDocs;		\/\/\/< document count, from wordlist$/;"	m	class:ISphQword
m_iDocumentWords	sphinxexcerpt.cpp	/^	int						m_iDocumentWords;$/;"	m	class:ExcerptGen_c	file:
m_iDocuments	sphinx.h	/^	int64_t			m_iDocuments;	\/\/\/< PHASE_COLLECT: documents collected so far$/;"	m	struct:CSphIndexProgress
m_iDone	sphinx.cpp	/^	int					m_iDone;$/;"	m	struct:CSphBin	file:
m_iDone	sphinx.h	/^	int				m_iDone;		\/\/\/< generic percent, 0..1000 range$/;"	m	struct:CSphIndexProgress
m_iDynamic	sphinxsort.cpp	/^	int m_iDynamic;$/;"	m	struct:GroupSorter_fn	file:
m_iDynamicRowitems	sphinxsearch.h	/^	int						m_iDynamicRowitems;		\/\/\/< dynamic rowitems counts (including (!) inline)$/;"	m	class:ISphQwordSetup
m_iElementDepth	sphinx.cpp	/^	int				m_iElementDepth;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iElements	sphinxstd.h	/^	int			m_iElements;$/;"	m	class:CSphBitvec
m_iEnd	searchd.cpp	/^	int									m_iEnd;$/;"	m	struct:SearchRequestBuilder_t	file:
m_iEnd	searchd.cpp	/^	int								m_iEnd;			\/\/\/< subset end$/;"	m	class:SearchHandler_c	file:
m_iEnd	searchd.cpp	/^	int						m_iEnd;$/;"	m	struct:SqlNode_t	file:
m_iEnd	searchd.cpp	/^	int					m_iEnd;$/;"	m	struct:SearchReplyParser_t	file:
m_iEnd	sphinx.cpp	/^	int		m_iEnd;$/;"	m	struct:SelectBounds_t	file:
m_iEnd	sphinx.h	/^	int			m_iEnd;$/;"	m	struct:CSphRemapRange
m_iEnd	sphinxexcerpt.cpp	/^		int		m_iEnd;		\/\/\/< end index, inclusive$/;"	m	struct:ExcerptGen_c::TokenSpan_t	file:
m_iEndField	sphinx.h	/^		int m_iEndField;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_iEndLimit	sphinxexcerpt.cpp	/^		int			m_iEndLimit;				\/\/\/< end of match in passage$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iEntries	sphinx.cpp	/^	int					m_iEntries;			\/\/\/< dictionary entries stored$/;"	m	struct:CSphDictCRCTraits	file:
m_iEntries	sphinxstd.h	/^	size_t				m_iEntries;	\/\/\/< data length, entries$/;"	m	class:CSphSharedBuffer
m_iEntryChunkFree	sphinx.cpp	/^	int								m_iEntryChunkFree;$/;"	m	class:CSphDictKeywords	file:
m_iErrorLength	searchd.cpp	/^	int			m_iErrorLength;$/;"	m	class:NetOutputBuffer_c	file:
m_iExpDelta	sphinxsearch.cpp	/^	int					m_iExpDelta;$/;"	m	struct:RankerState_Expr_fn	file:
m_iExpDelta	sphinxsearch.cpp	/^	int m_iExpDelta;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_iExpDelta	sphinxsearch.cpp	/^	int m_iExpDelta;$/;"	m	struct:RankerState_Proximity_fn	file:
m_iExpHitpos	sphinxsearch.cpp	/^		int m_iExpHitpos;$/;"	m	struct:FSMphrase::State_t	file:
m_iExpansionLimit	sphinx.h	/^	int							m_iExpansionLimit;$/;"	m	class:CSphIndex
m_iExpansionLimit	sphinxint.h	/^	int m_iExpansionLimit;$/;"	m	struct:ExpansionContext_t
m_iFD	searchd.cpp	/^	int			m_iFD;$/;"	m	struct:PipeReader_t	file:
m_iFD	searchd.cpp	/^	int		m_iFD;			\/\/\/< read-pipe to child$/;"	m	struct:PipeInfo_t	file:
m_iFD	sphinxint.h	/^	int				m_iFD;$/;"	m	class:CSphWriter
m_iFD	sphinxint.h	/^	int			m_iFD;			\/\/\/< my file descriptor$/;"	m	class:CSphAutofile
m_iFD	sphinxint.h	/^	int			m_iFD;$/;"	m	class:CSphReader
m_iFD	sphinxint.h	/^	int m_iFD;$/;"	m	struct:ExpansionContext_t
m_iFamily	searchd.cpp	/^	int				m_iFamily;		\/\/\/< TCP or UNIX socket$/;"	m	struct:AgentDesc_t	file:
m_iField	sphinx.h	/^		int m_iField;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_iFieldBufferLen	sphinx.cpp	/^	int				m_iFieldBufferLen;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iFieldBufferMax	sphinx.cpp	/^	int				m_iFieldBufferMax;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iFieldMaxPos	sphinxquery.h	/^	int						m_iFieldMaxPos;	\/\/\/< max position within field (spec part)$/;"	m	struct:XQLimitSpec_t
m_iFields	sphinxsearch.cpp	/^	int					m_iFields;$/;"	m	struct:RankerState_Expr_fn	file:
m_iFields	sphinxsearch.cpp	/^	int m_iFields;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_iFields	sphinxsearch.cpp	/^	int m_iFields;$/;"	m	struct:RankerState_Proximity_fn	file:
m_iFields	sphinxsearch.cpp	/^	int m_iFields;$/;"	m	struct:RankerState_Wordcount_fn	file:
m_iFile	sphinx.cpp	/^	int					m_iFile;		\/\/\/< my file$/;"	m	struct:CSphBin	file:
m_iFileLeft	sphinx.cpp	/^	int					m_iFileLeft;	\/\/\/< how much data is still unread from the file$/;"	m	struct:CSphBin	file:
m_iFilePos	sphinx.cpp	/^	SphOffset_t			m_iFilePos;		\/\/\/< my current offset in file$/;"	m	struct:CSphBin	file:
m_iFlags	sphinx.h	/^	int			m_iFlags;					\/\/\/< connection flags$/;"	m	struct:CSphSourceParams_MySQL
m_iFlags	sphinxutils.cpp	/^	int					m_iFlags;	\/\/\/< flags$/;"	m	struct:KeyDesc_t	file:
m_iFlushTag	searchd.cpp	/^	int		m_iFlushTag;		\/\/\/< last flushed tag$/;"	m	struct:FlushState_t	file:
m_iFree	sphinxsort.cpp	/^	int							m_iFree;		\/\/\/< free pairs count$/;"	m	class:CSphFixedHash	file:
m_iFromLen	sphinx.cpp	/^	int			m_iFromLen;	\/\/\/< cached m_sFrom length$/;"	m	struct:CSphSynonym	file:
m_iFunc	sphinxexpr.cpp	/^		int				m_iFunc;		\/\/\/< built-in function id, for TOK_FUNC type$/;"	m	union:ExprNode_t::__anon16	file:
m_iFuncs	sphinxexpr.cpp	/^	int					m_iFuncs;	\/\/\/< number of registered functions from this library$/;"	m	struct:UdfLib_t	file:
m_iHandler	searchd.cpp	/^	int		m_iHandler;		\/\/\/< who's my handler (SPH_PIPE_xxx)$/;"	m	struct:PipeInfo_t	file:
m_iHead	searchd.cpp	/^	int							m_iHead;$/;"	m	struct:SnippetWorker_t	file:
m_iHi	sphinx.cpp	/^	int m_iHi;$/;"	m	struct:BinaryNode_t	file:
m_iHint	sphinx.cpp	/^	int				m_iHint;$/;"	m	class:CSphDictReader	file:
m_iHitGap	sphinx.h	/^	int							m_iHitGap;$/;"	m	class:CSphIndex
m_iHitIndex	sphinxsearch.cpp	/^	int							m_iHitIndex;		\/\/\/< store the current position in m_Hits for GetHitsChunk()$/;"	m	class:ExtNodeCached_t	file:
m_iHitPos	sphinx.cpp	/^	Hitpos_t		m_iHitPos;		\/\/\/< current hit postition, from hitlist$/;"	m	class:DiskIndexQwordTraits_c	file:
m_iHitPos	sphinx.h	/^		Hitpos_t m_iHitPos;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_iHitlistPos	sphinxsearch.h	/^	SphOffset_t		m_iHitlistPos;	\/\/\/< current position in hitlist, from doclist$/;"	m	class:ISphQword
m_iHits	sphinx.cpp	/^		int							m_iHits;$/;"	m	struct:CSphDictKeywords::DictKeyword_t	file:
m_iHits	sphinx.cpp	/^	int				m_iHits;$/;"	m	class:CSphDictReader	file:
m_iHits	sphinx.cpp	/^	int				m_iHits;$/;"	m	struct:WordDictInfo_t	file:
m_iHits	sphinx.h	/^		int64_t					m_iHits;			\/\/\/< hit count for this term$/;"	m	struct:CSphQueryResultMeta::WordStat_t
m_iHits	sphinx.h	/^	SphOffset_t		m_iHits;		\/\/\/< PHASE_SORT: hits sorted so far$/;"	m	struct:CSphIndexProgress
m_iHits	sphinx.h	/^	int				m_iHits;$/;"	m	struct:CSphKeywordInfo
m_iHits	sphinxsearch.cpp	/^	int			m_iHits;		\/\/\/< matching hits$/;"	m	struct:ExtQword_t	file:
m_iHits	sphinxsearch.h	/^	int				m_iHits;		\/\/\/< hit count, from wordlist$/;"	m	class:ISphQword
m_iHitsTotal	sphinx.h	/^	SphOffset_t		m_iHitsTotal;	\/\/\/< PHASE_SORT: hits total$/;"	m	struct:CSphIndexProgress
m_iInd	sphinx.h	/^		SQLLEN				m_iInd;$/;"	m	struct:CSphSource_ODBC::QueryColumn_t
m_iIndex	sphinx.h	/^	int				m_iIndex;		\/\/\/< index into source result set (-1 for joined fields)$/;"	m	struct:CSphColumnInfo
m_iIndexTag	sphinx.cpp	/^	int							m_iIndexTag;			\/\/\/< my ids for MVA updates pool$/;"	m	class:CSphIndex_VLN	file:
m_iIndexTagSeq	sphinx.cpp	/^	static int					m_iIndexTagSeq;			\/\/\/< static ids sequence$/;"	m	class:CSphIndex_VLN	file:
m_iIndexTagSeq	sphinx.cpp	/^int CSphIndex_VLN::m_iIndexTagSeq = 0;$/;"	m	class:CSphIndex_VLN	file:
m_iInitialBufLen	sphinx.h	/^	int				m_iInitialBufLen;	\/\/\/< initial buffer len$/;"	m	class:CSphSource_XMLPipe
m_iInitialBufSize	sphinx.cpp	/^	int				m_iInitialBufSize;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iInlineAttrs	sphinx.cpp	/^	int				m_iInlineAttrs;	\/\/\/< inline attributes count$/;"	m	class:DiskIndexQwordTraits_c	file:
m_iInlineRowitems	sphinxsearch.cpp	/^	int							m_iInlineRowitems;$/;"	m	class:ExtRanker_c	file:
m_iInlineRowitems	sphinxsearch.h	/^	int						m_iInlineRowitems;		\/\/\/< inline rowitems count$/;"	m	class:ISphQwordSetup
m_iInstype	searchd.cpp	/^	int						m_iInstype;	\/\/ REMOVE? should not we know this somehow else?$/;"	m	struct:SqlNode_t	file:
m_iIterator	spelldump.cpp	/^	int				m_iIterator;$/;"	m	class:CISpellDict	file:
m_iJoinedHitField	sphinx.h	/^	int					m_iJoinedHitField;	\/\/\/< currently pulling joined hits from this field (index into schema; -1 if not pulling)$/;"	m	struct:CSphSource_SQL
m_iJoinedHitID	sphinx.h	/^	SphDocID_t			m_iJoinedHitID;		\/\/\/< last document id$/;"	m	struct:CSphSource_SQL
m_iJoinedHitPos	sphinx.h	/^	int					m_iJoinedHitPos;	\/\/\/< last hit position$/;"	m	struct:CSphSource_SQL
m_iKeywordChunkFree	sphinx.cpp	/^	int								m_iKeywordChunkFree;$/;"	m	class:CSphDictKeywords	file:
m_iKillListIterator	sphinx.cpp	/^	int				m_iKillListIterator;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iKillListSize	sphinx.cpp	/^	DWORD						m_iKillListSize;		\/\/\/< killlist size (in elements)$/;"	m	class:CSphIndex_VLN	file:
m_iLastAgent	searchd.cpp	/^	mutable int	m_iLastAgent;	\/\/\/< just a helper to optimize consequental linear search$/;"	m	struct:SnippetReplyParser_t	file:
m_iLastAgent	searchd.cpp	/^	mutable int	m_iLastAgent;	\/\/\/< just a helper to optimize consequental linear search$/;"	m	struct:SnippetRequestBuilder_t	file:
m_iLastDoclistPos	sphinx.cpp	/^	SphOffset_t			m_iLastDoclistPos;$/;"	m	struct:CSphDictCRCTraits	file:
m_iLastHitlistDelta	sphinx.cpp	/^	SphOffset_t					m_iLastHitlistDelta;	\/\/\/< doclist entry$/;"	m	class:CSphIndex_VLN	file:
m_iLastHitlistPos	sphinx.cpp	/^	SphOffset_t					m_iLastHitlistPos;		\/\/\/< doclist entry$/;"	m	class:CSphIndex_VLN	file:
m_iLastIndex	sphinxexcerpt.cpp	/^	int			m_iLastIndex;$/;"	m	class:ISnippetsQword	file:
m_iLastLen	sphinxint.h	/^	int m_iLastLen;$/;"	m	class:CSphKeywordDeltaWriter
m_iLastTokenLen	sphinx.h	/^	int								m_iLastTokenLen;			\/\/\/< last token length, in codepoints$/;"	m	class:ISphTokenizer
m_iLastWord	sphinxexcerpt.cpp	/^	int						m_iLastWord;$/;"	m	class:ExcerptGen_c	file:
m_iLastWordDoclist	sphinx.cpp	/^	SphOffset_t					m_iLastWordDoclist;		\/\/\/< wordlist entry$/;"	m	class:CSphIndex_VLN	file:
m_iLastWordDocs	sphinx.cpp	/^	int							m_iLastWordDocs;		\/\/\/< wordlist entry$/;"	m	class:CSphIndex_VLN	file:
m_iLastWordHits	sphinx.cpp	/^	int							m_iLastWordHits;		\/\/\/< wordlist entry$/;"	m	class:CSphIndex_VLN	file:
m_iLastWordID	sphinx.cpp	/^	SphWordID_t			m_iLastWordID;$/;"	m	struct:CSphBin	file:
m_iLastWordID	sphinx.cpp	/^	SphWordID_t			m_iLastWordID;$/;"	m	struct:CSphDictCRCTraits	file:
m_iLastWorker	searchd.cpp	/^	mutable int m_iLastWorker;	\/\/\/< just a helper to optimize consequental linear search$/;"	m	struct:SnippetReplyParser_t	file:
m_iLastWorker	searchd.cpp	/^	mutable int m_iLastWorker;	\/\/\/< just a helper to optimize consequental linear search$/;"	m	struct:SnippetRequestBuilder_t	file:
m_iLat	sphinxexpr.cpp	/^	int			m_iLat;$/;"	m	class:Expr_GeodistAttrConst_c	file:
m_iLat	sphinxsort.cpp	/^	int					m_iLat;$/;"	m	struct:ExprGeodist_t	file:
m_iLeft	sphinx.cpp	/^	int					m_iLeft;$/;"	m	struct:CSphBin	file:
m_iLeft	sphinxexpr.cpp	/^	int				m_iLeft;$/;"	m	struct:ExprNode_t	file:
m_iLen	searchd.cpp	/^	int				m_iLen;$/;"	m	class:InputBuffer_c	file:
m_iLen	searchd.cpp	/^	int m_iLen;$/;"	m	class:SqlRowBuffer_c	file:
m_iLen	sphinx.cpp	/^		int							m_iLen;$/;"	m	struct:CSphDictKeywords::DictBlock_t	file:
m_iLen	sphinx.cpp	/^	int m_iLen;$/;"	m	struct:WordReaderContext_t	file:
m_iLen	sphinxexpr.cpp	/^	int m_iLen;$/;"	m	struct:Expr_GetStrConst_c	file:
m_iLength	sphinx.cpp	/^	size_t			m_iLength; \/\/ for pretty-printers to work$/;"	m	class:CSphAutoArray	file:
m_iLength	sphinx.h	/^	int m_iLength;$/;"	m	struct:SphRange_t
m_iLength	sphinxexcerpt.cpp	/^		int		m_iLength;$/;"	m	struct:ExcerptGen_c::Keyword_t	file:
m_iLength	sphinxstd.h	/^	int				m_iLength;				\/\/\/< entries count$/;"	m	class:CSphOrderedHash
m_iLength	sphinxstd.h	/^	int		m_iLength;		\/\/\/< entries actually used$/;"	m	class:CSphVector
m_iLength	sphinxstd.h	/^	size_t				m_iLength;	\/\/\/< data length, bytes$/;"	m	class:CSphSharedBuffer
m_iLengthBytes	sphinxexcerpt.cpp	/^		int					m_iLengthBytes;	\/\/\/< token length (in bytes)$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_iLengthCP	sphinxexcerpt.cpp	/^		int					m_iLengthCP;	\/\/\/< token length (in codepoints)$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_iLimit	searchd.cpp	/^	int m_iLimit;$/;"	m	class:SqlRowBuffer_c	file:
m_iLimit	sphinx.h	/^	int				m_iLimit;		\/\/\/< limit into result set (as Y in MySQL LIMIT X,Y clause)$/;"	m	class:CSphQuery
m_iLimit	sphinxexcerpt.h	/^	int				m_iLimit;			\/\/\/< max chars in snippet (0 if unlimited)$/;"	m	struct:ExcerptQuery_t
m_iLimit	sphinxsort.cpp	/^	int				m_iLimit;		\/\/\/< max matches to be retrieved$/;"	m	class:CSphKBufferGroupSorter	file:
m_iLimit	sphinxstd.h	/^	int		m_iLimit;		\/\/\/< entries allocated$/;"	m	class:CSphVector
m_iLimitPassages	sphinxexcerpt.h	/^	int				m_iLimitPassages;	\/\/\/< max passages in snippet$/;"	m	struct:ExcerptQuery_t
m_iLimitWords	sphinxexcerpt.h	/^	int				m_iLimitWords;		\/\/\/< max words in snippet$/;"	m	struct:ExcerptQuery_t
m_iLine	sphinxstd.cpp	/^	int				m_iLine;$/;"	m	struct:CSphMemHeader	file:
m_iLine	sphinxutils.h	/^	int				m_iLine;$/;"	m	class:CSphConfigParser
m_iListEnd	searchd.cpp	/^	int						m_iListEnd;$/;"	m	struct:SqlStmt_t	file:
m_iListStart	searchd.cpp	/^	int						m_iListStart; \/\/ < the position of start and end of index's definition in original query.$/;"	m	struct:SqlStmt_t	file:
m_iLo	sphinx.cpp	/^	int m_iLo;$/;"	m	struct:BinaryNode_t	file:
m_iLoadFiles	sphinxexcerpt.h	/^	int				m_iLoadFiles;		\/\/\/< whether to interpret source as text (0) or file name (!0)$/;"	m	struct:ExcerptQuery_t
m_iLocal	searchd.cpp	/^	int					m_iLocal;$/;"	m	struct:LocalSearch_t	file:
m_iLocator	sphinxexpr.cpp	/^	int					m_iLocator;$/;"	m	class:Expr_MVAIn_c	file:
m_iLocator	sphinxexpr.cpp	/^	int				m_iLocator; \/\/\/< index of attribute locator in schema$/;"	m	struct:ExprNode_t	file:
m_iLocator	sphinxexpr.cpp	/^	int m_iLocator;$/;"	m	struct:ExprLocatorTraits_t	file:
m_iLockFD	sphinx.cpp	/^	int							m_iLockFD;$/;"	m	class:CSphIndex_VLN	file:
m_iLogHead	sphinx.cpp	/^		int					m_iLogHead;				\/\/\/< pointer to head allocs log entry$/;"	m	struct:CSphArena::TagDesc_t	file:
m_iLon	sphinxexpr.cpp	/^	int			m_iLon;$/;"	m	class:Expr_GeodistAttrConst_c	file:
m_iLon	sphinxsort.cpp	/^	int					m_iLon;$/;"	m	struct:ExprGeodist_t	file:
m_iLoop	sphinxint.h	/^	int							m_iLoop;		\/\/ loop inside one set$/;"	m	class:AttrIndexBuilder_t
m_iMVA	sphinx.cpp	/^	int				m_iMVA;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iMVAAttr	sphinx.cpp	/^	int					m_iMVAAttr;$/;"	m	struct:FieldMVARedirect_t	file:
m_iMVAIterator	sphinx.cpp	/^	int				m_iMVAIterator;$/;"	m	class:CSphSource_XMLPipe2	file:
m_iMagicHash	sphinxquery.h	/^	mutable uint64_t		m_iMagicHash;$/;"	m	struct:XQNode_t
m_iMatches	sphinx.h	/^	int						m_iMatches;			\/\/\/< total matches returned (upto MAX_MATCHES)$/;"	m	class:CSphQueryResultMeta
m_iMatchesCount	sphinxexcerpt.cpp	/^	int		m_iMatchesCount;$/;"	m	class:TokenFunctorTraits_c	file:
m_iMaxCachedDocs	sphinx.h	/^	int							m_iMaxCachedDocs;$/;"	m	class:CSphIndex
m_iMaxCachedDocs	sphinxsearch.h	/^	int								m_iMaxCachedDocs;$/;"	m	class:CSphQueryNodeCache
m_iMaxCachedHits	sphinx.h	/^	int							m_iMaxCachedHits;$/;"	m	class:CSphIndex
m_iMaxCachedHits	sphinxsearch.h	/^	int								m_iMaxCachedHits;$/;"	m	class:CSphQueryNodeCache
m_iMaxChunk	sphinx.cpp	/^	int									m_iMaxChunk;			\/\/\/< max size of entry between checkpoints$/;"	m	class:CWordlist	file:
m_iMaxDistance	sphinxsearch.cpp	/^	int							m_iMaxDistance;$/;"	m	class:FSMproximity	file:
m_iMaxFieldLen	tests.cpp	/^	static const int m_iMaxFieldLen = 512;$/;"	m	class:SphDocRandomizer_c	file:
m_iMaxFieldPos	sphinxsearch.cpp	/^	int							m_iMaxFieldPos;$/;"	m	class:ExtTermPos_c	file:
m_iMaxFields	tests.cpp	/^	static const int m_iMaxFields = 2;$/;"	m	class:SphDocRandomizer_c	file:
m_iMaxFileBufferSize	sphinx.h	/^	int								m_iMaxFileBufferSize;$/;"	m	struct:CSphSourceParams_SQL
m_iMaxFileBufferSize	sphinx.h	/^	int						m_iMaxFileBufferSize;	\/\/\/< max size of read buffer for the 'sql_file_field' fields$/;"	m	class:CSphSource_Document
m_iMaxHits	sphinx.h	/^	int						m_iMaxHits;$/;"	m	class:CSphSource_Document
m_iMaxIds	sphinx.h	/^	int			m_iMaxIds;$/;"	m	class:CSphSource
m_iMaxLCS	sphinxexcerpt.cpp	/^		int			m_iMaxLCS;					\/\/\/< passage weight factor$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iMaxLCS	sphinxsearch.cpp	/^	int					m_iMaxLCS;$/;"	m	struct:RankerState_Expr_fn	file:
m_iMaxMatches	sphinx.h	/^	int				m_iMaxMatches;	\/\/\/< max matches to retrieve, default is 1000. more matches use more memory and CPU time to hold and sort them$/;"	m	class:CSphQuery
m_iMaxPos	sphinx.cpp	/^	SphOffset_t		m_iMaxPos;$/;"	m	class:CSphDictReader	file:
m_iMaxQuerypos	sphinxsearch.cpp	/^	int							m_iMaxQuerypos;						\/\/\/< exposed for ranker state functors$/;"	m	class:ExtRanker_c	file:
m_iMaxQuerypos	sphinxsearch.cpp	/^	int					m_iMaxQuerypos;$/;"	m	struct:RankerState_Expr_fn	file:
m_iMaxQuerypos	sphinxsearch.cpp	/^	int m_iMaxQuerypos;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_iMaxTimer	sphinxsearch.cpp	/^	int64_t						m_iMaxTimer;		\/\/\/< work until this timestamp$/;"	m	class:ExtNodeCached_t	file:
m_iMaxTimer	sphinxsearch.cpp	/^	int64_t						m_iMaxTimer;		\/\/\/< work until this timestamp$/;"	m	class:ExtTerm_c	file:
m_iMaxTimer	sphinxsearch.h	/^	int64_t					m_iMaxTimer;$/;"	m	class:ISphQwordSetup
m_iMaxTokens	sphinx.cpp	/^	int						m_iMaxTokens;$/;"	m	struct:CSphMultiformContainer	file:
m_iMaxTokens	sphinx.cpp	/^	int						m_iMaxTokens;$/;"	m	struct:CSphMultiforms	file:
m_iMaxValue	sphinx.h	/^		SphAttr_t		m_iMaxValue;	\/\/\/< range max$/;"	m	union:CSphFilterSettings::__anon9
m_iMaxValue	sphinxfilter.cpp	/^	SphAttr_t m_iMaxValue;$/;"	m	struct:IFilter_Range	file:
m_iMaxWindowHits	sphinxsearch.cpp	/^	int					m_iMaxWindowHits[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_iMaxedOut	searchd.cpp	/^	int64_t		m_iMaxedOut;$/;"	m	struct:SearchdStats_t	file:
m_iMaxibuffer	searchd.cpp	/^	int					m_iMaxibuffer;$/;"	m	class:NetInputBuffer_c	file:
m_iMemUse	sphinx.cpp	/^	int								m_iMemUse;			\/\/\/< current memory use by all the chunks$/;"	m	class:CSphDictKeywords	file:
m_iMergeInfinum	sphinx.cpp	/^	SphDocID_t					m_iMergeInfinum;	\/\/\/< minimal docid-1 for merging$/;"	m	class:CSphIndex_VLN	file:
m_iMicroSec	sphinx.cpp	/^	int64_t			m_iMicroSec;		\/\/\/< time as clocked raw$/;"	m	struct:CSphTimer	file:
m_iMicroSecAdj	sphinx.cpp	/^	int64_t			m_iMicroSecAdj;		\/\/\/< guessed (!) time after timer costs adjustment, including subtimer costs$/;"	m	struct:CSphTimer	file:
m_iMicroSecSelf	sphinx.cpp	/^	int64_t			m_iMicroSecSelf;	\/\/\/< guessed (!) self time$/;"	m	struct:CSphTimer	file:
m_iMinBestSpanPos	sphinxsearch.cpp	/^	int					m_iMinBestSpanPos[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_iMinGap	sphinxexcerpt.cpp	/^		int			m_iMinGap;					\/\/\/< passage weight factor$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iMinHitPos	sphinxsearch.cpp	/^	int					m_iMinHitPos[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_iMinID	sphinx.cpp	/^	SphDocID_t		m_iMinID;		\/\/\/< min ID to fixup$/;"	m	class:DiskIndexQwordTraits_c	file:
m_iMinInfixLen	sphinx.h	/^	int		m_iMinInfixLen;		\/\/\/< min indexable infix length (0 means don't index infixes)$/;"	m	struct:CSphSourceSettings
m_iMinLength	sphinxstemcz.cpp	/^	int		m_iMinLength;$/;"	m	struct:ClampRule_t	file:
m_iMinPrefixLen	sphinx.h	/^	int		m_iMinPrefixLen;	\/\/\/< min indexable prefix (0 means don't index prefixes)$/;"	m	struct:CSphSourceSettings
m_iMinPrefixLen	sphinxint.h	/^	int m_iMinPrefixLen;$/;"	m	struct:ExpansionContext_t
m_iMinQindex	sphinxsearch.cpp	/^	int							m_iMinQindex;$/;"	m	class:FSMproximity	file:
m_iMinStemmingLen	sphinx.h	/^	int				m_iMinStemmingLen;$/;"	m	struct:CSphDictSettings
m_iMinTokens	sphinx.cpp	/^	int						m_iMinTokens;$/;"	m	struct:CSphMultiforms	file:
m_iMinValue	sphinx.h	/^		SphAttr_t		m_iMinValue;	\/\/\/< range min$/;"	m	union:CSphFilterSettings::__anon8
m_iMinValue	sphinxfilter.cpp	/^	SphAttr_t m_iMinValue;$/;"	m	struct:IFilter_Range	file:
m_iMinWordLen	sphinx.h	/^	int					m_iMinWordLen;$/;"	m	struct:CSphTokenizerSettings
m_iMultiAttr	sphinx.h	/^	int					m_iMultiAttr;		\/\/\/< multi-valued attr being currently fetched$/;"	m	struct:CSphSource_SQL
m_iMultiplier	sphinx.h	/^	int						m_iMultiplier;		\/\/\/< multi-query multiplier, -1 to indicate error$/;"	m	class:CSphQueryResultMeta
m_iMva64	sphinxint.h	/^	int							m_iMva64;$/;"	m	class:AttrIndexBuilder_t
m_iMysqlConnectFlags	sphinx.h	/^	int						m_iMysqlConnectFlags;$/;"	m	struct:CSphSource_MySQL
m_iNear	sphinxsearch.cpp	/^	int							m_iNear;			\/\/\/< the NEAR distance$/;"	m	class:FSMmultinear	file:
m_iNetworkErrors	searchd.cpp	/^	int64_t		m_iNetworkErrors;	\/\/\/< network error$/;"	m	struct:AgentStats_t	file:
m_iNext	sphinx.cpp	/^		int					m_iNext;				\/\/\/< next free page of this size$/;"	m	struct:CSphArena::PageDesc_t	file:
m_iNext	sphinx.cpp	/^		int					m_iNext;$/;"	m	struct:CSphArena::AllocsLogEntry_t	file:
m_iNext	sphinx.cpp	/^	int				m_iNext;$/;"	m	struct:CSphTimer	file:
m_iNext	sphinxexcerpt.h	/^	int				m_iNext;			\/\/\/< the next one in one-link list for batch processing. -1 terminate the list. -2 sign of other (out-of-the-lists)$/;"	m	struct:ExcerptQuery_t
m_iNext	sphinxsort.cpp	/^		int		m_iNext;$/;"	m	struct:CSphFixedHash::HashEntry_t	file:
m_iNgramLen	sphinx.cpp	/^	int					m_iNgramLen;$/;"	m	class:CSphTokenizer_UTF8Ngram	file:
m_iNgramLen	sphinx.h	/^	int					m_iNgramLen;$/;"	m	struct:CSphTokenizerSettings
m_iNormalTokenLen	sphinx.cpp	/^	int						m_iNormalTokenLen;$/;"	m	struct:CSphMultiform	file:
m_iNow	sphinx.h	/^	DWORD				m_iNow;						\/\/\/< timestamp (for timesegments sorting mode)$/;"	m	struct:CSphMatchComparatorState
m_iNullIds	sphinx.h	/^	int			m_iNullIds;$/;"	m	class:CSphSource
m_iNumDocs	searchd.cpp	/^	mutable int m_iNumDocs;		\/\/\/< optimize numdocs\/length calculation in scattered case$/;"	m	struct:SnippetRequestBuilder_t	file:
m_iOffset	sphinx.h	/^	int						m_iOffset;			\/\/\/< requested offset into matches array$/;"	m	class:CSphQueryResult
m_iOffset	sphinx.h	/^	int				m_iOffset;		\/\/\/< offset into result set (as X in MySQL LIMIT X,Y clause)$/;"	m	class:CSphQuery
m_iOldGroups	sphinx.h	/^	int				m_iOldGroups;		\/\/\/< 0.9.6 group filter values count$/;"	m	class:CSphQuery
m_iOldMaxGID	sphinx.h	/^	DWORD			m_iOldMaxGID;		\/\/\/< 0.9.6 max group id$/;"	m	class:CSphQuery
m_iOldMaxTS	sphinx.h	/^	DWORD			m_iOldMaxTS;		\/\/\/< 0.9.6 max timestamp$/;"	m	class:CSphQuery
m_iOldMinGID	sphinx.h	/^	DWORD			m_iOldMinGID;		\/\/\/< 0.9.6 min group id$/;"	m	class:CSphQuery
m_iOldMinTS	sphinx.h	/^	DWORD			m_iOldMinTS;		\/\/\/< 0.9.6 min timestamp$/;"	m	class:CSphQuery
m_iOldVersion	sphinx.h	/^	int				m_iOldVersion;		\/\/\/< version, to fixup old queries$/;"	m	class:CSphQuery
m_iOpArg	sphinxquery.h	/^	int						m_iOpArg;		\/\/\/< operator argument (proximity distance, quorum count)$/;"	m	struct:XQNode_t
m_iOrder	sphinxquery.cpp	/^	int			m_iOrder;$/;"	m	struct:MarkedNode_t	file:
m_iOrder	sphinxquery.h	/^	int						m_iOrder;$/;"	m	struct:XQNode_t
m_iOvershortCount	sphinx.cpp	/^		int				m_iOvershortCount;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_iOvershortCount	sphinx.h	/^	int								m_iOvershortCount;			\/\/\/< skipped overshort tokens count$/;"	m	class:ISphTokenizer
m_iOvershortStep	sphinx.h	/^	int		m_iOvershortStep;	\/\/\/< position step on overshort token (default is 1)$/;"	m	struct:CSphSourceSettings
m_iPages	sphinx.cpp	/^	int						m_iPages;			\/\/\/< max pages count$/;"	m	class:CSphArena	file:
m_iParent	sphinx.cpp	/^	int				m_iParent;$/;"	m	struct:CSphTimer	file:
m_iParsed	sphinxexpr.cpp	/^	int						m_iParsed;	\/\/\/< filled by yyparse() at the very end$/;"	m	class:ExprParser_t	file:
m_iPassageId	sphinxexcerpt.cpp	/^	int						m_iPassageId;$/;"	m	class:ExcerptGen_c	file:
m_iPassageId	sphinxexcerpt.h	/^	int				m_iPassageId;		\/\/\/< current %PASSAGE_ID% counter value (must start at 1)$/;"	m	struct:ExcerptQuery_t
m_iPendingNulls	sphinxquery.cpp	/^	int						m_iPendingNulls;$/;"	m	class:XQParser_t	file:
m_iPendingType	sphinxquery.cpp	/^	int						m_iPendingType;$/;"	m	class:XQParser_t	file:
m_iPgRow	sphinx.h	/^	int						m_iPgRow;		\/\/\/< current row (0 based, as in PQgetvalue)$/;"	m	struct:CSphSource_PgSQL
m_iPgRows	sphinx.h	/^	int						m_iPgRows;		\/\/\/< how much rows last step returned$/;"	m	struct:CSphSource_PgSQL
m_iPhraseK	sphinxsearch.cpp	/^	int m_iPhraseK;$/;"	m	struct:RankerState_MatchAny_fn	file:
m_iPlainFieldsLength	sphinx.h	/^	int						m_iPlainFieldsLength;$/;"	m	class:CSphSource_Document
m_iPoolUsed	sphinxint.h	/^	int				m_iPoolUsed;$/;"	m	class:CSphWriter
m_iPort	searchd.cpp	/^	int				m_iPort;		\/\/\/< remote searchd port, 0 if local$/;"	m	struct:AgentDesc_t	file:
m_iPort	searchd.cpp	/^	int				m_iPort;$/;"	m	struct:ListenerDesc_t	file:
m_iPort	sphinx.h	/^	int								m_iPort;$/;"	m	struct:CSphSourceParams_SQL
m_iPos	sphinx.cpp	/^		SphOffset_t					m_iPos;$/;"	m	struct:CSphDictKeywords::DictBlock_t	file:
m_iPos	sphinxint.h	/^	SphOffset_t		m_iPos;$/;"	m	class:CSphWriter
m_iPos	sphinxint.h	/^	SphOffset_t	m_iPos;$/;"	m	class:CSphReader
m_iPregroupDynamic	sphinxsort.cpp	/^	int							m_iPregroupDynamic;	\/\/\/< how much dynamic attributes are computed by the index (before groupby sorter)$/;"	m	class:CSphKBufferGroupSorter	file:
m_iPrev	sphinx.cpp	/^		int					m_iPrev;				\/\/\/< prev free page of this size$/;"	m	struct:CSphArena::PageDesc_t	file:
m_iPrev	sphinx.cpp	/^	int				m_iPrev;$/;"	m	struct:CSphTimer	file:
m_iQueries	searchd.cpp	/^	int							m_iQueries;$/;"	m	struct:SnippetThread_t	file:
m_iQueries	searchd.cpp	/^	int64_t		m_iQueries;			\/\/\/< search queries count (differs from search commands count because of multi-queries)$/;"	m	struct:SearchdStats_t	file:
m_iQuery	sphinxexcerpt.cpp	/^	int m_iQuery;$/;"	m	struct:DocQueryZonePair_t	file:
m_iQueryCpuTime	searchd.cpp	/^	int64_t		m_iQueryCpuTime;	\/\/\/< CPU time spent$/;"	m	struct:SearchdStats_t	file:
m_iQueryLen	sphinxquery.cpp	/^	int						m_iQueryLen;$/;"	m	class:XQParser_t	file:
m_iQueryPos	sphinxsearch.cpp	/^	int			m_iQueryPos;	\/\/\/< position in the query$/;"	m	struct:ExtQword_t	file:
m_iQueryTime	searchd.cpp	/^	int64_t		m_iQueryTime;		\/\/\/< wall time spent (including network wait time)$/;"	m	struct:SearchdStats_t	file:
m_iQueryTime	sphinx.h	/^	int						m_iQueryTime;		\/\/\/< query time, milliseconds$/;"	m	class:CSphQueryResultMeta
m_iQueryWordCount	sphinxsearch.cpp	/^	int					m_iQueryWordCount;$/;"	m	struct:RankerState_Expr_fn	file:
m_iQwordCount	sphinxexcerpt.cpp	/^		int					m_iQwordCount;		\/\/\/< passage weight factor$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iQwordCount	sphinxexcerpt.cpp	/^	int						m_iQwordCount;$/;"	m	class:ExcerptGen_c	file:
m_iQwords	sphinxexcerpt.cpp	/^		int		m_iQwords;	\/\/\/< number of words matching query$/;"	m	struct:ExcerptGen_c::TokenSpan_t	file:
m_iQwords	sphinxsearch.cpp	/^	int							m_iQwords;							\/\/\/< exposed for ranker state functors$/;"	m	class:ExtRanker_c	file:
m_iQwords	sphinxsearch.cpp	/^	int							m_iQwords;			\/\/\/< number of tokens in parent query$/;"	m	class:ExtNodeCached_t	file:
m_iQwordsWeight	sphinxexcerpt.cpp	/^		int					m_iQwordsWeight;	\/\/\/< passage weight factor$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iRangeStep	sphinx.h	/^	int64_t							m_iRangeStep;$/;"	m	struct:CSphSourceParams_SQL
m_iRangedThrottle	sphinx.h	/^	int								m_iRangedThrottle;$/;"	m	struct:CSphSourceParams_SQL
m_iRawFlags	sphinxexcerpt.h	/^	int				m_iRawFlags;		\/\/\/< flags as they received from proto (to avoid coding\/decoding to agents)$/;"	m	struct:ExcerptQuery_t
m_iReadBytes	sphinx.h	/^	int64_t		m_iReadBytes;$/;"	m	class:CSphIOStats
m_iReadFileBufferSize	sphinx.h	/^	int						m_iReadFileBufferSize;	\/\/\/< size of read buffer for the 'sql_file_field' fields$/;"	m	class:CSphSource_Document
m_iReadOps	sphinx.h	/^	DWORD		m_iReadOps;$/;"	m	class:CSphIOStats
m_iReadTime	sphinx.h	/^	int64_t		m_iReadTime;$/;"	m	class:CSphIOStats
m_iReadUnhinted	sphinxint.h	/^	int			m_iReadUnhinted;$/;"	m	class:CSphReader
m_iReaders	sphinxstd.h	/^	LONG				m_iReaders;$/;"	m	class:CSphRwlock
m_iRefCount	sphinx.cpp	/^	int							m_iRefCount;$/;"	m	struct:WordformContainer_t	file:
m_iRefCount	sphinxsearch.cpp	/^	int								m_iRefCount;$/;"	m	class:NodeCacheContainer_t	file:
m_iRefCount	sphinxstd.h	/^	mutable int			m_iRefCount;$/;"	m	struct:ISphRefcountedMT
m_iRefCount	sphinxstd.h	/^	mutable int		m_iRefCount;$/;"	m	struct:ISphRefcounted
m_iRefRangeStep	sphinx.h	/^	int64_t							m_iRefRangeStep;$/;"	m	struct:CSphSourceParams_SQL
m_iRemapStart	sphinx.h	/^	int			m_iRemapStart;$/;"	m	struct:CSphRemapRange
m_iRemoveLength	sphinxstemcz.cpp	/^	int		m_iRemoveLength;$/;"	m	struct:ReplaceRule_t	file:
m_iReparseLen	sphinx.cpp	/^	int				m_iReparseLen;		\/\/\/< and this much bytes (under 4)$/;"	m	class:CSphSource_XMLPipe2	file:
m_iReparseStart	sphinx.cpp	/^	int				m_iReparseStart;	\/\/\/< utf-8 fixerupper might need to postpone a few bytes, starting at this offset$/;"	m	class:CSphSource_XMLPipe2	file:
m_iReplyRead	searchd.cpp	/^	int				m_iReplyRead;	\/\/\/< how many reply bytes are alredy received$/;"	m	struct:AgentConn_t	file:
m_iReplySize	searchd.cpp	/^	int				m_iReplySize;	\/\/\/< how many reply bytes are there$/;"	m	struct:AgentConn_t	file:
m_iReplyStatus	searchd.cpp	/^	int				m_iReplyStatus;	\/\/\/< reply status code$/;"	m	struct:AgentConn_t	file:
m_iReqLen	searchd.cpp	/^	mutable int m_iReqLen;$/;"	m	struct:SnippetRequestBuilder_t	file:
m_iResultLen	sphinxexcerpt.cpp	/^	int						m_iResultLen;	\/\/\/< result codepoints count$/;"	m	class:ExcerptGen_c	file:
m_iRetryCount	sphinx.h	/^	int				m_iRetryCount;		\/\/\/< retry count, for distributed queries$/;"	m	class:CSphQuery
m_iRetryDelay	sphinx.h	/^	int				m_iRetryDelay;		\/\/\/< retry delay, for distributed queries$/;"	m	class:CSphQuery
m_iRight	sphinxexpr.cpp	/^	int				m_iRight;$/;"	m	struct:ExprNode_t	file:
m_iRing	sphinxsearch.cpp	/^	int							m_iRing;			\/\/\/< the head of the ring$/;"	m	class:FSMmultinear	file:
m_iRowsAffected	searchd.cpp	/^	int						m_iRowsAffected;$/;"	m	struct:SqlStmt_t	file:
m_iSQLSelectEnd	sphinx.h	/^	int				m_iSQLSelectEnd;	\/\/\/< SQL parser helper$/;"	m	class:CSphQuery
m_iSQLSelectStart	sphinx.h	/^	int				m_iSQLSelectStart;	\/\/\/< SQL parser helper$/;"	m	class:CSphQuery
m_iSchemaSz	searchd.cpp	/^	int						m_iSchemaSz;$/;"	m	struct:SqlStmt_t	file:
m_iSent	searchd.cpp	/^	int			m_iSent;$/;"	m	class:NetOutputBuffer_c	file:
m_iSeq	sphinxexcerpt.h	/^	int				m_iSeq;				\/\/\/< request order, to sort back to request order$/;"	m	struct:ExcerptQuery_t
m_iSetValue	searchd.cpp	/^	int						m_iSetValue;$/;"	m	struct:SqlStmt_t	file:
m_iSize	searchd.cpp	/^	int						m_iSize;	\/\/ last query size$/;"	m	struct:CrashQuery_t	file:
m_iSize	sphinx.cpp	/^	int						m_iSize;$/;"	m	struct:CSphHitQueue	file:
m_iSize	sphinx.cpp	/^	int					m_iSize;$/;"	m	struct:CSphBin	file:
m_iSize	sphinx.cpp	/^	int		m_iSize;$/;"	m	class:CSphQueue	file:
m_iSize	sphinx.cpp	/^	int64_t								m_iSize;				\/\/\/< file size$/;"	m	class:CWordlist	file:
m_iSize	sphinxexcerpt.h	/^	int64_t			m_iSize;			\/\/\/< file size, to sort to work-queue order$/;"	m	struct:ExcerptQuery_t
m_iSize	sphinxsort.cpp	/^	int							m_iSize;$/;"	m	class:CSphMatchQueueTraits	file:
m_iSize	sphinxstd.cpp	/^	int64_t	m_iSize;$/;"	m	struct:MemCategorized_t	file:
m_iSize	sphinxstd.cpp	/^	size_t			m_iSize;$/;"	m	struct:CSphMemHeader	file:
m_iSize	sphinxstd.h	/^	int			m_iSize;$/;"	m	class:CSphFixedVector
m_iSize	sphinxstd.h	/^	int		m_iSize;$/;"	m	class:CSphStringBuilder
m_iSizeBits	sphinx.cpp	/^		int					m_iSizeBits;			\/\/\/< alloc size$/;"	m	struct:CSphArena::PageDesc_t	file:
m_iSizeHint	sphinxint.h	/^	int			m_iSizeHint;	\/\/\/< how much do we expect to read$/;"	m	class:CSphReader
m_iSlot	indexer.cpp	/^	int						m_iSlot;$/;"	m	struct:CSphMTFHashEntry	file:
m_iSock	searchd.cpp	/^	int					m_iSock;$/;"	m	class:NetInputBuffer_c	file:
m_iSock	searchd.cpp	/^	int					m_iSock;$/;"	m	struct:Listener_t	file:
m_iSock	searchd.cpp	/^	int				m_iSock;		\/\/\/< socket number, -1 if not connected$/;"	m	struct:AgentConn_t	file:
m_iSock	searchd.cpp	/^	int			m_iSock;			\/\/\/< my socket$/;"	m	class:NetOutputBuffer_c	file:
m_iSqlFields	sphinx.h	/^	int					m_iSqlFields;		\/\/\/< field count (for row dumper)$/;"	m	struct:CSphSource_SQL
m_iStart	searchd.cpp	/^	int									m_iStart;$/;"	m	struct:SearchRequestBuilder_t	file:
m_iStart	searchd.cpp	/^	int								m_iStart;		\/\/\/< subset start$/;"	m	class:SearchHandler_c	file:
m_iStart	searchd.cpp	/^	int						m_iStart;$/;"	m	struct:SqlNode_t	file:
m_iStart	searchd.cpp	/^	int					m_iStart;$/;"	m	struct:SearchReplyParser_t	file:
m_iStart	sphinx.cpp	/^	int		m_iStart;$/;"	m	struct:SelectBounds_t	file:
m_iStart	sphinx.h	/^	int			m_iStart;$/;"	m	struct:CSphRemapRange
m_iStart	sphinx.h	/^	int m_iStart;$/;"	m	struct:SphRange_t
m_iStart	sphinxexcerpt.cpp	/^		int					m_iStart;			\/\/\/< start token index$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iStart	sphinxexcerpt.cpp	/^		int					m_iStart;		\/\/\/< token start (index in codepoints array)$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_iStart	sphinxexcerpt.cpp	/^		int		m_iStart;	\/\/\/< start index, inclusive$/;"	m	struct:ExcerptGen_c::TokenSpan_t	file:
m_iStartField	sphinx.h	/^		int m_iStartField;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_iStartLimit	sphinxexcerpt.cpp	/^		int			m_iStartLimit;				\/\/\/< start of match in passage$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iStartPos	sphinx.h	/^		int m_iStartPos;$/;"	m	struct:CSphSource_Document::CSphBuildHitsState_t
m_iStaticSize	sphinx.h	/^	int								m_iStaticSize;		\/\/\/< static row size (can be different from m_dStaticUsed.GetLength() because of gaps)$/;"	m	struct:CSphSchema
m_iStatsIndex	searchd.cpp	/^	int				m_iStatsIndex;	\/\/\/< index into global searchd stats array$/;"	m	struct:AgentDesc_t	file:
m_iStopwordStep	sphinx.h	/^	int		m_iStopwordStep;	\/\/\/< position step on stopword token (default is 1)$/;"	m	struct:CSphSourceSettings
m_iStopwordStep	sphinxexcerpt.cpp	/^	int		m_iStopwordStep;$/;"	m	class:TokenFunctorTraits_c	file:
m_iStopwords	sphinx.cpp	/^	int					m_iStopwords;	\/\/\/< stopwords count$/;"	m	struct:CSphDictCRCTraits	file:
m_iStoredLen	sphinx.cpp	/^	int								m_iStoredLen;$/;"	m	class:CSphTokenizer_Filter	file:
m_iStoredStart	sphinx.cpp	/^	int								m_iStoredStart;$/;"	m	class:CSphTokenizer_Filter	file:
m_iStride	sphinx.cpp	/^	int m_iStride;$/;"	m	struct:DocinfoSort_fn	file:
m_iStride	sphinx.cpp	/^	static int		m_iStride;$/;"	m	struct:CmpQueuedDocinfo_fn	file:
m_iStride	sphinx.cpp	/^int			CmpQueuedDocinfo_fn::m_iStride		= 1;$/;"	m	class:CmpQueuedDocinfo_fn	file:
m_iStride	sphinxsearch.cpp	/^	int							m_iStride;		\/\/\/< docinfo stride (for inline mode only)$/;"	m	class:ExtNode_i	file:
m_iStride	tests.cpp	/^	int m_iStride;$/;"	m	struct:TestAccCmp_fn	file:
m_iStripLen	spelldump.cpp	/^	int			m_iStripLen;$/;"	m	class:CISpellAffixRule	file:
m_iSuccesses	sphinx.h	/^	int						m_iSuccesses;$/;"	m	class:CSphQueryResult
m_iTID	sphinx.h	/^	int64_t						m_iTID;$/;"	m	class:CSphIndex
m_iTag	searchd.cpp	/^	int							m_iTag;				\/\/\/< current tag$/;"	m	struct:AggrResult_t	file:
m_iTag	sphinx.cpp	/^		int					m_iTag;					\/\/\/< tag value$/;"	m	struct:CSphArena::TagDesc_t	file:
m_iTag	sphinx.cpp	/^	int			m_iTag;$/;"	m	struct:MvaEntryTag_t	file:
m_iTag	sphinx.cpp	/^	int	m_iTag;$/;"	m	struct:OrdinalEntry_t	file:
m_iTag	sphinx.cpp	/^	int	m_iTag;$/;"	m	struct:OrdinalIdEntry_t	file:
m_iTag	sphinx.h	/^	int						m_iTag;			\/\/\/< my index tag$/;"	m	class:CSphMatch
m_iTagLen	sphinx.h	/^		int						m_iTagLen;		\/\/\/< tag name length$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_iTagLength	sphinx.h	/^	int				m_iTagLength;		\/\/\/< tag name length$/;"	m	class:CSphSource_XMLPipe
m_iTagQword	sphinxsearch.cpp	/^		int m_iTagQword;$/;"	m	struct:FSMphrase::State_t	file:
m_iTermPos	sphinxsearch.h	/^	int				m_iTermPos;$/;"	m	class:ISphQword
m_iThresh	sphinxsearch.cpp	/^	int							m_iThresh;			\/\/\/< keyword count threshold$/;"	m	class:ExtQuorum_c	file:
m_iTimeoutsConnect	searchd.cpp	/^	int64_t		m_iTimeoutsConnect;	\/\/\/< number of time-outed connections$/;"	m	struct:AgentStats_t	file:
m_iTimeoutsQuery	searchd.cpp	/^	int64_t		m_iTimeoutsQuery;	\/\/\/< number of time-outed queries$/;"	m	struct:AgentStats_t	file:
m_iTmpFD	sphinx.cpp	/^	int								m_iTmpFD;			\/\/\/< temp dict file descriptor$/;"	m	class:CSphDictKeywords	file:
m_iToLen	sphinx.cpp	/^	int			m_iToLen;	\/\/\/< cached m_sTo length$/;"	m	struct:CSphSynonym	file:
m_iToken	sphinxexcerpt.cpp	/^	int			m_iToken;$/;"	m	class:ISnippetsQword	file:
m_iToken	sphinxexpr.cpp	/^	int				m_iToken;	\/\/\/< token type, including operators$/;"	m	struct:ExprNode_t	file:
m_iTokenLen	sphinx.cpp	/^		int				m_iTokenLen;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_iTokens	sphinxexcerpt.cpp	/^		int					m_iTokens;			\/\/\/< token count$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iTotal	searchd.cpp	/^	int64_t						m_iTotal;$/;"	m	struct:SnippetWorker_t	file:
m_iTotal	sphinx.h	/^	int64_t				m_iTotal;$/;"	m	class:ISphMatchSorter
m_iTotalBytes	sphinx.h	/^	int64_t			m_iTotalBytes;		\/\/\/< how much bytes$/;"	m	struct:CSphSourceStats
m_iTotalCP	sphinxexcerpt.cpp	/^	int						m_iTotalCP;$/;"	m	class:ExcerptGen_c	file:
m_iTotalDocuments	sphinx.h	/^	int64_t			m_iTotalDocuments;	\/\/\/< how much documents$/;"	m	struct:CSphSourceStats
m_iTotalMatches	sphinx.h	/^	int64_t					m_iTotalMatches;	\/\/\/< total matches found (unlimited)$/;"	m	class:CSphQueryResultMeta
m_iType	searchd.cpp	/^	int						m_iType;$/;"	m	struct:SqlInsert_t	file:
m_iType	sphinx.h	/^	int					m_iType;$/;"	m	struct:CSphTokenizerSettings
m_iUnexpectedClose	searchd.cpp	/^	int64_t		m_iUnexpectedClose;	\/\/\/< agent closed the connection$/;"	m	struct:AgentStats_t	file:
m_iUsed	sphinx.cpp	/^		int					m_iUsed;				\/\/\/< usage count$/;"	m	struct:CSphArena::PageDesc_t	file:
m_iUsed	sphinx.cpp	/^		int					m_iUsed;$/;"	m	struct:CSphArena::AllocsLogEntry_t	file:
m_iUsed	sphinx.cpp	/^	int						m_iUsed;$/;"	m	struct:CSphHitQueue	file:
m_iUsed	sphinx.cpp	/^	int		m_iUsed;$/;"	m	class:CSphQueue	file:
m_iUsed	sphinxsort.cpp	/^	int							m_iUsed;$/;"	m	class:CSphMatchQueueTraits	file:
m_iUsed	sphinxstd.h	/^	int		m_iUsed;$/;"	m	class:CSphStringBuilder
m_iUserCount	sphinxexpr.cpp	/^	int					m_iUserCount;	\/\/\/< number of active users currently working this function$/;"	m	struct:UdfFunc_t	file:
m_iVal	searchd.cpp	/^	int64_t					m_iVal;$/;"	m	struct:SqlInsert_t	file:
m_iValue	searchd.cpp	/^	int64_t					m_iValue;$/;"	m	struct:SqlNode_t	file:
m_iValue	sphinx.cpp	/^	int64_t		m_iValue;$/;"	m	struct:MvaEntry_t	file:
m_iValue	sphinx.h	/^	int			m_iValue;$/;"	m	struct:CSphNamedInt
m_iValue	sphinxexpr.cpp	/^	int m_iValue;$/;"	m	struct:Expr_GetIntConst_c	file:
m_iValue	sphinxexpr.cpp	/^	int64_t m_iValue;$/;"	m	struct:Expr_GetInt64Const_c	file:
m_iValue	sphinxsearch.cpp	/^	int m_iValue;$/;"	m	struct:Expr_GetIntConst_c	file:
m_iValue	sphinxstd.h	/^	int				m_iValue;$/;"	m	struct:CSphVariant
m_iValueCount	sphinxfilter.cpp	/^	int					m_iValueCount;$/;"	m	struct:IFilter_Values	file:
m_iWall	searchd.cpp	/^	int64_t			m_iWall;		\/\/\/< wall time spent vs this agent$/;"	m	struct:AgentConn_t	file:
m_iWarnings	sphinxutils.h	/^	int					m_iWarnings;$/;"	m	class:CSphConfigParser
m_iWeight	sphinx.h	/^	int						m_iWeight;		\/\/\/< my computed weight$/;"	m	class:CSphMatch
m_iWeight	sphinxexcerpt.cpp	/^		int					m_iWeight;		\/\/\/< token weight$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_iWeights	sphinx.h	/^	int				m_iWeights;		\/\/\/< number of user-supplied weights. missing fields will be assigned weight 1. default is 0$/;"	m	class:CSphQuery
m_iWeights	sphinxint.h	/^	int							m_iWeights;						\/\/\/< search query field weights count$/;"	m	class:CSphQueryContext
m_iWeights	sphinxsearch.cpp	/^	int				m_iWeights;$/;"	m	class:ExtRanker_WeightSum_c	file:
m_iWindowSize	sphinxsearch.cpp	/^	int					m_iWindowSize;$/;"	m	struct:RankerState_Expr_fn	file:
m_iWord	sphinxexcerpt.cpp	/^		int		m_iWord;$/;"	m	struct:ExcerptGen_c::Keyword_t	file:
m_iWordID	sphinx.cpp	/^		SphWordID_t		m_iWordID;$/;"	m	union:CSphWordlistCheckpoint::__anon17	file:
m_iWordID	sphinx.cpp	/^	SphWordID_t			m_iWordID;$/;"	m	struct:CSphWordlistCheckpoint_v10	file:
m_iWordID	sphinx.cpp	/^	SphWordID_t		m_iWordID;		\/\/\/< word ID in current dictionary$/;"	m	struct:CSphAggregateHit	file:
m_iWordID	sphinx.cpp	/^	SphWordID_t		m_iWordID;$/;"	m	class:CSphDictReader	file:
m_iWordID	sphinx.h	/^	SphWordID_t		m_iWordID;		\/\/\/< word ID in current dictionary$/;"	m	struct:CSphWordHit
m_iWordID	sphinxexcerpt.cpp	/^		SphWordID_t			m_iWordID;		\/\/\/< token word ID from dictionary$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_iWordID	sphinxsearch.h	/^	SphWordID_t		m_iWordID;		\/\/\/< word ID, from dictionary$/;"	m	class:ISphQword
m_iWordLen	spelldump.cpp	/^	int			m_iWordLen;$/;"	m	class:CISpellAffixRule	file:
m_iWordLength	sphinxexcerpt.cpp	/^	int			m_iWordLength;$/;"	m	class:ISnippetsQword	file:
m_iWordPos	sphinx.cpp	/^	Hitpos_t		m_iWordPos;		\/\/\/< word position in current document, or hit count in case of aggregate hit$/;"	m	struct:CSphAggregateHit	file:
m_iWordPos	sphinx.h	/^	Hitpos_t		m_iWordPos;		\/\/\/< word position in current document$/;"	m	struct:CSphWordHit
m_iWordPos	sphinx.h	/^	int				m_iWordPos;			\/\/\/< current word position$/;"	m	class:CSphSource_XMLPipe
m_iWordlistOffset	sphinx.cpp	/^	DWORD				m_iWordlistOffset;$/;"	m	struct:CSphWordlistCheckpoint_v10	file:
m_iWordlistOffset	sphinx.cpp	/^	SphOffset_t			m_iWordlistOffset;$/;"	m	struct:CSphWordlistCheckpoint	file:
m_iWords	sphinx.h	/^	int				m_iWords;		\/\/\/< PHASE_MERGE: words merged so far$/;"	m	struct:CSphIndexProgress
m_iWords	sphinxexcerpt.cpp	/^		int					m_iWords;			\/\/\/< words count$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_iWords	sphinxexcerpt.cpp	/^		int		m_iWords;	\/\/\/< number of TOK_WORDS tokens$/;"	m	struct:ExcerptGen_c::TokenSpan_t	file:
m_iWriteBuffer	sphinx.cpp	/^	int							m_iWriteBuffer;		\/\/\/< my write buffer size$/;"	m	class:CSphIndex_VLN	file:
m_iWriteBytes	sphinx.h	/^	int64_t		m_iWriteBytes;$/;"	m	class:CSphIOStats
m_iWriteOps	sphinx.h	/^	DWORD		m_iWriteOps;$/;"	m	class:CSphIOStats
m_iWriteTime	sphinx.h	/^	int64_t		m_iWriteTime;$/;"	m	class:CSphIOStats
m_iWritten	sphinxint.h	/^	SphOffset_t		m_iWritten;$/;"	m	class:CSphWriter
m_iWrongReplies	searchd.cpp	/^	int64_t		m_iWrongReplies;	\/\/\/< incomplete reply$/;"	m	struct:AgentStats_t	file:
m_iZone	sphinxsearch.cpp	/^	int				m_iZone;$/;"	m	struct:ZoneKey_t	file:
m_nRemove	sphinxstemcz.cpp	/^	int		m_nRemove;$/;"	m	struct:ClampRule_t	file:
m_nResultCols	sphinx.h	/^	int						m_nResultCols;$/;"	m	struct:CSphSource_ODBC
m_nValues	sphinx.h	/^	int					m_nValues;		\/\/\/< external array size$/;"	m	class:CSphFilterSettings
m_pAccum	sphinx.cpp	/^	BYTE *				m_pAccum;							\/\/\/< current accumulator position$/;"	m	class:CSphTokenizerTraits	file:
m_pAnchorLat	sphinxexpr.cpp	/^	ISphExpr *	m_pAnchorLat;$/;"	m	class:Expr_Geodist_c	file:
m_pAnchorLon	sphinxexpr.cpp	/^	ISphExpr *	m_pAnchorLon;$/;"	m	class:Expr_Geodist_c	file:
m_pArena	sphinx.cpp	/^	CSphSharedBuffer<DWORD>	m_pArena;			\/\/\/< arena that stores everything (all other pointers point here)$/;"	m	class:CSphArena	file:
m_pArg	sphinxexpr.cpp	/^	ISphExpr *			m_pArg;$/;"	m	class:Expr_ArgVsSet_c	file:
m_pArg	sphinxsearch.cpp	/^	ISphExpr *				m_pArg;$/;"	m	struct:Expr_Sum_c	file:
m_pArg1	sphinxsearch.cpp	/^	ExtNode_i *			m_pArg1;				\/\/\/< left arg$/;"	m	class:ExtUnit_c	file:
m_pArg2	sphinxsearch.cpp	/^	ExtNode_i *			m_pArg2;				\/\/\/< right arg$/;"	m	class:ExtUnit_c	file:
m_pAssociations	sphinxquery.cpp	/^	const Associations_t *	m_pAssociations;$/;"	m	class:BitAssociation_t	file:
m_pAttrsStatus	sphinx.cpp	/^	DWORD *						m_pAttrsStatus;$/;"	m	class:CSphIndex_VLN	file:
m_pBase	sphinx.cpp	/^	CSphDict *				m_pBase;$/;"	m	class:CRtDictKeywords	file:
m_pBasePtr	sphinx.cpp	/^	DWORD *					m_pBasePtr;			\/\/\/< base data storage pointer$/;"	m	class:CSphArena	file:
m_pBlendEnd	sphinx.cpp	/^	BYTE *	m_pBlendEnd;$/;"	m	class:CSphTokenizerTraits	file:
m_pBlendStart	sphinx.cpp	/^	BYTE *	m_pBlendStart;$/;"	m	class:CSphTokenizerTraits	file:
m_pBuf	searchd.cpp	/^	char * m_pBuf;$/;"	m	class:SqlRowBuffer_c	file:
m_pBuf	searchd.cpp	/^	const BYTE *	m_pBuf;$/;"	m	class:InputBuffer_c	file:
m_pBuf	searchd.cpp	/^	const char *	m_pBuf;$/;"	m	struct:SqlParser_c	file:
m_pBuf	sphinx.cpp	/^	CSphSharedBuffer<BYTE>				m_pBuf;					\/\/\/< my cache$/;"	m	class:CWordlist	file:
m_pBuf	sphinxint.h	/^	BYTE * m_pBuf;$/;"	m	struct:ExpansionContext_t
m_pBuf	sphinxsort.cpp	/^	char * m_pBuf;$/;"	m	class:SortClauseTokenizer_t	file:
m_pBuff	sphinxint.h	/^	BYTE *		m_pBuff;$/;"	m	class:CSphReader
m_pBuffer	searchd.cpp	/^	BYTE *		m_pBuffer;			\/\/\/< my current buffer position$/;"	m	class:NetOutputBuffer_c	file:
m_pBuffer	sphinx.cpp	/^	BYTE *				m_pBuffer;							\/\/\/< my buffer$/;"	m	class:CSphTokenizerTraits	file:
m_pBuffer	sphinx.cpp	/^	BYTE *			m_pBuffer;$/;"	m	class:CSphSource_XMLPipe2	file:
m_pBuffer	sphinx.h	/^	BYTE *			m_pBuffer;			\/\/\/< current buffer pos$/;"	m	class:CSphSource_XMLPipe
m_pBuffer	sphinxint.h	/^	BYTE *			m_pBuffer;$/;"	m	class:CSphWriter
m_pBufferEnd	sphinx.cpp	/^	BYTE *			m_pBufferEnd;$/;"	m	class:CSphSource_XMLPipe2	file:
m_pBufferEnd	sphinx.h	/^	BYTE *			m_pBufferEnd;		\/\/\/< buffered end pos$/;"	m	class:CSphSource_XMLPipe
m_pBufferMax	sphinx.cpp	/^	BYTE *				m_pBufferMax;						\/\/\/< max buffer ptr, exclusive (ie. this ptr is invalid, but every ptr below is ok)$/;"	m	class:CSphTokenizerTraits	file:
m_pBufferPtr	sphinx.cpp	/^		const char *	m_pBufferPtr;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_pBufferPtr	sphinx.cpp	/^	BYTE *			m_pBufferPtr;$/;"	m	class:CSphSource_XMLPipe2	file:
m_pCall	sphinxexpr.cpp	/^	UdfCall_t *						m_pCall;$/;"	m	class:Expr_Udf_c	file:
m_pChild	sphinxsearch.cpp	/^	ExtNode_i *					m_pChild;			\/\/\/< pointer to donor for the sake of AtomPos procession$/;"	m	class:ExtNodeCached_t	file:
m_pChildren	sphinxsearch.cpp	/^	ExtNode_i *					m_pChildren[2];$/;"	m	class:ExtTwofer_c	file:
m_pChunk	sphinx.h	/^	int *				m_pChunk [ CHUNK_COUNT ];	\/\/\/< pointers to non-empty chunks$/;"	m	class:CSphLowercaser
m_pComp	sphinxsort.cpp	/^	const ISphMatchComparator *	m_pComp;$/;"	m	class:CSphKBufferGroupSorter	file:
m_pConsts	sphinxexpr.cpp	/^		ConstList_c *	m_pConsts;		\/\/\/< constants list, for TOK_CONST_LIST type$/;"	m	union:ExprNode_t::__anon16	file:
m_pConsts	sphinxexpr.cpp	/^	UservarIntSet_c * m_pConsts;$/;"	m	class:Expr_InUservar_c	file:
m_pCtx	sphinxsearch.cpp	/^	CSphQueryContext *			m_pCtx;$/;"	m	class:ExtRanker_c	file:
m_pCtx	sphinxsearch.h	/^	CSphQueryContext *		m_pCtx;$/;"	m	class:ISphQwordSetup
m_pCur	searchd.cpp	/^	const BYTE *	m_pCur;$/;"	m	class:InputBuffer_c	file:
m_pCur	sphinx.cpp	/^	BYTE *				m_pCur;								\/\/\/< current position$/;"	m	class:CSphTokenizerTraits	file:
m_pCur	sphinx.cpp	/^	const char *	m_pCur;$/;"	m	class:SelectParser_t	file:
m_pCur	sphinxexpr.cpp	/^	const char *			m_pCur;$/;"	m	class:ExprParser_t	file:
m_pCur	sphinxquery.cpp	/^	const char *			m_pCur;$/;"	m	class:XQParser_t	file:
m_pCur	sphinxsort.cpp	/^	char * m_pCur;$/;"	m	class:SortClauseTokenizer_t	file:
m_pCurDoc	sphinxsearch.cpp	/^	CSphVector<const ExtDoc_t*>	m_pCurDoc;			\/\/\/< current positions into children doclists$/;"	m	class:ExtQuorum_c	file:
m_pCurDoc	sphinxsearch.cpp	/^	const ExtDoc_t *			m_pCurDoc[2];$/;"	m	class:ExtTwofer_c	file:
m_pCurDocument	sphinx.cpp	/^	Document_t *				m_pCurDocument;$/;"	m	class:CSphSource_XMLPipe2	file:
m_pCurHit	sphinxsearch.cpp	/^	CSphVector<const ExtHit_t*>	m_pCurHit;			\/\/\/< current positions into children hitlists$/;"	m	class:ExtQuorum_c	file:
m_pCurHit	sphinxsearch.cpp	/^	const ExtHit_t *			m_pCurHit[2];$/;"	m	class:ExtTwofer_c	file:
m_pCurQuery	searchd.cpp	/^	volatile int *				m_pCurQuery;$/;"	m	struct:SnippetThread_t	file:
m_pCurrent	sphinx.cpp	/^	BYTE *				m_pCurrent;$/;"	m	struct:CSphBin	file:
m_pCurrent	sphinx.cpp	/^	const char *		m_pCurrent;$/;"	m	class:CSphCharsetDefinitionParser	file:
m_pData	indexer.cpp	/^	CSphMTFHashEntry<T> **	m_pData;$/;"	m	class:CSphMTFHash	file:
m_pData	sphinx.cpp	/^	CSphHitQueueEntry *		m_pData;$/;"	m	struct:CSphHitQueue	file:
m_pData	sphinx.cpp	/^	T *		m_pData;$/;"	m	class:CSphAutoArray	file:
m_pData	sphinx.cpp	/^	T *		m_pData;$/;"	m	class:CSphQueue	file:
m_pData	sphinx.h	/^	int *				m_pData;					\/\/\/< chunks themselves$/;"	m	class:CSphLowercaser
m_pData	sphinxsearch.cpp	/^	const DWORD *	m_pData;$/;"	m	struct:Expr_FieldFactor_c	file:
m_pData	sphinxsearch.cpp	/^	const T *		m_pData;$/;"	m	struct:Expr_FieldFactor_c	file:
m_pData	sphinxsort.cpp	/^	CSphMatch *					m_pData;$/;"	m	class:CSphMatchQueueTraits	file:
m_pData	sphinxstd.h	/^	DWORD *		m_pData;$/;"	m	class:CSphBitvec
m_pData	sphinxstd.h	/^	T *					m_pData;	\/\/\/< data storage$/;"	m	class:CSphSharedBuffer
m_pData	sphinxstd.h	/^	T *			m_pData;$/;"	m	class:CSphFixedVector
m_pData	sphinxstd.h	/^	T *		m_pData;		\/\/\/< entries$/;"	m	class:CSphVector
m_pDict	searchd.cpp	/^	CSphDict * m_pDict;$/;"	m	class:SnippetContext_t	file:
m_pDict	sphinx.cpp	/^	CSphDict *		m_pDict;	\/\/\/< only used in dict=keywords case, NULL in dict=crc case$/;"	m	class:CSphDictReader	file:
m_pDict	sphinx.h	/^	CSphDict *							m_pDict;		\/\/\/< my dict$/;"	m	class:CSphSource
m_pDict	sphinx.h	/^	CSphDict *					m_pDict;$/;"	m	class:CSphIndex
m_pDict	sphinxexcerpt.cpp	/^	CSphDict *				m_pDict;$/;"	m	class:TokenFunctorTraits_c	file:
m_pDict	sphinxint.h	/^	CSphDict *			m_pDict;$/;"	m	class:CSphDictTraits
m_pDict	sphinxquery.cpp	/^	CSphDict *				m_pDict;$/;"	m	class:XQParser_t	file:
m_pDict	sphinxsearch.h	/^	CSphDict *				m_pDict;$/;"	m	class:ISphQwordSetup
m_pDictBuf	sphinx.cpp	/^	BYTE *					m_pDictBuf;$/;"	m	class:DiskIndexQwordSetup_c	file:
m_pDictChunk	sphinx.cpp	/^	DictKeyword_t *					m_pDictChunk;$/;"	m	class:CSphDictKeywords	file:
m_pDoc	sphinxexcerpt.cpp	/^	const char *			m_pDoc;$/;"	m	class:TokenFunctorTraits_c	file:
m_pDoc	sphinxsearch.cpp	/^	const ExtDoc_t *			m_pDoc;					\/\/\/< current doc from and-node$/;"	m	class:ExtNWayT	file:
m_pDoc1	sphinxsearch.cpp	/^	const ExtDoc_t *	m_pDoc1;		\/\/\/< current in-chunk ptr$/;"	m	class:ExtUnit_c	file:
m_pDoc2	sphinxsearch.cpp	/^	const ExtDoc_t *	m_pDoc2;		\/\/\/< current in-chunk ptr$/;"	m	class:ExtUnit_c	file:
m_pDocinfo	sphinx.cpp	/^	CSphSharedBuffer<DWORD>		m_pDocinfo;				\/\/\/< my docinfo cache$/;"	m	class:CSphIndex_VLN	file:
m_pDocinfo	sphinxsearch.cpp	/^	CSphRowitem *				m_pDocinfo;		\/\/\/< docinfo storage (for inline mode only)$/;"	m	class:ExtNode_i	file:
m_pDocinfo	sphinxsearch.cpp	/^	CSphRowitem *	m_pDocinfo;			\/\/\/< for inline storage only$/;"	m	struct:ExtDoc_t	file:
m_pDocinfoHash	sphinx.cpp	/^	CSphSharedBuffer<DWORD>		m_pDocinfoHash;			\/\/\/< hashed ids, to accelerate lookups$/;"	m	class:CSphIndex_VLN	file:
m_pDocinfoIndex	sphinx.cpp	/^	DWORD *						m_pDocinfoIndex;		\/\/\/< docinfo "index", to accelerate filtering during full-scan (2x rows for each block, and 2x rows for the whole index, 1+m_uDocinfoIndex entries)$/;"	m	class:CSphIndex_VLN	file:
m_pDoclist	sphinxsearch.cpp	/^	const ExtDoc_t *			m_pDoclist;$/;"	m	class:ExtRanker_c	file:
m_pDocs	sphinxsearch.cpp	/^	CSphVector<const ExtDoc_t*>	m_pDocs;		\/\/\/< current position in document chunk$/;"	m	class:ExtOrder_c	file:
m_pDocs	sphinxsearch.cpp	/^	const ExtDoc_t *			m_pDocs;				\/\/\/< current docs chunk from and-node$/;"	m	class:ExtNWayT	file:
m_pDocs1	sphinxsearch.cpp	/^	const ExtDoc_t *	m_pDocs1;		\/\/\/< last chunk start$/;"	m	class:ExtUnit_c	file:
m_pDocs2	sphinxsearch.cpp	/^	const ExtDoc_t *	m_pDocs2;		\/\/\/< last chunk start$/;"	m	class:ExtUnit_c	file:
m_pDocsChunk	sphinxsearch.cpp	/^	CSphVector<const ExtDoc_t*>	m_pDocsChunk;	\/\/\/< last document chunk (for hit fetching)$/;"	m	class:ExtOrder_c	file:
m_pDot	sphinxsearch.cpp	/^	ExtTerm_c *			m_pDot;					\/\/\/< dot positions$/;"	m	class:ExtUnit_c	file:
m_pDotDoc	sphinxsearch.cpp	/^	const ExtDoc_t *	m_pDotDoc;		\/\/\/< current in-chunk ptr$/;"	m	class:ExtUnit_c	file:
m_pDotDocs	sphinxsearch.cpp	/^	const ExtDoc_t *	m_pDotDocs;		\/\/\/< last chunk start$/;"	m	class:ExtUnit_c	file:
m_pDotHit	sphinxsearch.cpp	/^	const ExtHit_t *	m_pDotHit;		\/\/\/< current in-chunk ptr$/;"	m	class:ExtUnit_c	file:
m_pDst	searchd.cpp	/^	BYTE * m_pDst;$/;"	m	struct:QueryCopyState_t	file:
m_pDstEnd	searchd.cpp	/^	BYTE * m_pDstEnd;$/;"	m	struct:QueryCopyState_t	file:
m_pDynamic	sphinx.h	/^	CSphRowitem *			m_pDynamic;		\/\/\/< dynamic part (computed per query; owned by the match)$/;"	m	class:CSphMatch
m_pEntry	sphinx.cpp	/^		HitblockKeyword_t *			m_pEntry;			\/\/ hash entry$/;"	m	struct:CSphDictKeywords::HitblockException_t	file:
m_pEntryChunk	sphinx.cpp	/^	HitblockKeyword_t *				m_pEntryChunk;$/;"	m	class:CSphDictKeywords	file:
m_pError	sphinx.h	/^	CSphString *		m_pError;		\/\/\/< the error, if any$/;"	m	struct:CSphAttrUpdateEx
m_pError	sphinxint.h	/^	CSphString *	m_pError;$/;"	m	class:CSphWriter
m_pExc	sphinx.cpp	/^	const CSphDictKeywords::HitblockException_t * m_pExc;$/;"	m	struct:HitblockPatchSort_fn	file:
m_pExpr	sphinx.h	/^	CSphRefcountedPtr<ISphExpr>		m_pExpr;		\/\/\/< evaluator for expression items$/;"	m	struct:CSphColumnInfo
m_pExpr	sphinxint.h	/^		ISphExpr *				m_pExpr;				\/\/\/< evaluator (non-owned)$/;"	m	struct:CSphQueryContext::CalcItem_t
m_pExpr	sphinxsearch.cpp	/^	ISphExpr *			m_pExpr;$/;"	m	struct:RankerState_Expr_fn	file:
m_pExtra	sphinxexpr.cpp	/^	CSphSchema *			m_pExtra;$/;"	m	class:ExprParser_t	file:
m_pFieldBuffer	sphinx.cpp	/^	BYTE * 			m_pFieldBuffer;$/;"	m	class:CSphSource_XMLPipe2	file:
m_pFilePos	sphinx.cpp	/^	SphOffset_t *		m_pFilePos;		\/\/\/< shared current offset in file$/;"	m	struct:CSphBin	file:
m_pFilter	sphinxfilter.cpp	/^	ISphFilter * m_pFilter;$/;"	m	struct:Filter_Not	file:
m_pFilter	sphinxint.h	/^	ISphFilter *				m_pFilter;$/;"	m	class:CSphQueryContext
m_pFirst	sphinxexpr.cpp	/^	ISphExpr * m_pFirst;$/;"	m	struct:Expr_Unary_c	file:
m_pFirstByOrder	sphinxstd.h	/^	HashEntry_t *	m_pFirstByOrder;		\/\/\/< first entry in the insertion order$/;"	m	class:CSphOrderedHash
m_pFreelistHeads	sphinx.cpp	/^	int *					m_pFreelistHeads;	\/\/\/< free-list heads$/;"	m	class:CSphArena	file:
m_pGenerator	sphinxexcerpt.cpp	/^	ExcerptGen_c *		m_pGenerator;$/;"	m	class:SnippetsQwordSetup	file:
m_pGrouper	sphinxsort.cpp	/^	CSphGrouper *		m_pGrouper;			\/\/\/< group key calculator$/;"	m	struct:CSphGroupSorterSettings	file:
m_pGrouper	sphinxsort.cpp	/^	CSphGrouper *	m_pGrouper;$/;"	m	class:CSphKBufferGroupSorter	file:
m_pHandle	sphinxexpr.cpp	/^	void *				m_pHandle;	\/\/\/< handle from dlopen()$/;"	m	struct:UdfLib_t	file:
m_pHandler	searchd.cpp	/^	SearchHandler_c *			m_pHandler;$/;"	m	struct:LocalSearchThreadContext_t	file:
m_pHash	searchd.cpp	/^	const IndexHash_c *			m_pHash;$/;"	m	class:IndexHashIterator_c	file:
m_pHiglighter	sphinxexcerpt.cpp	/^	const HitCollector_c * m_pHiglighter;$/;"	m	class:SnippetsFastQwordSetup_c	file:
m_pHit	sphinxexcerpt.cpp	/^	const SphHitMark_t * m_pHit;$/;"	m	class:HighlightQuery_c	file:
m_pHit	sphinxsearch.cpp	/^	const ExtHit_t *			m_pHit;					\/\/\/< current hit from and-node$/;"	m	class:ExtNWayT	file:
m_pHit1	sphinxsearch.cpp	/^	const ExtHit_t *	m_pHit1;		\/\/\/< current in-chunk ptr$/;"	m	class:ExtUnit_c	file:
m_pHit2	sphinxsearch.cpp	/^	const ExtHit_t *	m_pHit2;		\/\/\/< current in-chunk ptr$/;"	m	class:ExtUnit_c	file:
m_pHitDoc	sphinxsearch.cpp	/^	ExtDoc_t *					m_pHitDoc;			\/\/\/< points to entry in m_dDocs which GetHitsChunk() currently emits hits for$/;"	m	class:ExtNodeCached_t	file:
m_pHitDoc	sphinxsearch.cpp	/^	ExtDoc_t *					m_pHitDoc;			\/\/\/< points to entry in m_dDocs which GetHitsChunk() currently emits hits for$/;"	m	class:ExtTerm_c	file:
m_pHitEnd	sphinxexcerpt.cpp	/^	const SphHitMark_t * m_pHitEnd;$/;"	m	class:HighlightQuery_c	file:
m_pHitlist	sphinxsearch.cpp	/^	const ExtHit_t *			m_pHitlist;$/;"	m	class:ExtRanker_c	file:
m_pHits	sphinxexcerpt.cpp	/^	const CSphVector<int> *		m_pHits;$/;"	m	class:SnippetsFastQword_c	file:
m_pHits	sphinxsearch.cpp	/^	CSphVector<const ExtHit_t*>	m_pHits;		\/\/\/< current position in hits chunk$/;"	m	class:ExtOrder_c	file:
m_pHits	sphinxsearch.cpp	/^	const ExtHit_t *			m_pHits;				\/\/\/< current hits chunk from and-node$/;"	m	class:ExtNWayT	file:
m_pHook	sphinxexpr.cpp	/^	ISphExprHook *			m_pHook;$/;"	m	class:ExprParser_t	file:
m_pHook	sphinxexpr.cpp	/^	ISphExprHook * m_pHook;$/;"	m	struct:HookCheck_fn	file:
m_pIndex	searchd.cpp	/^	CSphIndex *					m_pIndex;$/;"	m	struct:SnippetThread_t	file:
m_pIndex	searchd.cpp	/^	CSphIndex *			m_pIndex;$/;"	m	struct:ServedDesc_t	file:
m_pIndex	sphinx.h	/^	CSphIndex *			m_pIndex;		\/\/\/< the index on which the update should happen$/;"	m	struct:CSphAttrUpdateEx
m_pIndex	sphinxsearch.cpp	/^	const CSphIndex *			m_pIndex;							\/\/\/< this is he who'll do my filtering!$/;"	m	class:ExtRanker_c	file:
m_pIndex	sphinxsearch.cpp	/^	const int *		m_pIndex;$/;"	m	struct:Expr_FieldFactor_c	file:
m_pIndex	sphinxsearch.h	/^	const CSphIndex *		m_pIndex;$/;"	m	class:ISphQwordSetup
m_pIndexData	sphinxint.h	/^	void *						m_pIndexData;			\/\/\/< backend specific data$/;"	m	class:CSphQueryContext
m_pInlineFixup	sphinx.cpp	/^	CSphRowitem *	m_pInlineFixup;	\/\/\/< inline attributes fixup (POINTER TO EXTERNAL DATA, NOT MANAGED BY THIS CLASS!)$/;"	m	class:DiskIndexQwordTraits_c	file:
m_pIterator	searchd.cpp	/^	IndexHash_c::HashEntry_t *	m_pIterator;$/;"	m	class:IndexHashIterator_c	file:
m_pIterator	sphinxstd.h	/^	mutable HashEntry_t *	m_pIterator;$/;"	m	class:CSphOrderedHash
m_pKeyword	sphinx.cpp	/^		char *						m_pKeyword;			\/\/ keyword$/;"	m	struct:CSphDictKeywords::HitblockKeyword_t	file:
m_pKeywordChunk	sphinx.cpp	/^	BYTE *							m_pKeywordChunk;$/;"	m	class:CSphDictKeywords	file:
m_pKillList	sphinx.cpp	/^	CSphSharedBuffer<SphAttr_t>	m_pKillList;			\/\/\/< killlist$/;"	m	class:CSphIndex_VLN	file:
m_pLastByOrder	sphinxstd.h	/^	HashEntry_t *	m_pLastByOrder;			\/\/\/< last entry in the insertion order$/;"	m	class:CSphOrderedHash
m_pLastToken	sphinx.cpp	/^	StoredToken_t *					m_pLastToken;$/;"	m	class:CSphTokenizer_Filter	file:
m_pLastTokenStart	searchd.cpp	/^	const char *	m_pLastTokenStart;$/;"	m	struct:SqlParser_c	file:
m_pLastTokenStart	sphinx.cpp	/^	const char *	m_pLastTokenStart;$/;"	m	class:SelectParser_t	file:
m_pLastTokenStart	sphinxexpr.cpp	/^	const char *			m_pLastTokenStart;$/;"	m	class:ExprParser_t	file:
m_pLastTokenStart	sphinxquery.cpp	/^	const char *			m_pLastTokenStart;$/;"	m	class:XQParser_t	file:
m_pLat	sphinxexpr.cpp	/^	ISphExpr *	m_pLat;$/;"	m	class:Expr_GeodistConst_c	file:
m_pLat	sphinxexpr.cpp	/^	ISphExpr *	m_pLat;$/;"	m	class:Expr_Geodist_c	file:
m_pLib	sphinxexpr.cpp	/^	UdfLib_t *			m_pLib;			\/\/\/< library descriptor (pointer to library hash value)$/;"	m	struct:UdfFunc_t	file:
m_pLibName	sphinxexpr.cpp	/^	const CSphString *	m_pLibName;		\/\/\/< library name (pointer to library hash key)$/;"	m	struct:UdfFunc_t	file:
m_pLock	searchd.cpp	/^	CSphMutex *					m_pLock;$/;"	m	struct:SnippetThread_t	file:
m_pLock	searchd.cpp	/^	const CSphSchemaMT * m_pLock;$/;"	m	class:UnlockOnDestroy	file:
m_pLock	searchd.cpp	/^	mutable CSphRwlock * m_pLock;$/;"	m	class:CSphSchemaMT	file:
m_pLon	sphinxexpr.cpp	/^	ISphExpr *	m_pLon;$/;"	m	class:Expr_GeodistConst_c	file:
m_pLon	sphinxexpr.cpp	/^	ISphExpr *	m_pLon;$/;"	m	class:Expr_Geodist_c	file:
m_pMarker	sphinxexcerpt.cpp	/^	CSphHitMarker *			m_pMarker;$/;"	m	class:ExcerptGen_c	file:
m_pMax	sphinxsort.cpp	/^	char * m_pMax;$/;"	m	class:SortClauseTokenizer_t	file:
m_pMaxibuffer	searchd.cpp	/^	BYTE *				m_pMaxibuffer;$/;"	m	class:NetInputBuffer_c	file:
m_pMember	sphinxstd.h	/^	const T C::* m_pMember;$/;"	m	class:SphMemberLess_T::C
m_pMember	sphinxstd.h	/^	const T CLASS::*	m_pMember;$/;"	m	class:SphMemberFunctor_T::CLASS
m_pMin	sphinx.cpp	/^	CSphMatch *					m_pMin;				\/\/\/< min attribute values tracker$/;"	m	class:CSphIndex_VLN	file:
m_pMultiWordforms	sphinx.cpp	/^	CSphMultiformContainer * m_pMultiWordforms;$/;"	m	struct:WordformContainer_t	file:
m_pMultiWordforms	sphinx.cpp	/^	const CSphMultiformContainer *	m_pMultiWordforms;$/;"	m	class:CSphTokenizer_Filter	file:
m_pMutex	sphinxstd.h	/^	pthread_mutex_t *			m_pMutex;$/;"	m	class:CSphProcessSharedMutex
m_pMutex	sphinxstd.h	/^	sem_t *						m_pMutex;$/;"	m	class:CSphProcessSharedMutex
m_pMva	searchd.cpp	/^	const DWORD *	m_pMva;$/;"	m	struct:PoolPtrs_t	file:
m_pMva	sphinx.cpp	/^	CSphSharedBuffer<DWORD>		m_pMva;					\/\/\/< my multi-valued attrs cache$/;"	m	class:CSphIndex_VLN	file:
m_pMva	sphinx.h	/^	const DWORD *			m_pMva;				\/\/\/< pointer to MVA storage$/;"	m	class:CSphQueryResult
m_pMva	sphinxexpr.cpp	/^	const DWORD * m_pMva;$/;"	m	struct:Expr_GetMva_c	file:
m_pMva	sphinxsort.cpp	/^	const DWORD *		m_pMva;		\/\/\/< pointer to MVA pool for incoming matches$/;"	m	class:CSphKBufferMVAGroupSorter	file:
m_pMvaPool	sphinxexpr.cpp	/^	const DWORD *		m_pMvaPool;$/;"	m	class:Expr_MVAIn_c	file:
m_pMvaStorage	sphinxfilter.cpp	/^	const DWORD *	m_pMvaStorage;$/;"	m	struct:IFilter_MVA	file:
m_pMyDoc	sphinxsearch.cpp	/^	const ExtDoc_t *			m_pMyDoc;				\/\/\/< current doc for hits getter$/;"	m	class:ExtNWayT	file:
m_pMyHit	sphinxsearch.cpp	/^	const ExtHit_t *			m_pMyHit;				\/\/\/< current hit for hits getter$/;"	m	class:ExtNWayT	file:
m_pMysqlFields	sphinx.h	/^	MYSQL_FIELD *			m_pMysqlFields;$/;"	m	struct:CSphSource_MySQL
m_pMysqlLengths	sphinx.h	/^	unsigned long *			m_pMysqlLengths;$/;"	m	struct:CSphSource_MySQL
m_pMysqlResult	sphinx.h	/^	MYSQL_RES *				m_pMysqlResult;$/;"	m	struct:CSphSource_MySQL
m_pNext	indexer.cpp	/^	CSphMTFHashEntry<T> *	m_pNext;$/;"	m	struct:CSphMTFHashEntry	file:
m_pNext	sphinxstd.cpp	/^	CSphMemHeader *	m_pNext;$/;"	m	struct:CSphMemHeader	file:
m_pNext	sphinxstd.h	/^	CSphVariant *	m_pNext;$/;"	m	struct:CSphVariant
m_pNextByHash	sphinxstd.h	/^		HashEntry_t *	m_pNextByHash;		\/\/\/< next entry in hash list$/;"	m	struct:CSphOrderedHash::HashEntry_t
m_pNextByOrder	sphinxstd.h	/^		HashEntry_t *	m_pNextByOrder;		\/\/\/< next entry in the insertion order$/;"	m	struct:CSphOrderedHash::HashEntry_t
m_pNextHash	sphinx.cpp	/^		HitblockKeyword_t *			m_pNextHash;		\/\/ next hashed entry$/;"	m	struct:CSphDictKeywords::HitblockKeyword_t	file:
m_pNode	sphinxsearch.cpp	/^	ExtNode_i *					m_pNode;				\/\/\/< my and-node for all the terms$/;"	m	class:ExtNWayT	file:
m_pNode	sphinxsearch.cpp	/^	NodeCacheContainer_t *		m_pNode;$/;"	m	class:ExtNodeCached_t	file:
m_pNodeCache	sphinxsearch.cpp	/^	CSphQueryNodeCache *			m_pNodeCache;$/;"	m	class:NodeCacheContainer_t	file:
m_pNodeCache	sphinxsearch.h	/^	CSphQueryNodeCache *	m_pNodeCache;$/;"	m	class:ISphQwordSetup
m_pOldGroups	sphinx.h	/^	DWORD *			m_pOldGroups;		\/\/\/< 0.9.6 group filter values$/;"	m	class:CSphQuery
m_pOutBuffer	sphinxint.h	/^	DWORD *						m_pOutBuffer;	\/\/ storage for collected min\/max$/;"	m	class:AttrIndexBuilder_t
m_pOutMax	sphinxint.h	/^	DWORD *						m_pOutMax;		\/\/ storage max for bound checking$/;"	m	class:AttrIndexBuilder_t
m_pOutputIndex	sphinx.cpp	/^	CSphIndex_VLN * m_pOutputIndex;$/;"	m	class:CSphMerger	file:
m_pOverrides	sphinxint.h	/^	const CSphVector<CSphAttrOverride> *	m_pOverrides;		\/\/\/< overridden attribute values$/;"	m	class:CSphQueryContext
m_pPages	sphinx.cpp	/^	PageDesc_t *			m_pPages;			\/\/\/< page descriptors$/;"	m	class:CSphArena	file:
m_pParent	sphinxquery.h	/^	XQNode_t *				m_pParent;		\/\/\/< my parent node (NULL for root ones)$/;"	m	struct:XQNode_t
m_pParseError	searchd.cpp	/^	CSphString *	m_pParseError;$/;"	m	struct:SqlParser_c	file:
m_pParsed	sphinxquery.cpp	/^	XQQuery_t *				m_pParsed;$/;"	m	class:XQParser_t	file:
m_pParser	sphinx.cpp	/^	XML_Parser		m_pParser;$/;"	m	class:CSphSource_XMLPipe2	file:
m_pParser	sphinx.cpp	/^	xmlTextReaderPtr m_pParser;$/;"	m	class:CSphSource_XMLPipe2	file:
m_pPgResult	sphinx.h	/^	PGresult * 				m_pPgResult;	\/\/\/< postgresql execution restult context$/;"	m	struct:CSphSource_PgSQL
m_pPipe	sphinx.cpp	/^	FILE *			m_pPipe;			\/\/\/< incoming stream$/;"	m	class:CSphSource_XMLPipe2	file:
m_pPipe	sphinx.h	/^	FILE *			m_pPipe;			\/\/\/< incoming stream$/;"	m	class:CSphSource_XMLPipe
m_pPool	sphinxint.h	/^	BYTE *			m_pPool;$/;"	m	class:CSphWriter
m_pPool	sphinxsearch.h	/^	class NodeCacheContainer_t *	m_pPool;$/;"	m	class:CSphQueryNodeCache	typeref:class:CSphQueryNodeCache::NodeCacheContainer_t
m_pPreread	sphinx.cpp	/^	DWORD *						m_pPreread;$/;"	m	class:CSphIndex_VLN	file:
m_pPrev	sphinx.h	/^	CSphIOStats * m_pPrev;$/;"	m	class:CSphIOStats
m_pPrev	sphinxstd.cpp	/^	CSphMemHeader *	m_pPrev;$/;"	m	struct:CSphMemHeader	file:
m_pPrevByOrder	sphinxstd.h	/^		HashEntry_t *	m_pPrevByOrder;		\/\/\/< prev entry in the insertion order$/;"	m	struct:CSphOrderedHash::HashEntry_t
m_pProgress	sphinx.h	/^	ProgressCallback_t *		m_pProgress;$/;"	m	class:CSphIndex
m_pProgress	sphinxint.h	/^	CSphIndex::ProgressCallback_t *		m_pProgress; \/\/\/< for displaying progress$/;"	m	class:CSphAutofile
m_pPtr	sphinxstd.h	/^	T *				m_pPtr;$/;"	m	class:CSphRefcountedPtr
m_pPtr	sphinxstd.h	/^	T *				m_pPtr;$/;"	m	class:CSphScopedPtr
m_pQueries	searchd.cpp	/^	ExcerptQuery_t *			m_pQueries;$/;"	m	struct:SnippetThread_t	file:
m_pQuery	searchd.cpp	/^	CSphQuery *		m_pQuery;$/;"	m	struct:SqlParser_c	file:
m_pQuery	searchd.cpp	/^	const BYTE *			m_pQuery;	\/\/ last query$/;"	m	struct:CrashQuery_t	file:
m_pQuery	sphinx.cpp	/^	CSphQuery *		m_pQuery;$/;"	m	class:SelectParser_t	file:
m_pQueryTokenizer	searchd.cpp	/^	ISphTokenizer * m_pQueryTokenizer;$/;"	m	class:SnippetContext_t	file:
m_pQword	sphinxsearch.cpp	/^	ISphQword *					m_pQword;$/;"	m	class:ExtTerm_c	file:
m_pRawDoc	sphinxsearch.cpp	/^	const ExtDoc_t *			m_pRawDoc;					\/\/\/< current position in raw docs chunk$/;"	m	class:ExtTermPos_c	file:
m_pRawDocs	sphinxsearch.cpp	/^	const ExtDoc_t *			m_pRawDocs;					\/\/\/< chunk start as returned by raw GetDocsChunk() (need to store it for raw GetHitsChunk() calls)$/;"	m	class:ExtTermPos_c	file:
m_pRawHit	sphinxsearch.cpp	/^	const ExtHit_t *			m_pRawHit;					\/\/\/< current position in raw hits chunk$/;"	m	class:ExtTermPos_c	file:
m_pReadFileBuffer	sphinx.h	/^	char *					m_pReadFileBuffer;$/;"	m	class:CSphSource_Document
m_pReplyBuf	searchd.cpp	/^	BYTE *			m_pReplyBuf;	\/\/\/< reply buffer$/;"	m	struct:AgentConn_t	file:
m_pRes	sphinxexpr.cpp	/^	bool * m_pRes;$/;"	m	struct:WeightCheck_fn	file:
m_pResult	sphinxint.h	/^	CSphQueryResultMeta * m_pResult;$/;"	m	struct:ExpansionContext_t
m_pRoot	sphinxquery.cpp	/^	XQNode_t *				m_pRoot;$/;"	m	class:XQParser_t	file:
m_pRoot	sphinxquery.h	/^	XQNode_t *				m_pRoot;$/;"	m	struct:XQQuery_t
m_pRoot	sphinxsearch.cpp	/^	ExtNode_i *					m_pRoot;$/;"	m	class:ExtRanker_c	file:
m_pRoot	sphinxsearch.h	/^	class ExtNode_i *		m_pRoot;$/;"	m	class:CSphHitMarker	typeref:class:CSphHitMarker::ExtNode_i
m_pScanner	searchd.cpp	/^	void *			m_pScanner;$/;"	m	struct:SqlParser_c	file:
m_pSchema	sphinxexpr.cpp	/^	const CSphSchema *		m_pSchema;$/;"	m	class:ExprParser_t	file:
m_pSchema	sphinxquery.cpp	/^	const CSphSchema *		m_pSchema;$/;"	m	class:XQParser_t	file:
m_pSchema	sphinxsearch.cpp	/^	const CSphSchema *	m_pSchema;$/;"	m	struct:RankerState_Expr_fn	file:
m_pSearches	searchd.cpp	/^	CSphVector<LocalSearch_t*>	m_pSearches;$/;"	m	struct:LocalSearchThreadContext_t	file:
m_pSetup	sphinxsearch.cpp	/^	const ISphQwordSetup *			m_pSetup;$/;"	m	class:NodeCacheContainer_t	file:
m_pSharedOffset	sphinxint.h	/^	SphOffset_t	*	m_pSharedOffset;$/;"	m	class:CSphWriter
m_pSize	searchd.cpp	/^	BYTE *		m_pSize;			\/\/\/< the pointer to the size of frozen block$/;"	m	class:NetOutputBuffer_c	file:
m_pSrc	searchd.cpp	/^	const BYTE * m_pSrc;$/;"	m	struct:QueryCopyState_t	file:
m_pSrcEnd	searchd.cpp	/^	const BYTE * m_pSrcEnd;$/;"	m	struct:QueryCopyState_t	file:
m_pStart	sphinx.cpp	/^	const char *	m_pStart;$/;"	m	class:SelectParser_t	file:
m_pStat	sphinxint.h	/^	CSphIndexProgress *					m_pStat;$/;"	m	class:CSphAutofile
m_pState	sphinxsearch.cpp	/^	RankerState_Expr_fn *	m_pState;$/;"	m	class:ExprRankerHook_c	file:
m_pState	sphinxsearch.cpp	/^	RankerState_Expr_fn *	m_pState;$/;"	m	struct:Expr_Sum_c	file:
m_pStatic	sphinx.h	/^	const CSphRowitem *		m_pStatic;		\/\/\/< static part (stored in and owned by the index)$/;"	m	class:CSphMatch
m_pStmt	searchd.cpp	/^	SqlStmt_t *		m_pStmt;$/;"	m	struct:SqlParser_c	file:
m_pStopwords	sphinx.cpp	/^	SphWordID_t *		m_pStopwords;	\/\/\/< stopwords ID list$/;"	m	struct:CSphDictCRCTraits	file:
m_pStorage	sphinx.cpp	/^	static DWORD *	m_pStorage;$/;"	m	struct:CmpQueuedDocinfo_fn	file:
m_pStorage	sphinx.cpp	/^DWORD *		CmpQueuedDocinfo_fn::m_pStorage		= NULL;$/;"	m	class:CmpQueuedDocinfo_fn	file:
m_pStorage	sphinxstd.h	/^	CSphSharedBuffer<BYTE>		m_pStorage;$/;"	m	class:CSphProcessSharedMutex
m_pStringBase	sphinxsort.cpp	/^	const BYTE * m_pStringBase;$/;"	m	class:CSphGrouperString	file:
m_pStrings	searchd.cpp	/^	const BYTE *	m_pStrings;$/;"	m	struct:PoolPtrs_t	file:
m_pStrings	sphinx.cpp	/^	CSphSharedBuffer<BYTE>		m_pStrings;				\/\/\/< my in-RAM strings cache$/;"	m	class:CSphIndex_VLN	file:
m_pStrings	sphinx.h	/^	const BYTE *			m_pStrings;			\/\/\/< pointer to strings storage$/;"	m	class:CSphQueryResult
m_pStrings	sphinxexpr.cpp	/^	const BYTE * m_pStrings;$/;"	m	struct:Expr_GetString_c	file:
m_pStrings	sphinxsort.cpp	/^	const BYTE *			m_pStrings; \/\/\/< string pool; base for offset of string attributes$/;"	m	struct:ExprSortStringAttrFixup_c	file:
m_pStripper	sphinx.h	/^	CSphHTMLStripper *					m_pStripper;	\/\/\/< my HTML stripper$/;"	m	class:CSphSource
m_pTag	sphinx.h	/^	const char *	m_pTag;				\/\/\/< tag name$/;"	m	class:CSphSource_XMLPipe
m_pTagCount	sphinx.cpp	/^	int *					m_pTagCount;$/;"	m	class:CSphArena	file:
m_pTags	sphinx.cpp	/^	TagDesc_t *				m_pTags;$/;"	m	class:CSphArena	file:
m_pTokenEnd	sphinx.cpp	/^	BYTE *				m_pTokenEnd;						\/\/\/< last token end point$/;"	m	class:CSphTokenizerTraits	file:
m_pTokenStart	sphinx.cpp	/^	BYTE *				m_pTokenStart;						\/\/\/< last token start point$/;"	m	class:CSphTokenizerTraits	file:
m_pTokenizer	sphinx.cpp	/^	ISphTokenizer *					m_pTokenizer;$/;"	m	class:CSphTokenizer_Filter	file:
m_pTokenizer	sphinx.h	/^	ISphTokenizer *						m_pTokenizer;	\/\/\/< my tokenizer$/;"	m	class:CSphSource
m_pTokenizer	sphinx.h	/^	ISphTokenizer *				m_pTokenizer;$/;"	m	class:CSphIndex
m_pTokenizer	sphinxexcerpt.cpp	/^	ISphTokenizer *							m_pTokenizer;$/;"	m	class:ISnippetsQword	file:
m_pTokenizer	sphinxexcerpt.cpp	/^	ISphTokenizer *			m_pTokenizer;$/;"	m	class:TokenFunctorTraits_c	file:
m_pTokenizer	sphinxexcerpt.cpp	/^	ISphTokenizer *		m_pTokenizer;$/;"	m	class:SnippetsQwordSetup	file:
m_pTokenizer	sphinxquery.cpp	/^	ISphTokenizer *			m_pTokenizer;$/;"	m	class:XQParser_t	file:
m_pTotalAllocs	sphinx.cpp	/^	int *					m_pTotalAllocs;$/;"	m	class:CSphArena	file:
m_pTotalBytes	sphinx.cpp	/^	int *					m_pTotalBytes;$/;"	m	class:CSphArena	file:
m_pTree	sphinxquery.cpp	/^	XQNode_t *		m_pTree;$/;"	m	class:BitMask_t	file:
m_pTree	sphinxquery.cpp	/^	XQNode_t *	m_pTree;$/;"	m	struct:MarkedNode_t	file:
m_pUdf	sphinxexpr.cpp	/^	UdfFunc_t *			m_pUdf;$/;"	m	struct:UdfCall_t	file:
m_pUpdate	sphinx.h	/^	const CSphAttrUpdate*	m_pUpdate;	\/\/\/< the unchangeable update pool$/;"	m	struct:CSphAttrUpdateEx
m_pUpdate	sphinxsort.cpp	/^	CSphAttrUpdateEx*	m_pUpdate;$/;"	m	class:CSphUpdateQueue	file:
m_pUpdated	searchd.cpp	/^	int * m_pUpdated;$/;"	m	struct:SphinxqlReplyParser_t	file:
m_pUpdated	searchd.cpp	/^	int * m_pUpdated;$/;"	m	struct:UpdateReplyParser_t	file:
m_pUpdates	searchd.cpp	/^	CSphAttrUpdateEx *				m_pUpdates;		\/\/\/< holder for updates$/;"	m	class:SearchHandler_c	file:
m_pUservar	sphinxexpr.cpp	/^	UservarIntSet_c *	m_pUservar;$/;"	m	class:Expr_MVAIn_c	file:
m_pVal	searchd.cpp	/^	UservarIntSet_c *	m_pVal;$/;"	m	struct:Uservar_t	file:
m_pVal	sphinxsearch.cpp	/^	DWORD * m_pVal;$/;"	m	struct:Expr_IntPtr_c	file:
m_pVals	searchd.cpp	/^	AttrValues_p			m_pVals;$/;"	m	struct:SqlInsert_t	file:
m_pValue	sphinxstd.h	/^	T *		m_pValue;$/;"	m	class:CSphProcessSharedVariable
m_pValues	searchd.cpp	/^	AttrValues_p			m_pValues; \/\/ FIXME? replace with numeric handles into parser state?$/;"	m	struct:SqlNode_t	file:
m_pValues	sphinx.h	/^	const SphAttr_t *	m_pValues;		\/\/\/< external value array$/;"	m	class:CSphFilterSettings
m_pValues	sphinxfilter.cpp	/^	const SphAttr_t *	m_pValues;$/;"	m	struct:IFilter_Values	file:
m_pWarning	sphinxsearch.cpp	/^	CSphString *				m_pWarning;$/;"	m	class:ExtNodeCached_t	file:
m_pWarning	sphinxsearch.cpp	/^	CSphString *				m_pWarning;$/;"	m	class:ExtTerm_c	file:
m_pWarning	sphinxsearch.h	/^	CSphString *			m_pWarning;$/;"	m	class:ISphQwordSetup
m_pWarns	searchd.cpp	/^	int * m_pWarns;$/;"	m	struct:SphinxqlReplyParser_t	file:
m_pWeightFilter	sphinxint.h	/^	ISphFilter *				m_pWeightFilter;$/;"	m	class:CSphQueryContext
m_pWeights	sphinx.h	/^	DWORD *			m_pWeights;		\/\/\/< user-supplied per-field weights. may be NULL. default is NULL. NOT OWNED, WILL NOT BE FREED in dtor.$/;"	m	class:CSphQuery
m_pWeights	sphinxsearch.cpp	/^	const int *			m_pWeights;$/;"	m	struct:RankerState_Expr_fn	file:
m_pWeights	sphinxsearch.cpp	/^	const int *		m_pWeights;$/;"	m	class:ExtRanker_WeightSum_c	file:
m_pWeights	sphinxsearch.cpp	/^	const int * m_pWeights;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_pWeights	sphinxsearch.cpp	/^	const int * m_pWeights;$/;"	m	struct:RankerState_Proximity_fn	file:
m_pWeights	sphinxsearch.cpp	/^	const int * m_pWeights;$/;"	m	struct:RankerState_Wordcount_fn	file:
m_pWordforms	sphinx.cpp	/^	WordformContainer_t *		m_pWordforms;$/;"	m	struct:CSphDictCRCTraits	file:
m_pWordlist	sphinxint.h	/^	const ISphWordlist * m_pWordlist;$/;"	m	struct:ExpansionContext_t
m_pWords	sphinx.cpp	/^	BYTE *								m_pWords;				\/\/\/< arena for checkpoint's words$/;"	m	class:CWordlist	file:
m_pWorker	searchd.cpp	/^	SnippetsRemote_t * m_pWorker;$/;"	m	struct:SnippetReplyParser_t	file:
m_pWorker	searchd.cpp	/^	const SnippetsRemote_t * m_pWorker;$/;"	m	struct:SnippetRequestBuilder_t	file:
m_pWriteBuffer	sphinx.cpp	/^	BYTE *						m_pWriteBuffer;		\/\/\/< my write buffer (for temp files)$/;"	m	class:CSphIndex_VLN	file:
m_pZoneChecker	sphinxsearch.cpp	/^	ISphZoneCheck *				m_pZoneChecker;					\/\/\/< zone-limited searches query ranker about zones$/;"	m	class:ExtTermPos_c	file:
m_pZoneChecker	sphinxsearch.h	/^	mutable ISphZoneCheck *	m_pZoneChecker;$/;"	m	class:ISphQwordSetup
m_ppFields	tests.cpp	/^	BYTE * m_ppFields[m_iMaxFields];$/;"	m	class:SphDocRandomizer_c	file:
m_ppResults	searchd.cpp	/^	CSphQueryResult **	m_ppResults;$/;"	m	struct:LocalSearch_t	file:
m_ppSorters	searchd.cpp	/^	ISphMatchSorter **	m_ppSorters;$/;"	m	struct:LocalSearch_t	file:
m_rdDoclist	sphinx.cpp	/^	CSphReader		m_rdDoclist;	\/\/\/< my doclist reader$/;"	m	class:DiskIndexQwordTraits_c	file:
m_rdHitlist	sphinx.cpp	/^	CSphReader		m_rdHitlist;	\/\/\/< my hitlist reader$/;"	m	class:DiskIndexQwordTraits_c	file:
m_sAccum	sphinx.cpp	/^	BYTE				m_sAccum [ 3*SPH_MAX_WORD_LEN+3 ];	\/\/\/< folded token accumulator$/;"	m	class:CSphTokenizerTraits	file:
m_sAccumBlend	sphinx.cpp	/^	BYTE				m_sAccumBlend [ 3*SPH_MAX_WORD_LEN+3 ];	\/\/\/< blend-acc, an accumulator copy for additional blended variants$/;"	m	class:CSphTokenizerTraits	file:
m_sAfterMatch	sphinxexcerpt.h	/^	CSphString		m_sAfterMatch;		\/\/\/< string to insert after each match$/;"	m	struct:ExcerptQuery_t
m_sAfterMatchPassage	sphinxexcerpt.h	/^	CSphString		m_sAfterMatchPassage;$/;"	m	struct:ExcerptQuery_t
m_sAlgo	sphinx.cpp	/^		CSphString m_sAlgo;$/;"	m	struct:CSphDictCRCTraits::DescStemmer_t	file:
m_sAlias	sphinx.h	/^	CSphString		m_sAlias;		\/\/\/< alias to return$/;"	m	struct:CSphQueryItem
m_sAppend	spelldump.cpp	/^	CSphString	m_sAppend;$/;"	m	class:CISpellAffixRule	file:
m_sAttr	sphinx.h	/^	CSphString					m_sAttr;		\/\/\/< attribute name$/;"	m	class:CSphAttrOverride
m_sAttrName	sphinx.h	/^	CSphString			m_sAttrName;	\/\/\/< filtered attribute name$/;"	m	class:CSphFilterSettings
m_sBeforeMatch	sphinxexcerpt.h	/^	CSphString		m_sBeforeMatch;		\/\/\/< string to insert before each match$/;"	m	struct:ExcerptQuery_t
m_sBeforeMatchPassage	sphinxexcerpt.h	/^	CSphString		m_sBeforeMatchPassage;$/;"	m	struct:ExcerptQuery_t
m_sBegin	searchd.cpp	/^	CSphString			m_sBegin;$/;"	m	struct:SphinxqlRequestBuilder_t	file:
m_sBlendChars	sphinx.h	/^	CSphString			m_sBlendChars;$/;"	m	struct:CSphTokenizerSettings
m_sBlendMode	sphinx.h	/^	CSphString			m_sBlendMode;$/;"	m	struct:CSphTokenizerSettings
m_sBoundary	sphinx.h	/^	CSphString			m_sBoundary;$/;"	m	struct:CSphTokenizerSettings
m_sBuffer	sphinx.h	/^	BYTE *			m_sBuffer;			\/\/\/< buffer$/;"	m	class:CSphSource_XMLPipe
m_sBuffer	sphinxexcerpt.cpp	/^	CSphString				m_sBuffer; \/\/ FIXME!!! REMOVE!!! ME!!!$/;"	m	class:ExcerptGen_c	file:
m_sBuffer	sphinxexcerpt.cpp	/^	CSphString *							m_sBuffer;$/;"	m	class:ISnippetsQword	file:
m_sBuffer	sphinxstd.h	/^	char *	m_sBuffer;$/;"	m	class:CSphStringBuilder
m_sCallProc	searchd.cpp	/^	CSphString				m_sCallProc;$/;"	m	struct:SqlStmt_t	file:
m_sCaseFolding	sphinx.h	/^	CSphString			m_sCaseFolding;$/;"	m	struct:CSphTokenizerSettings
m_sCharsetFile	spelldump.cpp	/^	CSphString	m_sCharsetFile;$/;"	m	class:CISpellAffix	file:
m_sCheckError	sphinxsearch.cpp	/^	const char *			m_sCheckError;$/;"	m	class:ExprRankerHook_c	file:
m_sChunkSeparator	sphinxexcerpt.h	/^	CSphString		m_sChunkSeparator;	\/\/\/< string to insert between matching chunks (in limited mode only)$/;"	m	struct:ExcerptQuery_t
m_sClientEncoding	sphinx.h	/^	CSphString		m_sClientEncoding;$/;"	m	struct:CSphSourceParams_PgSQL
m_sClientName	searchd.cpp	/^	CSphString		m_sClientName;$/;"	m	struct:ThdDesc_t	file:
m_sClippedWord	sphinx.cpp	/^	char							m_sClippedWord[MAX_KEYWORD_BYTES]; \/\/\/< keyword storage for cliiped word$/;"	m	class:CSphDictKeywords	file:
m_sColBuffers	sphinx.h	/^	CSphString	m_sColBuffers;		\/\/\/< column buffer sizes (eg "col1=2M, col2=4M")$/;"	m	struct:CSphSourceParams_ODBC
m_sCommand	searchd.cpp	/^	const char *	m_sCommand;$/;"	m	struct:ThdDesc_t	file:
m_sCommand	sphinx.cpp	/^	CSphString		m_sCommand;			\/\/\/< my command$/;"	m	class:CSphSource_XMLPipe2	file:
m_sCommand	sphinx.h	/^	CSphString		m_sCommand;			\/\/\/< my command$/;"	m	class:CSphSource_XMLPipe
m_sComment	sphinx.h	/^	CSphString		m_sComment;			\/\/\/< comment to pass verbatim in the log file$/;"	m	class:CSphQuery
m_sCondition	spelldump.cpp	/^	CSphString	m_sCondition;$/;"	m	class:CISpellAffixRule	file:
m_sCreateError	sphinxexpr.cpp	/^	CSphString				m_sCreateError;$/;"	m	class:ExprParser_t	file:
m_sDB	sphinx.h	/^	CSphString						m_sDB;$/;"	m	struct:CSphSourceParams_SQL
m_sDictWord	sphinxsearch.cpp	/^	CSphString	m_sDictWord;	\/\/\/< word as processed by dict$/;"	m	struct:ExtQword_t	file:
m_sDictWord	sphinxsearch.h	/^	CSphString		m_sDictWord;	\/\/\/< word after being processed by dict (eg. stemmed)$/;"	m	class:ISphQword
m_sEnc	sphinx.cpp	/^		CSphString m_sEnc;$/;"	m	struct:CSphDictCRCTraits::DescStemmer_t	file:
m_sEnd	searchd.cpp	/^	CSphString			m_sEnd;$/;"	m	struct:SphinxqlRequestBuilder_t	file:
m_sError	searchd.cpp	/^	CSphString	m_sError;	\/\/\/< search error message$/;"	m	struct:SearchFailure_t	file:
m_sError	searchd.cpp	/^	CSphString &		m_sError;$/;"	m	class:CSphinxqlSession	file:
m_sError	searchd.cpp	/^	const char *m_sError;			\/\/\/< fallback message if the frozen buf overloaded$/;"	m	class:NetOutputBuffer_c	file:
m_sError	sphinx.cpp	/^	CSphString				m_sError;$/;"	m	class:CSphArena	file:
m_sError	sphinx.cpp	/^	CSphString		m_sError;$/;"	m	class:CSphSource_XMLPipe2	file:
m_sError	sphinx.cpp	/^	char				m_sError [ 1024 ];$/;"	m	class:CSphCharsetDefinitionParser	file:
m_sError	sphinx.h	/^	CSphString				m_sError;			\/\/\/< error message$/;"	m	class:CSphQueryResultMeta
m_sError	sphinx.h	/^	CSphString				m_sError;$/;"	m	struct:CSphSource_ODBC
m_sError	sphinxexcerpt.h	/^	CSphString		m_sError;			\/\/\/< snippet error message$/;"	m	struct:ExcerptQuery_t
m_sError	sphinxint.h	/^	CSphString	m_sError;$/;"	m	class:CSphReader
m_sError	sphinxstd.h	/^	CSphString					m_sError;$/;"	m	class:CSphProcessSharedMutex
m_sError	sphinxutils.h	/^	char			m_sError [ 1024 ];$/;"	m	class:CSphConfigParser
m_sExpr	sphinx.h	/^	CSphString		m_sExpr;		\/\/\/< expression to compute$/;"	m	struct:CSphQueryItem
m_sExpr	sphinxexpr.cpp	/^	const char *			m_sExpr;$/;"	m	class:ExprParser_t	file:
m_sExpr	sphinxsearch.cpp	/^	const char *		m_sExpr;$/;"	m	struct:RankerState_Expr_fn	file:
m_sExtra	sphinxutils.cpp	/^	const char *		m_sExtra;	\/\/\/< extra stuff (deprecated name, for now)$/;"	m	struct:KeyDesc_t	file:
m_sFailure	searchd.cpp	/^	CSphString		m_sFailure;		\/\/\/< failure message$/;"	m	struct:AgentConn_t	file:
m_sFile	sphinxstd.cpp	/^	const char *	m_sFile;$/;"	m	struct:CSphMemHeader	file:
m_sFileName	sphinxutils.h	/^	CSphString		m_sFileName;$/;"	m	class:CSphConfigParser
m_sFilename	sphinx.cpp	/^	CSphString					m_sFilename;$/;"	m	class:CSphIndex_VLN	file:
m_sFilename	sphinx.cpp	/^	CSphString					m_sFilename;$/;"	m	struct:WordformContainer_t	file:
m_sFilename	sphinx.h	/^	CSphString			m_sFilename;$/;"	m	struct:CSphSavedFile
m_sFilename	sphinxint.h	/^	CSphString	m_sFilename;	\/\/\/< my file name$/;"	m	class:CSphAutofile
m_sFilename	sphinxint.h	/^	CSphString	m_sFilename;$/;"	m	class:CSphReader
m_sFlags	spelldump.cpp	/^		CSphString	m_sFlags;$/;"	m	struct:CISpellDict::CISpellDictWord	file:
m_sFrom	sphinx.cpp	/^	CSphString	m_sFrom;	\/\/\/< specially packed list of map-from tokens$/;"	m	struct:CSphSynonym	file:
m_sGeoLatAttr	sphinx.h	/^	CSphString		m_sGeoLatAttr;		\/\/\/< latitude attr name$/;"	m	class:CSphQuery
m_sGeoLongAttr	sphinx.h	/^	CSphString		m_sGeoLongAttr;		\/\/\/< longitude attr name$/;"	m	class:CSphQuery
m_sGroupBy	sphinx.h	/^	CSphString		m_sGroupBy;			\/\/\/< group-by attribute name$/;"	m	class:CSphQuery
m_sGroupDistinct	sphinx.h	/^	CSphString		m_sGroupDistinct;	\/\/\/< count distinct values for this attribute$/;"	m	class:CSphQuery
m_sGroupSortBy	sphinx.h	/^	CSphString		m_sGroupSortBy;		\/\/\/< sorting clause for groups in group-by mode$/;"	m	class:CSphQuery
m_sHitlessFiles	sphinx.h	/^	CSphString		m_sHitlessFiles;$/;"	m	struct:CSphIndexSettings
m_sHost	searchd.cpp	/^	CSphString		m_sHost;		\/\/\/< remote searchd host$/;"	m	struct:AgentDesc_t	file:
m_sHost	sphinx.h	/^	CSphString						m_sHost;$/;"	m	struct:CSphSourceParams_SQL
m_sHtmlIndexAttrs	sphinx.h	/^	CSphString		m_sHtmlIndexAttrs;$/;"	m	struct:CSphIndexSettings
m_sHtmlRemoveElements	sphinx.h	/^	CSphString		m_sHtmlRemoveElements;$/;"	m	struct:CSphIndexSettings
m_sIgnoreChars	sphinx.h	/^	CSphString			m_sIgnoreChars;$/;"	m	struct:CSphTokenizerSettings
m_sIndex	searchd.cpp	/^	CSphString				m_sIndex;$/;"	m	struct:SqlStmt_t	file:
m_sIndex	searchd.cpp	/^	CSphString	m_sIndex;	\/\/\/< searched index name$/;"	m	struct:SearchFailure_t	file:
m_sIndexName	sphinx.cpp	/^	CSphString					m_sIndexName;$/;"	m	struct:WordformContainer_t	file:
m_sIndexName	sphinx.h	/^	CSphString					m_sIndexName;$/;"	m	class:CSphIndex
m_sIndexPath	searchd.cpp	/^	CSphString			m_sIndexPath;$/;"	m	struct:ServedDesc_t	file:
m_sIndexes	searchd.cpp	/^	CSphString		m_sIndexes;		\/\/\/< remote index names to query$/;"	m	struct:AgentDesc_t	file:
m_sIndexes	sphinx.h	/^	CSphString		m_sIndexes;		\/\/\/< indexes to search$/;"	m	class:CSphQuery
m_sKey	indexer.cpp	/^	CSphString				m_sKey;$/;"	m	struct:CSphMTFHashEntry	file:
m_sKey	sphinxutils.cpp	/^	const char *		m_sKey;		\/\/\/< key name$/;"	m	struct:KeyDesc_t	file:
m_sKeyword	sphinx.cpp	/^		char *						m_sKeyword;$/;"	m	struct:CSphDictKeywords::DictKeyword_t	file:
m_sKeyword	sphinx.cpp	/^	BYTE				m_sKeyword [ MAX_KEYWORD_BYTES ];	\/\/\/< currently decoded hit keyword (in keywords dict mode)$/;"	m	struct:CSphBin	file:
m_sKeyword	sphinx.cpp	/^	BYTE *			m_sKeyword;		\/\/\/< word itself (in keywords dictionary case only)$/;"	m	struct:CSphAggregateHit	file:
m_sLastError	sphinx.h	/^	CSphString					m_sLastError;$/;"	m	class:CSphIndex
m_sLastKeyword	sphinx.cpp	/^	BYTE						m_sLastKeyword [ MAX_KEYWORD_BYTES ];$/;"	m	class:CSphIndex_VLN	file:
m_sLastKeyword	sphinx.cpp	/^	BYTE				m_sLastKeyword [ MAX_KEYWORD_BYTES ];$/;"	m	struct:CSphBin	file:
m_sLastKeyword	sphinxint.h	/^	BYTE m_sLastKeyword [SPH_MAX_WORD_LEN*3+4];$/;"	m	class:CSphKeywordDeltaWriter
m_sLastWarning	sphinx.h	/^	CSphString					m_sLastWarning;$/;"	m	class:CSphIndex
m_sLexerError	sphinxexpr.cpp	/^	CSphString				m_sLexerError;$/;"	m	class:ExprParser_t	file:
m_sLocale	spelldump.cpp	/^	CSphString	m_sLocale;$/;"	m	class:CISpellAffix	file:
m_sMorphology	sphinx.h	/^	CSphString		m_sMorphology;$/;"	m	struct:CSphDictSettings
m_sMysqlUsock	sphinx.h	/^	CSphString				m_sMysqlUsock;$/;"	m	struct:CSphSource_MySQL
m_sName	sphinx.cpp	/^	const char *	m_sName;$/;"	m	struct:HtmlEntity_t	file:
m_sName	sphinx.h	/^		CSphString			m_sName;$/;"	m	struct:CSphSource_ODBC::QueryColumn_t
m_sName	sphinx.h	/^	CSphString						m_sName;		\/\/\/< my human-readable name$/;"	m	struct:CSphSchema
m_sName	sphinx.h	/^	CSphString			m_sName;$/;"	m	struct:CSphJoinedField
m_sName	sphinx.h	/^	CSphString			m_sName;$/;"	m	struct:CSphUnpackInfo
m_sName	sphinx.h	/^	CSphString		m_sName;		\/\/\/< column name$/;"	m	struct:CSphColumnInfo
m_sName	sphinx.h	/^	CSphString	m_sName;$/;"	m	struct:CSphNamedInt
m_sName	sphinxexpr.cpp	/^	const char *	m_sName;$/;"	m	struct:FuncDesc_t	file:
m_sName	sphinxint.h	/^	CSphString		m_sName;$/;"	m	class:CSphWriter
m_sName	tests.cpp	/^	const char *		m_sName;$/;"	m	struct:SortDataGenDesc_t	file:
m_sNgramChars	sphinx.h	/^	CSphString			m_sNgramChars;$/;"	m	struct:CSphTokenizerSettings
m_sNgramCharsStr	sphinx.cpp	/^	CSphString			m_sNgramCharsStr;$/;"	m	class:CSphTokenizer_UTF8Ngram	file:
m_sNormalForm	sphinx.cpp	/^	CSphString				m_sNormalForm;$/;"	m	struct:CSphMultiform	file:
m_sNormalized	sphinx.h	/^	CSphString		m_sNormalized;$/;"	m	struct:CSphKeywordInfo
m_sOdbcDSN	sphinx.h	/^	CSphString				m_sOdbcDSN;$/;"	m	struct:CSphSource_ODBC
m_sOdbcDSN	sphinx.h	/^	CSphString	m_sOdbcDSN;			\/\/\/< ODBC DSN$/;"	m	struct:CSphSourceParams_ODBC
m_sOrderBy	sphinx.h	/^	CSphString		m_sOrderBy;			\/\/\/< order-by clause$/;"	m	class:CSphQuery
m_sOutMultiform	sphinx.cpp	/^	BYTE				m_sOutMultiform [ 3*SPH_MAX_WORD_LEN+4 ];$/;"	m	class:CSphTokenizer_Filter	file:
m_sParseError	sphinxquery.h	/^	CSphString				m_sParseError;$/;"	m	struct:XQQuery_t
m_sParseWarning	sphinxquery.h	/^	CSphString				m_sParseWarning;$/;"	m	struct:XQQuery_t
m_sParserError	sphinx.cpp	/^	CSphString		m_sParserError;$/;"	m	class:SelectParser_t	file:
m_sParserError	sphinxexpr.cpp	/^	CSphString				m_sParserError;$/;"	m	class:ExprParser_t	file:
m_sPass	sphinx.h	/^	CSphString						m_sPass;$/;"	m	struct:CSphSourceParams_SQL
m_sPath	searchd.cpp	/^	CSphString		m_sPath;		\/\/\/< local searchd UNIX socket path$/;"	m	struct:AgentDesc_t	file:
m_sPgClientEncoding	sphinx.h	/^	CSphString				m_sPgClientEncoding;$/;"	m	struct:CSphSource_PgSQL
m_sQuery	sphinx.h	/^	CSphString						m_sQuery;$/;"	m	struct:CSphSourceParams_SQL
m_sQuery	sphinx.h	/^	CSphString			m_sQuery;$/;"	m	struct:CSphJoinedField
m_sQuery	sphinx.h	/^	CSphString		m_sQuery;		\/\/\/< cooked query string for the engine (possibly transformed during legacy matching modes fixup)$/;"	m	class:CSphQuery
m_sQuery	sphinx.h	/^	CSphString		m_sQuery;		\/\/\/< query to retrieve values (for multi-valued attrs only)$/;"	m	struct:CSphColumnInfo
m_sQuery	sphinxquery.cpp	/^	BYTE *					m_sQuery;$/;"	m	class:XQParser_t	file:
m_sQueryKilllist	sphinx.h	/^	CSphString						m_sQueryKilllist;$/;"	m	struct:CSphSourceParams_SQL
m_sQueryRange	sphinx.h	/^	CSphString						m_sQueryRange;$/;"	m	struct:CSphSourceParams_SQL
m_sQueryRange	sphinx.h	/^	CSphString		m_sQueryRange;	\/\/\/< query to retrieve range (for multi-valued attrs only)$/;"	m	struct:CSphColumnInfo
m_sRanged	sphinx.h	/^	CSphString			m_sRanged;$/;"	m	struct:CSphJoinedField
m_sRankerExpr	sphinx.h	/^	CSphString		m_sRankerExpr;	\/\/\/< ranking expression for SPH_RANK_EXPR$/;"	m	class:CSphQuery
m_sRawPassageBoundary	sphinxexcerpt.h	/^	CSphString		m_sRawPassageBoundary; \/\/\/< boundary as it received from proto (to avoid coding\/decoding to agents)$/;"	m	struct:ExcerptQuery_t
m_sRawQuery	sphinx.h	/^	CSphString		m_sRawQuery;	\/\/\/< raw query string from the client for searchd log, agents, etc$/;"	m	class:CSphQuery
m_sRes	sphinxexcerpt.h	/^	char *			m_sRes;				\/\/\/< snippet result holder (NOT owned)$/;"	m	struct:ExcerptQuery_t
m_sRules	spelldump.cpp	/^	char		m_sRules[3];$/;"	m	struct:MapInfo_t	file:
m_sSectionName	sphinxutils.h	/^	CSphString		m_sSectionName;$/;"	m	class:CSphConfigParser
m_sSectionType	sphinxutils.h	/^	CSphString		m_sSectionType;$/;"	m	class:CSphConfigParser
m_sSelect	sphinx.h	/^	CSphString		m_sSelect;			\/\/\/< select-list (attributes and\/or expressions)$/;"	m	class:CSphQuery
m_sSetName	searchd.cpp	/^	CSphString				m_sSetName;		\/\/ reused by ATTACH$/;"	m	struct:SqlStmt_t	file:
m_sSetValue	searchd.cpp	/^	CSphString				m_sSetValue;$/;"	m	struct:SqlStmt_t	file:
m_sSortBy	sphinx.h	/^	CSphString		m_sSortBy;		\/\/\/< attribute to sort by$/;"	m	class:CSphQuery
m_sSource	sphinxexcerpt.h	/^	CSphString		m_sSource;			\/\/\/< source text (or file name, see m_bLoadFiles)$/;"	m	struct:ExcerptQuery_t
m_sSqlDSN	sphinx.h	/^	CSphString			m_sSqlDSN;$/;"	m	struct:CSphSource_SQL
m_sSslCA	sphinx.h	/^	CSphString				m_sSslCA;$/;"	m	struct:CSphSource_MySQL
m_sSslCA	sphinx.h	/^	CSphString	m_sSslCA;$/;"	m	struct:CSphSourceParams_MySQL
m_sSslCert	sphinx.h	/^	CSphString				m_sSslCert;$/;"	m	struct:CSphSource_MySQL
m_sSslCert	sphinx.h	/^	CSphString	m_sSslCert;$/;"	m	struct:CSphSourceParams_MySQL
m_sSslKey	sphinx.h	/^	CSphString				m_sSslKey;$/;"	m	struct:CSphSource_MySQL
m_sSslKey	sphinx.h	/^	CSphString	m_sSslKey;$/;"	m	struct:CSphSourceParams_MySQL
m_sStmt	searchd.cpp	/^	const char *			m_sStmt; \/\/ for error reporting$/;"	m	struct:SqlStmt_t	file:
m_sStopwords	sphinx.h	/^	CSphString		m_sStopwords;$/;"	m	struct:CSphDictSettings
m_sStrip	spelldump.cpp	/^	CSphString	m_sStrip;$/;"	m	class:CISpellAffixRule	file:
m_sStripMode	sphinxexcerpt.h	/^	CSphString		m_sStripMode;		\/\/\/< strip mode$/;"	m	struct:ExcerptQuery_t
m_sSynonymsFile	sphinx.h	/^	CSphString			m_sSynonymsFile;$/;"	m	struct:CSphTokenizerSettings
m_sTag	sphinx.h	/^		CSphString				m_sTag;			\/\/\/< tag name$/;"	m	struct:CSphHTMLStripper::StripperTag_t
m_sTmpWord	sphinxexcerpt.cpp	/^	BYTE									m_sTmpWord [ 3*SPH_MAX_WORD_LEN + 16 ];$/;"	m	class:SnippetsDocIndex_c	file:
m_sTmpWord	sphinxexcerpt.cpp	/^	mutable BYTE	m_sTmpWord [ 3*SPH_MAX_WORD_LEN + 16 ];$/;"	m	class:HitCollector_c	file:
m_sTo	sphinx.cpp	/^	CSphString	m_sTo;		\/\/\/< map-to string$/;"	m	struct:CSphSynonym	file:
m_sToken	sphinx.cpp	/^		BYTE			m_sToken [3*SPH_MAX_WORD_LEN+4];$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_sTokenized	sphinx.h	/^	CSphString		m_sTokenized;$/;"	m	struct:CSphKeywordInfo
m_sTokenizedMultiform	sphinx.cpp	/^	BYTE				m_sTokenizedMultiform [ 3*SPH_MAX_WORD_LEN+4 ];$/;"	m	class:CSphTokenizer_Filter	file:
m_sUdfLib	searchd.cpp	/^	CSphString				m_sUdfLib;$/;"	m	struct:SqlStmt_t	file:
m_sUdfName	searchd.cpp	/^	CSphString				m_sUdfName;$/;"	m	struct:SqlStmt_t	file:
m_sUnix	searchd.cpp	/^	CSphString		m_sUnix;$/;"	m	struct:ListenerDesc_t	file:
m_sUser	sphinx.h	/^	CSphString						m_sUser;$/;"	m	struct:CSphSourceParams_SQL
m_sUsock	sphinx.h	/^	CSphString	m_sUsock;					\/\/\/< UNIX socket$/;"	m	struct:CSphSourceParams_MySQL
m_sVal	searchd.cpp	/^	CSphString				m_sVal;		\/\/ OPTIMIZE? use char* and point to node?$/;"	m	struct:SqlInsert_t	file:
m_sVal	sphinxexpr.cpp	/^	CSphString m_sVal;$/;"	m	struct:Expr_GetStrConst_c	file:
m_sValue	searchd.cpp	/^	CSphString				m_sValue;$/;"	m	struct:SqlNode_t	file:
m_sValue	sphinx.cpp	/^	CSphString	m_sValue;	\/\/\/< string value$/;"	m	struct:Ordinal_t	file:
m_sValue	sphinxstd.h	/^	char *				m_sValue;$/;"	m	struct:CSphString
m_sWarning	sphinx.h	/^	CSphString				m_sWarning;			\/\/\/< warning message$/;"	m	class:CSphQueryResultMeta
m_sWord	indexer.cpp	/^	const char *	m_sWord;$/;"	m	struct:Word_t	file:
m_sWord	spelldump.cpp	/^		CSphString	m_sWord;$/;"	m	struct:CISpellDict::CISpellDictWord	file:
m_sWord	spelldump.cpp	/^	CSphString	m_sWord;$/;"	m	struct:MapInfo_t	file:
m_sWord	sphinx.cpp	/^		const char *	m_sWord;$/;"	m	union:CSphWordlistCheckpoint::__anon17	file:
m_sWord	sphinx.cpp	/^	BYTE m_sWord [ MAX_KEYWORD_BYTES ];$/;"	m	struct:WordReaderContext_t	file:
m_sWord	sphinx.cpp	/^	CSphString		m_sWord;$/;"	m	struct:WordDictInfo_t	file:
m_sWord	sphinx.cpp	/^	char			m_sWord[MAX_KEYWORD_BYTES];$/;"	m	class:CSphDictReader	file:
m_sWord	sphinxquery.h	/^	CSphString			m_sWord;$/;"	m	struct:XQKeyword_t
m_sWord	sphinxsearch.cpp	/^	CSphString	m_sWord;		\/\/\/< word$/;"	m	struct:ExtQword_t	file:
m_sWord	sphinxsearch.h	/^	CSphString		m_sWord;		\/\/\/< my copy of word$/;"	m	class:ISphQword
m_sWordforms	sphinx.h	/^	CSphString		m_sWordforms;$/;"	m	struct:CSphDictSettings
m_sWords	sphinxexcerpt.h	/^	CSphString		m_sWords;			\/\/\/< words themselves$/;"	m	struct:ExcerptQuery_t
m_sWriterError	sphinx.cpp	/^	CSphString			m_sWriterError;		\/\/\/< writer error message storage$/;"	m	struct:CSphDictCRCTraits	file:
m_sZones	sphinx.h	/^	CSphString		m_sZones;$/;"	m	struct:CSphIndexSettings
m_szAppend	sphinxstemcz.cpp	/^	BYTE	m_szAppend[4];$/;"	m	struct:ReplaceRule_t	file:
m_szSuffix	sphinxstemcz.cpp	/^	BYTE	m_szSuffix[10];$/;"	m	struct:ClampRule_t	file:
m_szSuffix	sphinxstemcz.cpp	/^	BYTE	m_szSuffix[4];$/;"	m	struct:ReplaceRule_t	file:
m_szTokenEnd	sphinx.cpp	/^		const char *	m_szTokenEnd;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_szTokenStart	sphinx.cpp	/^		const char *	m_szTokenStart;$/;"	m	struct:CSphTokenizer_Filter::StoredToken_t	file:
m_tArgs	sphinxexpr.cpp	/^	SPH_UDF_ARGS		m_tArgs;$/;"	m	struct:UdfCall_t	file:
m_tConf	sphinxutils.h	/^	CSphConfig		m_tConf;$/;"	m	class:CSphConfigParser
m_tContainer	sphinxexcerpt.cpp	/^	SnippetsDocIndex_c &	m_tContainer;$/;"	m	class:TokenFunctorTraits_c	file:
m_tCountLoc	sphinxsort.cpp	/^	CSphAttrLocator m_tCountLoc;$/;"	m	class:AggrAvg_t	file:
m_tCrashQuery	searchd.cpp	/^	CrashQuery_t				m_tCrashQuery;$/;"	m	struct:LocalSearchThreadContext_t	file:
m_tCrashQuery	searchd.cpp	/^	CrashQuery_t				m_tCrashQuery;$/;"	m	struct:SnippetThread_t	file:
m_tDictCloned	searchd.cpp	/^	CSphScopedPtr<CSphDict> m_tDictCloned;$/;"	m	class:SnippetContext_t	file:
m_tDistinctLoc	sphinxsort.cpp	/^	CSphAttrLocator		m_tDistinctLoc;		\/\/\/< locator for attribute to compute count(distinct) for$/;"	m	struct:CSphGroupSorterSettings	file:
m_tDoc	sphinx.cpp	/^	CSphMatch		m_tDoc;			\/\/\/< current match (partial)$/;"	m	class:DiskIndexQwordTraits_c	file:
m_tDocInfo	sphinx.h	/^	CSphMatch							m_tDocInfo;		\/\/\/< current document info$/;"	m	class:CSphSource
m_tDoclist	sphinx.cpp	/^	const CSphAutofile &	m_tDoclist;$/;"	m	class:DiskIndexQwordSetup_c	file:
m_tDoclistFile	sphinx.cpp	/^	CSphAutofile				m_tDoclistFile;			\/\/\/< doclist file$/;"	m	class:CSphIndex_VLN	file:
m_tDst	sphinxint.h	/^	CSphAttrLocator m_tDst;$/;"	m	struct:SphStringSorterRemap_t
m_tExactDict	searchd.cpp	/^	CSphScopedPtr<CSphDict> m_tExactDict;$/;"	m	class:SnippetContext_t	file:
m_tExtQuery	searchd.cpp	/^	XQQuery_t m_tExtQuery;$/;"	m	class:SnippetContext_t	file:
m_tFile	sphinx.cpp	/^	CSphAutofile						m_tFile;				\/\/\/< file$/;"	m	class:CWordlist	file:
m_tFile	sphinx.cpp	/^	CSphAutofile	m_tFile;$/;"	m	class:CSphDictReader	file:
m_tForkQuery	searchd.cpp	/^	static CrashQuery_t		m_tForkQuery;		\/\/ copy of last query for fork \/ prefork modes$/;"	m	class:SphCrashLogger_c	file:
m_tForkQuery	searchd.cpp	/^CrashQuery_t SphCrashLogger_c::m_tForkQuery = CrashQuery_t();$/;"	m	class:SphCrashLogger_c	file:
m_tFrom	sphinxint.h	/^	CSphAttrLocator m_tFrom;	\/\/\/< source (static) locator$/;"	m	struct:LocatorPair_t
m_tGeoLatLoc	sphinxsort.cpp	/^	CSphAttrLocator		m_tGeoLatLoc;$/;"	m	struct:ExprGeodist_t	file:
m_tGeoLongLoc	sphinxsort.cpp	/^	CSphAttrLocator		m_tGeoLongLoc;$/;"	m	struct:ExprGeodist_t	file:
m_tGroupSorter	sphinxsort.cpp	/^	GroupSorter_fn<COMPGROUP>	m_tGroupSorter;$/;"	m	class:CSphKBufferGroupSorter	file:
m_tHit	sphinx.cpp	/^	CSphAggregateHit	m_tHit;									\/\/\/< currently decoded hit$/;"	m	struct:CSphBin	file:
m_tHitlist	sphinx.cpp	/^	const CSphAutofile &	m_tHitlist;$/;"	m	class:DiskIndexQwordSetup_c	file:
m_tHitlistFile	sphinx.cpp	/^	CSphAutofile				m_tHitlistFile;			\/\/\/< hitlist file$/;"	m	class:CSphIndex_VLN	file:
m_tHits	sphinx.h	/^	ISphHits				m_tHits;				\/\/\/< my hitvector$/;"	m	class:CSphSource_Document
m_tHits	sphinx.h	/^	ISphHits		m_tHits;			\/\/\/< my hitvector$/;"	m	class:CSphSource_XMLPipe
m_tIOStats	sphinx.h	/^	CSphIOStats				m_tIOStats;			\/\/\/ IO statistics$/;"	m	class:CSphQueryResultMeta
m_tInit	sphinxexpr.cpp	/^	SPH_UDF_INIT		m_tInit;$/;"	m	struct:UdfCall_t	file:
m_tKey	sphinxsort.cpp	/^		KEY		m_tKey;$/;"	m	struct:CSphFixedHash::HashEntry_t	file:
m_tKey	sphinxstd.h	/^		KEY				m_tKey;				\/\/\/< key, owned by the hash$/;"	m	struct:CSphOrderedHash::HashEntry_t
m_tKeywordMask	sphinxsearch.cpp	/^	CSphBitvec			m_tKeywordMask;$/;"	m	struct:RankerState_Expr_fn	file:
m_tLC	sphinx.h	/^	CSphLowercaser					m_tLC;						\/\/\/< my lowercaser$/;"	m	class:ISphTokenizer
m_tLastHit	sphinx.cpp	/^	CSphAggregateHit			m_tLastHit;			\/\/\/< hitlist entry$/;"	m	class:CSphIndex_VLN	file:
m_tLastMeta	searchd.cpp	/^	CSphQueryResultMeta m_tLastMeta;$/;"	m	class:CSphinxqlSession	file:
m_tLastQueryTLS	searchd.cpp	/^	static SphThreadKey_t	m_tLastQueryTLS;	\/\/ last query ( non threaded workers could use dist_threads too )$/;"	m	class:SphCrashLogger_c	file:
m_tLastQueryTLS	searchd.cpp	/^SphThreadKey_t SphCrashLogger_c::m_tLastQueryTLS = SphThreadKey_t ();$/;"	m	class:SphCrashLogger_c	file:
m_tLastToken	sphinx.cpp	/^	StoredToken_t					m_tLastToken;$/;"	m	class:CSphTokenizer_Filter	file:
m_tLat	sphinxexpr.cpp	/^	CSphAttrLocator	m_tLat;$/;"	m	class:Expr_GeodistAttrConst_c	file:
m_tLoc	sphinxint.h	/^		CSphAttrLocator			m_tLoc;					\/\/\/< result locator$/;"	m	struct:CSphQueryContext::CalcItem_t
m_tLocCount	sphinxsort.cpp	/^	CSphAttrLocator		m_tLocCount;		\/\/\/< locator for @count$/;"	m	struct:CSphGroupSorterSettings	file:
m_tLocDistinct	sphinxsort.cpp	/^	CSphAttrLocator		m_tLocDistinct;		\/\/\/< locator for @distinct$/;"	m	struct:CSphGroupSorterSettings	file:
m_tLocGroupby	sphinxsort.cpp	/^	CSphAttrLocator		m_tLocGroupby;		\/\/\/< locator for @groupby$/;"	m	struct:CSphGroupSorterSettings	file:
m_tLocator	sphinx.cpp	/^	CSphAttrLocator		m_tLocator;$/;"	m	struct:FieldMVARedirect_t	file:
m_tLocator	sphinx.h	/^	CSphAttrLocator		m_tLocator[MAX_ATTRS];		\/\/\/< sort-by attr locator$/;"	m	struct:CSphMatchComparatorState
m_tLocator	sphinx.h	/^	CSphAttrLocator	m_tLocator;		\/\/\/< attribute locator in the row$/;"	m	struct:CSphColumnInfo
m_tLocator	sphinxexpr.cpp	/^	CSphAttrLocator		m_tLocator;$/;"	m	class:Expr_MVAIn_c	file:
m_tLocator	sphinxexpr.cpp	/^	CSphAttrLocator	m_tLocator;	\/\/\/< attribute locator, for TOK_ATTR type$/;"	m	struct:ExprNode_t	file:
m_tLocator	sphinxexpr.cpp	/^	CSphAttrLocator m_tLocator;$/;"	m	struct:ExprLocatorTraits_t	file:
m_tLocator	sphinxfilter.cpp	/^	CSphAttrLocator m_tLocator;$/;"	m	struct:IFilter_Attr	file:
m_tLocator	sphinxsort.cpp	/^	CSphAttrLocator	m_tLocator;$/;"	m	class:IAggrFuncTraits	file:
m_tLocator	sphinxsort.cpp	/^	const CSphAttrLocator	m_tLocator; \/\/\/< string attribute to fix$/;"	m	struct:ExprSortStringAttrFixup_c	file:
m_tLock	searchd.cpp	/^	CSphMutex m_tLock;$/;"	m	struct:StaticThreadsOnlyMutex_t	file:
m_tLock	searchd.cpp	/^	CSphMutex m_tLock;$/;"	m	struct:ThreadsOnlyMutex_t	file:
m_tLock	searchd.cpp	/^	mutable CSphMutex				m_tLock;$/;"	m	class:SearchHandler_c	file:
m_tLock	searchd.cpp	/^	mutable CSphRwlock		m_tLock;$/;"	m	class:IndexHash_c	file:
m_tLock	searchd.cpp	/^	mutable CSphRwlock	m_tLock;$/;"	m	struct:ServedIndex_t	file:
m_tLock	sphinxstd.h	/^	mutable CSphMutex	m_tLock;$/;"	m	struct:ISphRefcountedMT
m_tLock	sphinxstd.h	/^	pthread_rwlock_t	m_tLock;$/;"	m	class:CSphRwlock
m_tLon	sphinxexpr.cpp	/^	CSphAttrLocator	m_tLon;$/;"	m	class:Expr_GeodistAttrConst_c	file:
m_tMatch	sphinxexcerpt.cpp	/^	CSphMatch					m_tMatch;$/;"	m	class:SnippetsFastQword_c	file:
m_tMatch	sphinxexcerpt.cpp	/^	CSphMatch	m_tMatch;$/;"	m	class:ISnippetsQword	file:
m_tMin	sphinxsearch.h	/^	CSphMatch				m_tMin;$/;"	m	class:ISphQwordSetup
m_tMutex	sphinxstd.h	/^	pthread_mutex_t m_tMutex;$/;"	m	class:CSphMutex
m_tMutexRef	sphinxstd.h	/^	T &	m_tMutexRef;$/;"	m	class:CSphScopedLock
m_tMvaLocator	sphinxsort.cpp	/^	CSphAttrLocator		m_tMvaLocator;$/;"	m	class:CSphKBufferMVAGroupSorter	file:
m_tMysqlDriver	sphinx.h	/^	MYSQL					m_tMysqlDriver;$/;"	m	struct:CSphSource_MySQL
m_tMysqlRow	sphinx.h	/^	MYSQL_ROW				m_tMysqlRow;$/;"	m	struct:CSphSource_MySQL
m_tParams	sphinx.h	/^	CSphSourceParams_SQL		m_tParams;$/;"	m	struct:CSphSource_SQL
m_tPendingToken	sphinxquery.cpp	/^	YYSTYPE					m_tPendingToken;$/;"	m	class:XQParser_t	file:
m_tPgDriver	sphinx.h	/^	PGconn *				m_tPgDriver;	\/\/\/< postgresql connection context$/;"	m	struct:CSphSource_PgSQL
m_tProcMutex	sphinx.cpp	/^	CSphProcessSharedMutex	m_tProcMutex;$/;"	m	class:CSphArena	file:
m_tProgress	sphinx.cpp	/^	CSphIndexProgress			m_tProgress;$/;"	m	class:CSphIndex_VLN	file:
m_tQuery	searchd.cpp	/^	CSphQuery				m_tQuery;$/;"	m	struct:SqlStmt_t	file:
m_tQuery	searchd.cpp	/^	CrashQuery_t			m_tQuery;			\/\/ per thread copy of last query for thread mode$/;"	m	class:SphCrashLogger_c	file:
m_tQuery	sphinxexcerpt.cpp	/^	const XQQuery_t	&						m_tQuery;$/;"	m	class:SnippetsDocIndex_c	file:
m_tQueryTokenizer	searchd.cpp	/^	CSphScopedPtr<ISphTokenizer> m_tQueryTokenizer;$/;"	m	class:SnippetContext_t	file:
m_tReader	sphinx.cpp	/^	CSphReader	m_tReader;$/;"	m	class:CSphDictReader	file:
m_tSchema	sphinx.h	/^	CSphSchema							m_tSchema;		\/\/\/< my schema$/;"	m	class:CSphSource
m_tSchema	sphinx.h	/^	CSphSchema					m_tSchema;$/;"	m	class:CSphIndex
m_tSchema	sphinx.h	/^	CSphSchema				m_tSchema;			\/\/\/< result schema$/;"	m	class:CSphQueryResult
m_tSchema	sphinx.h	/^	CSphSchema			m_tSchema;		\/\/\/< sorter schema (adds dynamic attributes on top of index schema)$/;"	m	class:ISphMatchSorter
m_tSettings	indexer.cpp	/^	CSphDictSettings			m_tSettings;$/;"	m	class:CSphStopwordBuilderDict	file:
m_tSettings	sphinx.cpp	/^	CSphDictSettings			m_tSettings;$/;"	m	struct:CSphDictCRCTraits	file:
m_tSettings	sphinx.h	/^	CSphIndexSettings			m_tSettings;$/;"	m	class:CSphIndex
m_tSettings	sphinx.h	/^	CSphTokenizerSettings			m_tSettings;				\/\/\/< tokenizer settings$/;"	m	class:ISphTokenizer
m_tSettings	sphinxsort.cpp	/^	CSphGroupSorterSettings		m_tSettings;$/;"	m	class:CSphKBufferGroupSorter	file:
m_tSrc	sphinxint.h	/^	CSphAttrLocator m_tSrc;$/;"	m	struct:SphStringSorterRemap_t
m_tStat	sphinx.cpp	/^	struct_stat					m_tStat;$/;"	m	struct:WordformContainer_t	file:
m_tState	sphinx.h	/^	CSphBuildHitsState_t	m_tState;$/;"	m	class:CSphSource_Document
m_tState	sphinxsearch.cpp	/^	STATE			m_tState;$/;"	m	class:ExtRanker_T	file:
m_tState	sphinxsort.cpp	/^	CSphMatchComparatorState	m_tState;$/;"	m	class:CSphMatchQueueTraits	file:
m_tStats	sphinx.cpp	/^	CSphSourceStats				m_tStats;			\/\/\/< my stats$/;"	m	class:CSphIndex_VLN	file:
m_tStats	sphinx.h	/^	CSphSourceStats						m_tStats;		\/\/\/< my stats$/;"	m	class:CSphSource
m_tStripper	searchd.cpp	/^	CSphScopedPtr<CSphHTMLStripper> m_tStripper;$/;"	m	class:SnippetContext_t	file:
m_tSynFileInfo	sphinx.h	/^	CSphSavedFile					m_tSynFileInfo;				\/\/\/< synonyms file info$/;"	m	class:ISphTokenizer
m_tTestMatch	sphinxsearch.cpp	/^	CSphMatch					m_tTestMatch;$/;"	m	class:ExtRanker_c	file:
m_tThd	searchd.cpp	/^	SphThread_t					m_tThd;$/;"	m	struct:LocalSearchThreadContext_t	file:
m_tThd	searchd.cpp	/^	SphThread_t					m_tThd;$/;"	m	struct:SnippetThread_t	file:
m_tThd	searchd.cpp	/^	SphThread_t		m_tThd;$/;"	m	struct:ThdDesc_t	file:
m_tThdMutex	sphinx.cpp	/^	CSphMutex				m_tThdMutex;$/;"	m	class:CSphArena	file:
m_tTo	sphinxint.h	/^	CSphAttrLocator m_tTo;		\/\/\/< destination (dynamized) locator$/;"	m	struct:LocatorPair_t
m_tTokenizer	searchd.cpp	/^	CSphScopedPtr<ISphTokenizer> m_tTokenizer;$/;"	m	class:SnippetContext_t	file:
m_tUniq	sphinxsort.cpp	/^	CSphUniqounter	m_tUniq;$/;"	m	class:CSphKBufferGroupSorter	file:
m_tUpd	searchd.cpp	/^	const CSphAttrUpdate & m_tUpd;$/;"	m	struct:UpdateRequestBuilder_t	file:
m_tUpdate	searchd.cpp	/^	CSphAttrUpdate			m_tUpdate;$/;"	m	struct:SqlStmt_t	file:
m_tValue	indexer.cpp	/^	T						m_tValue;$/;"	m	struct:CSphMTFHashEntry	file:
m_tValue	sphinxsort.cpp	/^		T		m_tValue;$/;"	m	struct:CSphFixedHash::HashEntry_t	file:
m_tValue	sphinxstd.h	/^		T 				m_tValue;			\/\/\/< data, owned by the hash$/;"	m	struct:CSphOrderedHash::HashEntry_t
m_tVars	searchd.cpp	/^	SessionVars_t		m_tVars;$/;"	m	class:CSphinxqlSession	file:
m_tWFFileInfo	indexer.cpp	/^	CSphSavedFile				m_tWFFileInfo;$/;"	m	class:CSphStopwordBuilderDict	file:
m_tWFFileInfo	sphinx.cpp	/^	CSphSavedFile				m_tWFFileInfo;$/;"	m	struct:CSphDictCRCTraits	file:
m_tWordlist	sphinx.cpp	/^	CWordlist					m_tWordlist;			\/\/\/< my wordlist$/;"	m	class:CSphIndex_VLN	file:
m_tWordlist	sphinx.cpp	/^	const CSphAutofile &	m_tWordlist;$/;"	m	class:DiskIndexQwordSetup_c	file:
m_uAddr	searchd.cpp	/^	DWORD			m_uAddr;		\/\/\/< IP address$/;"	m	struct:AgentDesc_t	file:
m_uAttrDesc	sphinx.h	/^	DWORD				m_uAttrDesc;				\/\/\/< sort order mask (if i-th bit is set, i-th attr order is DESC)$/;"	m	struct:CSphMatchComparatorState
m_uBitmap	sphinx.cpp	/^		DWORD				m_uBitmap[PAGE_BITMAP];	\/\/\/< usage bitmap$/;"	m	struct:CSphArena::PageDesc_t	file:
m_uBlendVariants	sphinx.h	/^	BYTE							m_uBlendVariants;			\/\/\/< mask of blended variants as requested by blend_mode (see BLEND_TRIM_xxx flags)$/;"	m	class:ISphTokenizer
m_uBlendVariantsPending	sphinx.h	/^	BYTE							m_uBlendVariantsPending;	\/\/\/< mask of pending blended variants (we clear bits as we return variants)$/;"	m	class:ISphTokenizer
m_uCMD	searchd.cpp	/^	WORD					m_uCMD;		\/\/ last command (header)$/;"	m	struct:CrashQuery_t	file:
m_uCRC	sphinx.cpp	/^		SphWordID_t					m_uCRC;				\/\/ original unadjusted crc$/;"	m	struct:CSphDictKeywords::HitblockException_t	file:
m_uCRC32	sphinx.cpp	/^	DWORD						m_uCRC32;$/;"	m	struct:WordformContainer_t	file:
m_uCRC32	sphinx.h	/^	DWORD				m_uCRC32;$/;"	m	struct:CSphSavedFile
m_uCTime	sphinx.h	/^	SphOffset_t			m_uCTime;$/;"	m	struct:CSphSavedFile
m_uCurLCS	sphinxsearch.cpp	/^	BYTE				m_uCurLCS;$/;"	m	struct:RankerState_Expr_fn	file:
m_uCurLCS	sphinxsearch.cpp	/^	BYTE m_uCurLCS;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_uCurLCS	sphinxsearch.cpp	/^	BYTE m_uCurLCS;$/;"	m	struct:RankerState_Proximity_fn	file:
m_uCurPos	sphinxsearch.cpp	/^	DWORD m_uCurPos;$/;"	m	struct:RankerState_Proximity_fn	file:
m_uCurQposMask	sphinxsearch.cpp	/^	DWORD m_uCurQposMask;$/;"	m	struct:RankerState_Proximity_fn	file:
m_uCurrentID	sphinx.h	/^	SphDocID_t			m_uCurrentID;		\/\/\/< current min ID$/;"	m	struct:CSphSource_SQL
m_uDocBM25	sphinxsearch.cpp	/^	DWORD				m_uDocBM25;$/;"	m	struct:RankerState_Expr_fn	file:
m_uDocFields	sphinxsearch.cpp	/^	DWORD			m_uDocFields;$/;"	m	struct:ExtDoc_t	file:
m_uDocID	sphinx.cpp	/^	SphDocID_t	m_uDocID;	\/\/\/< doc id$/;"	m	struct:Ordinal_t	file:
m_uDocID	sphinx.cpp	/^	SphDocID_t	m_uDocID;$/;"	m	struct:MvaEntry_t	file:
m_uDocID	sphinx.cpp	/^	SphDocID_t	m_uDocID;$/;"	m	struct:OrdinalId_t	file:
m_uDocID	sphinx.h	/^		SphDocID_t				m_uDocID;		\/\/\/< document ID$/;"	m	struct:CSphAttrOverride::IdValuePair_t
m_uDocWordCount	sphinxsearch.cpp	/^	DWORD				m_uDocWordCount;$/;"	m	struct:RankerState_Expr_fn	file:
m_uDocid	sphinxint.h	/^	SphDocID_t	m_uDocid;$/;"	m	struct:ExtHit_t
m_uDocid	sphinxsearch.cpp	/^	SphDocID_t		m_uDocid;$/;"	m	struct:ExtDoc_t	file:
m_uDocid	sphinxsearch.cpp	/^	SphDocID_t		m_uDocid;$/;"	m	struct:ZoneKey_t	file:
m_uDocinfo	sphinx.cpp	/^	DWORD						m_uDocinfo;				\/\/\/< my docinfo cache size$/;"	m	class:CSphIndex_VLN	file:
m_uDocinfoIndex	sphinx.cpp	/^	DWORD						m_uDocinfoIndex;		\/\/\/< docinfo "index" entries count (each entry is 2x docinfo rows, for min\/max)$/;"	m	class:CSphIndex_VLN	file:
m_uDocsMaxID	sphinxsearch.cpp	/^	SphDocID_t					m_uDocsMaxID;			\/\/\/< max id in current docs chunk$/;"	m	class:ExtNWayT	file:
m_uDoneFor	sphinxsearch.cpp	/^	SphDocID_t					m_uDoneFor;$/;"	m	class:ExtTermPos_c	file:
m_uElements	sphinxint.h	/^	DWORD						m_uElements;	\/\/ counts total number of collected min\/max pairs$/;"	m	class:AttrIndexBuilder_t
m_uExactHit	sphinxsearch.cpp	/^	DWORD				m_uExactHit;$/;"	m	struct:RankerState_Expr_fn	file:
m_uExactHit	sphinxsearch.cpp	/^	DWORD m_uExactHit;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_uExpPos	sphinxsearch.cpp	/^	DWORD						m_uExpPos;$/;"	m	class:FSMproximity	file:
m_uFieldPos	sphinxsearch.cpp	/^	DWORD	m_uFieldPos;$/;"	m	class:ExtTermHitless_c	file:
m_uFirstHit	sphinxsearch.cpp	/^	DWORD						m_uFirstHit;		\/\/\/< hitpos of the beginning of the match chain$/;"	m	class:FSMmultinear	file:
m_uFirstNpos	sphinxsearch.cpp	/^	WORD						m_uFirstNpos;		\/\/\/< N-position of the head of the chain$/;"	m	class:FSMmultinear	file:
m_uFirstQpos	sphinxsearch.cpp	/^	WORD						m_uFirstQpos;		\/\/\/< Q-position of the head of the chain (for twofers)$/;"	m	class:FSMmultinear	file:
m_uFoundWords	sphinxexcerpt.cpp	/^	DWORD					m_uFoundWords;	\/\/\/< found words mask$/;"	m	class:ExcerptGen_c	file:
m_uFoundWords	sphinxexcerpt.cpp	/^	DWORD *									m_uFoundWords;$/;"	m	class:ISnippetsQword	file:
m_uGroup	sphinxsort.cpp	/^	SphGroupKey_t	m_uGroup;$/;"	m	struct:SphGroupedValue_t	file:
m_uHeadHit	sphinxsearch.cpp	/^	DWORD m_uHeadHit;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_uHint	sphinx.cpp	/^		BYTE						m_uHint;$/;"	m	struct:CSphDictKeywords::DictKeyword_t	file:
m_uHitCount	sphinxsearch.cpp	/^	DWORD				m_uHitCount[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_uHitPosition	sphinx.cpp	/^	SphOffset_t		m_uHitPosition;$/;"	m	class:DiskIndexQwordTraits_c	file:
m_uHitState	sphinx.cpp	/^	DWORD			m_uHitState;$/;"	m	class:DiskIndexQwordTraits_c	file:
m_uHitlistOffset	sphinxsearch.cpp	/^	SphOffset_t		m_uHitlistOffset;$/;"	m	struct:ExtDoc_t	file:
m_uHitpos	sphinxint.h	/^	Hitpos_t	m_uHitpos;$/;"	m	struct:ExtHit_t
m_uHitsOverFor	sphinxsearch.cpp	/^	SphDocID_t					m_uHitsOverFor;			\/\/\/< there are no more hits for matches block starting with this ID$/;"	m	class:ExtNWayT	file:
m_uHitsOverFor	sphinxsearch.cpp	/^	SphDocID_t					m_uHitsOverFor;		\/\/\/< there are no more hits for matches block starting with this ID$/;"	m	class:ExtNodeCached_t	file:
m_uHitsOverFor	sphinxsearch.cpp	/^	SphDocID_t					m_uHitsOverFor;		\/\/\/< there are no more hits for matches block starting with this ID$/;"	m	class:ExtTerm_c	file:
m_uHitsOverFor	sphinxsearch.cpp	/^	SphDocID_t					m_uHitsOverFor;$/;"	m	class:ExtOrder_c	file:
m_uHitsOverFor	sphinxsearch.cpp	/^	SphDocID_t			m_uHitsOverFor;			\/\/\/< no more hits for matches block starting with this ID$/;"	m	class:ExtUnit_c	file:
m_uIP	searchd.cpp	/^	DWORD			m_uIP;$/;"	m	struct:ListenerDesc_t	file:
m_uId	sphinx.cpp	/^	DWORD		m_uId;$/;"	m	struct:OrdinalId_t	file:
m_uIndexLast	sphinxint.h	/^	DOCID						m_uIndexLast;$/;"	m	class:AttrIndexBuilder_t
m_uIndexStart	sphinxint.h	/^	DOCID						m_uIndexStart;	\/\/ first and last docids of whole index$/;"	m	class:AttrIndexBuilder_t
m_uInitialMask	sphinxsearch.cpp	/^	DWORD						m_uInitialMask;		\/\/\/< backup mask for Reset()$/;"	m	class:ExtQuorum_c	file:
m_uInlinedHit	sphinx.cpp	/^	Hitpos_t		m_uInlinedHit;$/;"	m	class:DiskIndexQwordTraits_c	file:
m_uKey	tests.cpp	/^	DWORD m_uKey;$/;"	m	struct:SortPayload_t	file:
m_uLCS	sphinxsearch.cpp	/^	BYTE				m_uLCS[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_uLCS	sphinxsearch.cpp	/^	BYTE m_uLCS[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_uLCS	sphinxsearch.cpp	/^	BYTE m_uLCS[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Proximity_fn	file:
m_uLast	sphinxint.h	/^	DOCID						m_uLast;$/;"	m	class:AttrIndexBuilder_t
m_uLastDocHits	sphinx.cpp	/^	DWORD						m_uLastDocHits;			\/\/\/< doclist entry$/;"	m	class:CSphIndex_VLN	file:
m_uLastDocID	sphinxsearch.cpp	/^	SphDocID_t					m_uLastDocID;			\/\/\/< last emitted hit$/;"	m	class:ExtNWayT	file:
m_uLastID	sphinxsearch.cpp	/^	SphDocID_t					m_uLastID;$/;"	m	class:ExtTermPos_c	file:
m_uLastML	sphinxsearch.cpp	/^	DWORD						m_uLastML;			\/\/\/< the length of the previous hit$/;"	m	class:FSMmultinear	file:
m_uLastP	sphinxsearch.cpp	/^	DWORD						m_uLastP;			\/\/\/< position of the last hit$/;"	m	class:FSMmultinear	file:
m_uLastPos	sphinxexcerpt.cpp	/^	DWORD									m_uLastPos;$/;"	m	class:SnippetsDocIndex_c	file:
m_uLastPos	sphinxexcerpt.cpp	/^	DWORD						m_uLastPos;$/;"	m	class:SnippetsFastQword_c	file:
m_uLastSL	sphinxsearch.cpp	/^	DWORD						m_uLastSL;			\/\/\/< the length of the previous hit in Query$/;"	m	class:FSMmultinear	file:
m_uLastW	sphinxsearch.cpp	/^	DWORD						m_uLastW;			\/\/\/< last weight$/;"	m	class:FSMmultinear	file:
m_uLastZonedId	sphinxsearch.cpp	/^	mutable SphDocID_t			m_uLastZonedId;$/;"	m	class:ExtTermPos_c	file:
m_uLcsTailPos	sphinxsearch.cpp	/^	DWORD m_uLcsTailPos;$/;"	m	struct:RankerState_Proximity_fn	file:
m_uLcsTailQposMask	sphinxsearch.cpp	/^	DWORD m_uLcsTailQposMask;$/;"	m	struct:RankerState_Proximity_fn	file:
m_uMTime	sphinx.h	/^	SphOffset_t			m_uMTime;$/;"	m	struct:CSphSavedFile
m_uMagic	sphinxstd.cpp	/^	DWORD			m_uMagic;$/;"	m	struct:CSphMemHeader	file:
m_uMask	sphinxquery.cpp	/^	uint64_t			m_uMask;$/;"	m	class:BitAssociation_t	file:
m_uMask	sphinxquery.cpp	/^	uint64_t		m_uMask;$/;"	m	class:BitMask_t	file:
m_uMask	sphinxsearch.cpp	/^	DWORD						m_uMask;			\/\/\/< mask of nodes that count toward threshold$/;"	m	class:ExtQuorum_c	file:
m_uMaskEnd	sphinxsearch.cpp	/^	DWORD						m_uMaskEnd;			\/\/\/< index of the last bit in mask$/;"	m	class:ExtQuorum_c	file:
m_uMatchHits	sphinxsearch.h	/^	DWORD			m_uMatchHits;	\/\/\/< current match hits count$/;"	m	class:ISphQword
m_uMatchMask	sphinxsearch.cpp	/^	BYTE				m_uMatchMask[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_uMatchMask	sphinxsearch.cpp	/^	BYTE m_uMatchMask[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_MatchAny_fn	file:
m_uMatchedDocid	sphinxsearch.cpp	/^	SphDocID_t					m_uMatchedDocid;		\/\/\/< doc currently in process$/;"	m	class:ExtNWayT	file:
m_uMatchedDocid	sphinxsearch.cpp	/^	SphDocID_t					m_uMatchedDocid;	\/\/\/< current docid for hitlist emission$/;"	m	class:ExtQuorum_c	file:
m_uMatchedDocid	sphinxsearch.cpp	/^	SphDocID_t					m_uMatchedDocid;$/;"	m	class:ExtTwofer_c	file:
m_uMatchedFields	sphinxsearch.cpp	/^	DWORD				m_uMatchedFields;$/;"	m	struct:RankerState_Expr_fn	file:
m_uMatchlen	sphinxint.h	/^	WORD		m_uMatchlen;$/;"	m	struct:ExtHit_t
m_uMaxFetchedID	sphinx.h	/^	SphDocID_t			m_uMaxFetchedID;	\/\/\/< max actually fetched ID$/;"	m	struct:CSphSource_SQL
m_uMaxID	sphinx.h	/^	SphDocID_t			m_uMaxID;			\/\/\/< grand max ID$/;"	m	struct:CSphSource_SQL
m_uMaxID	sphinxsearch.cpp	/^	SphDocID_t					m_uMaxID;$/;"	m	class:ExtNode_i	file:
m_uMaxID	sphinxsearch.cpp	/^	SphDocID_t					m_uMaxID;$/;"	m	class:ExtRanker_c	file:
m_uMaxQueryMsec	sphinx.h	/^	DWORD			m_uMaxQueryMsec;	\/\/\/< max local index search time, in milliseconds (default is 0; means no limit)$/;"	m	class:CSphQuery
m_uMinExpPos	sphinxsearch.cpp	/^	DWORD m_uMinExpPos;$/;"	m	struct:RankerState_ProximityBM25Exact_fn	file:
m_uMinID	sphinx.h	/^	SphDocID_t			m_uMinID;			\/\/\/< grand min ID$/;"	m	struct:CSphSource_SQL
m_uMinMaxIndex	sphinx.cpp	/^	int64_t						m_uMinMaxIndex;			\/\/\/< stored min\/max cache offset (counted in DWORDs)$/;"	m	class:CSphIndex_VLN	file:
m_uMinQpos	sphinxsearch.cpp	/^	DWORD						m_uMinQpos;$/;"	m	class:FSMproximity	file:
m_uNodepos	sphinxint.h	/^	WORD		m_uNodepos;$/;"	m	struct:ExtHit_t
m_uOff	sphinx.cpp	/^		SphOffset_t					m_uOff;$/;"	m	struct:CSphDictKeywords::DictKeyword_t	file:
m_uOff	sphinx.cpp	/^	SphOffset_t		m_uOff;$/;"	m	struct:WordDictInfo_t	file:
m_uParagraphID	sphinxexcerpt.cpp	/^	SphWordID_t		m_uParagraphID;$/;"	m	class:HitCollector_c	file:
m_uPayload	tests.cpp	/^	DWORD m_uPayload[3];$/;"	m	struct:SortPayload_t	file:
m_uPayloadMask	sphinxsearch.cpp	/^	DWORD						m_uPayloadMask;						\/\/\/< exposed for ranker state functors$/;"	m	class:ExtRanker_c	file:
m_uPayloadMask	sphinxsearch.cpp	/^	DWORD m_uPayloadMask;$/;"	m	struct:RankerState_ProximityPayload_fn	file:
m_uPayloadRank	sphinxsearch.cpp	/^	DWORD m_uPayloadRank;$/;"	m	struct:RankerState_ProximityPayload_fn	file:
m_uPosition	sphinxexcerpt.cpp	/^		DWORD				m_uPosition;	\/\/\/< hit position in document$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_uPosition	sphinxsearch.h	/^	DWORD	m_uPosition;$/;"	m	struct:SphHitMark_t
m_uPrelastML	sphinxsearch.cpp	/^	DWORD						m_uPrelastML;$/;"	m	class:FSMmultinear	file:
m_uPrelastP	sphinxsearch.cpp	/^	DWORD						m_uPrelastP;$/;"	m	class:FSMmultinear	file:
m_uPrelastSL	sphinxsearch.cpp	/^	DWORD						m_uPrelastSL;$/;"	m	class:FSMmultinear	file:
m_uPrelastW	sphinxsearch.cpp	/^	DWORD						m_uPrelastW;$/;"	m	class:FSMmultinear	file:
m_uQLen	sphinxsearch.cpp	/^	DWORD						m_uQLen;$/;"	m	class:FSMproximity	file:
m_uQuerypos	sphinxint.h	/^	WORD		m_uQuerypos;$/;"	m	struct:ExtHit_t
m_uQwords	sphinxexcerpt.cpp	/^		DWORD				m_uQwords;			\/\/\/< matching query words mask$/;"	m	struct:ExcerptGen_c::Passage_t	file:
m_uRank	sphinxsearch.cpp	/^	DWORD m_uRank;$/;"	m	struct:RankerState_Fieldmask_fn	file:
m_uRank	sphinxsearch.cpp	/^	DWORD m_uRank;$/;"	m	struct:RankerState_Wordcount_fn	file:
m_uSentenceID	sphinxexcerpt.cpp	/^	SphWordID_t		m_uSentenceID;$/;"	m	class:HitCollector_c	file:
m_uSize	sphinx.h	/^	SphOffset_t			m_uSize;$/;"	m	struct:CSphSavedFile
m_uSpan	sphinxsearch.h	/^	DWORD	m_uSpan;$/;"	m	struct:SphHitMark_t
m_uSpanlen	sphinxint.h	/^	WORD		m_uSpanlen;$/;"	m	struct:ExtHit_t
m_uStar	sphinxexcerpt.cpp	/^		int		m_uStar;$/;"	m	struct:ExcerptGen_c::Keyword_t	file:
m_uStarPosition	sphinxquery.h	/^	DWORD				m_uStarPosition;$/;"	m	struct:XQKeyword_t
m_uStart	sphinxint.h	/^	DOCID						m_uStart;		\/\/ first and last docids of current chunk$/;"	m	class:AttrIndexBuilder_t
m_uStarted	searchd.cpp	/^	DWORD		m_uStarted;$/;"	m	struct:SearchdStats_t	file:
m_uStatic	sphinxstd.h	/^	DWORD		m_uStatic[4];$/;"	m	class:CSphBitvec
m_uStride	sphinxint.h	/^	DWORD						m_uStride;		\/\/ size of attribute's chunk (in DWORDs)$/;"	m	class:AttrIndexBuilder_t
m_uSyntaxFlags	searchd.cpp	/^	BYTE			m_uSyntaxFlags;$/;"	m	struct:SqlParser_c	file:
m_uTailDocid	sphinxsearch.cpp	/^	SphDocID_t			m_uTailDocid;			\/\/\/< trailing docid$/;"	m	class:ExtUnit_c	file:
m_uTailSentenceEnd	sphinxsearch.cpp	/^	DWORD				m_uTailSentenceEnd;		\/\/\/< trailing hits filtering state$/;"	m	class:ExtUnit_c	file:
m_uTermMaxID	sphinxsearch.cpp	/^	SphDocID_t					m_uTermMaxID;$/;"	m	class:ExtTermPos_c	file:
m_uTokenizerFNV	sphinx.cpp	/^	uint64_t					m_uTokenizerFNV;$/;"	m	struct:WordformContainer_t	file:
m_uUnpackMemoryLimit	sphinx.h	/^	DWORD							m_uUnpackMemoryLimit;$/;"	m	struct:CSphSourceParams_SQL
m_uValue	sphinx.h	/^			SphAttr_t			m_uValue;		\/\/\/< attribute value$/;"	m	union:CSphAttrOverride::IdValuePair_t::__anon10
m_uValue	sphinxsort.cpp	/^	SphAttr_t		m_uValue;$/;"	m	struct:SphGroupedValue_t	file:
m_uVer	searchd.cpp	/^	WORD					m_uVer;		\/\/ last command's version (header)$/;"	m	struct:CrashQuery_t	file:
m_uVersion	sphinx.cpp	/^	DWORD						m_uVersion;				\/\/\/< data files version$/;"	m	class:CSphIndex_VLN	file:
m_uWeight	sphinxint.h	/^	DWORD		m_uWeight;$/;"	m	struct:ExtHit_t
m_uWeight	sphinxsearch.cpp	/^	DWORD						m_uWeight;			\/\/\/< weight accum$/;"	m	class:FSMmultinear	file:
m_uWordCount	sphinxsearch.cpp	/^	DWORD				m_uWordCount[SPH_MAX_FIELDS];$/;"	m	struct:RankerState_Expr_fn	file:
m_uWordMask	sphinxexcerpt.cpp	/^	DWORD		m_uWordMask;$/;"	m	class:ISnippetsQword	file:
m_uWordid	sphinx.cpp	/^		SphWordID_t					m_uWordid;			\/\/ locally unique word id (crc value, adjusted in case of collsion)$/;"	m	struct:CSphDictKeywords::HitblockKeyword_t	file:
m_uWords	sphinxexcerpt.cpp	/^		DWORD				m_uWords;		\/\/\/< matching query words mask$/;"	m	struct:ExcerptGen_c::Token_t	file:
m_uWords	sphinxsearch.cpp	/^	DWORD						m_uWords;$/;"	m	class:FSMproximity	file:
m_uWordsExpected	sphinxsearch.cpp	/^	DWORD						m_uWordsExpected;	\/\/\/< now many hits we're expect$/;"	m	class:FSMmultinear	file:
m_uWordsExpected	sphinxsearch.cpp	/^	DWORD						m_uWordsExpected;$/;"	m	class:FSMproximity	file:
m_wrDict	sphinx.cpp	/^	CSphWriter			m_wrDict;			\/\/\/< final dict file writer$/;"	m	struct:CSphDictCRCTraits	file:
m_wrDoclist	sphinx.cpp	/^	CSphWriter					m_wrDoclist;	\/\/\/< wordlist writer$/;"	m	class:CSphIndex_VLN	file:
m_wrHitlist	sphinx.cpp	/^	CSphWriter					m_wrHitlist;	\/\/\/< hitlist writer$/;"	m	class:CSphIndex_VLN	file:
m_wrTmpDict	sphinx.cpp	/^	CSphWriter						m_wrTmpDict;		\/\/\/< temp dict writer$/;"	m	class:CSphDictKeywords	file:
main	indexer.cpp	/^int main ( int argc, char ** argv )$/;"	f
main	indextool.cpp	/^int main ( int argc, char ** argv )$/;"	f
main	search.cpp	/^int main ( int argc, char ** argv )$/;"	f
main	searchd.cpp	/^int main ( int argc, char **argv )$/;"	f
main	spelldump.cpp	/^int main ( int iArgs, char ** dArgs )$/;"	f
main	testrt.cpp	/^int main ()$/;"	f
main	tests.cpp	/^int main ()$/;"	f
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
md5_INCLUDED	md5.h	51;"	d
md5_append	md5.cpp	/^md5_append(md5_state_t *pms, const md5_byte_t *data, int nbytes)$/;"	f
md5_byte_t	md5.h	/^typedef unsigned char md5_byte_t; \/* 8-bit byte *\/$/;"	t
md5_finish	md5.cpp	/^md5_finish(md5_state_t *pms, md5_byte_t digest[16])$/;"	f
md5_init	md5.cpp	/^md5_init(md5_state_t *pms)$/;"	f
md5_process	md5.cpp	/^md5_process(md5_state_t *pms, const md5_byte_t *data \/*[64]*\/)$/;"	f	file:
md5_state_s	md5.h	/^typedef struct md5_state_s {$/;"	s
md5_state_t	md5.h	/^} md5_state_t;$/;"	t	typeref:struct:md5_state_s
md5_word_t	md5.h	/^typedef unsigned int md5_word_t; \/* 32-bit word *\/$/;"	t
mkdir_p	Makefile	/^mkdir_p = \/bin\/mkdir -p$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
multi_stmt	sphinxql.y	/^multi_stmt:$/;"	l
multi_stmt_list	sphinxql.y	/^multi_stmt_list:$/;"	l
myctime	search.cpp	/^const char * myctime ( DWORD uStamp )$/;"	f
named_const	sphinxql.y	/^named_const:$/;"	l
named_const_list	sphinxql.y	/^named_const_list:$/;"	l
new	sphinxstd.cpp	297;"	d	file:
new	sphinxstd.cpp	57;"	d	file:
new	sphinxstd.h	209;"	d
new	sphinxstd.h	210;"	d
noinst_LIBRARIES	Makefile	/^noinst_LIBRARIES = libsphinx.a$/;"	m
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = tests$(EXEEXT)$/;"	m
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
operator !	sphinxstd.h	/^	bool			operator ! () const				{ return m_pPtr==NULL; }$/;"	f	class:CSphRefcountedPtr
operator !=	sphinx.h	/^	bool				operator != ( const CSphFilterSettings & rhs ) const { return !( (*this)==rhs ); }$/;"	f	class:CSphFilterSettings
operator !=	sphinxstd.h	/^	bool operator != ( const char * t ) const$/;"	f	struct:CSphString
operator !=	sphinxstd.h	/^	inline bool operator != ( const CSphString & t ) const$/;"	f	struct:CSphString
operator !=	sphinxstd.h	/^inline bool operator != ( const CSphSmallBitvec& dFirst, const CSphSmallBitvec& dSecond )$/;"	f
operator &	sphinxstd.h	/^inline CSphSmallBitvec operator & ( const CSphSmallBitvec& dFirst, const CSphSmallBitvec& dSecond )$/;"	f
operator ()	sphinxsort.cpp	/^	T * operator () ( const KEY & tKey ) const$/;"	f	class:CSphFixedHash
operator ()	sphinxstd.h	/^	T * operator () ( const KEY & tKey ) const$/;"	f	class:CSphOrderedHash
operator ()	sphinxstd.h	/^	const T &			operator () ( const CLASS & arg ) const		{ return (&arg)->*m_pMember; }$/;"	f	struct:SphMemberFunctor_T
operator ()	sphinxstd.h	/^	const T &			operator () ( const T & arg ) const			{ return arg; }$/;"	f	struct:SphIdentityFunctor_T
operator +=	sphinxstd.h	/^	const CSphStringBuilder & operator += ( const char * sText )$/;"	f	class:CSphStringBuilder
operator ->	sphinxstd.h	/^	T *				operator -> () const			{ return m_pPtr; }$/;"	f	class:CSphRefcountedPtr
operator ->	sphinxstd.h	/^	T *				operator -> () const		{ return m_pPtr; }$/;"	f	class:CSphScopedPtr
operator <	indexer.cpp	/^inline bool operator < ( const Word_t & a, const Word_t & b)$/;"	f
operator <	searchd.cpp	/^	bool operator < ( const SearchFailure_t & r ) const$/;"	f	struct:SearchFailure_t
operator <	sphinx.cpp	/^		bool operator < ( const HitblockException_t & rhs ) const$/;"	f	struct:CSphDictKeywords::HitblockException_t
operator <	sphinx.cpp	/^	inline bool operator < ( const CSphSynonym & rhs ) const$/;"	f	struct:CSphSynonym
operator <	sphinx.cpp	/^	inline bool operator < ( const MvaEntry_t & rhs ) const$/;"	f	struct:MvaEntry_t
operator <	sphinx.h	/^		inline bool operator < ( const IdValuePair_t & rhs ) const$/;"	f	struct:CSphAttrOverride::IdValuePair_t
operator <	sphinx.h	/^		inline bool operator < ( const StripperTag_t & rhs ) const$/;"	f	struct:CSphHTMLStripper::StripperTag_t
operator <	sphinx.h	/^inline bool operator < ( const CSphRemapRange & a, const CSphRemapRange & b )$/;"	f
operator <	sphinxexcerpt.cpp	/^	bool operator<( const DocQueryZonePair_t & b ) const { return m_iDoc<b.m_iDoc; }$/;"	f	struct:DocQueryZonePair_t
operator <	sphinxexcerpt.cpp	/^inline bool operator < ( const ExcerptGen_c::Passage_t & a, const ExcerptGen_c::Passage_t & b )$/;"	f
operator <	sphinxexcerpt.cpp	/^inline bool operator < ( const ExcerptGen_c::Token_t & a, const ExcerptGen_c::Token_t & b )$/;"	f
operator <	sphinxexcerpt.cpp	/^inline bool operator < ( const SphHitMark_t & a, const SphHitMark_t & b )$/;"	f
operator <	sphinxquery.cpp	/^	bool operator< (const BitAssociation_t& second) const$/;"	f	class:BitAssociation_t
operator <	sphinxsort.cpp	/^	inline bool operator < ( const SphGroupedValue_t & rhs ) const$/;"	f	struct:SphGroupedValue_t
operator <	sphinxstd.h	/^	bool operator < ( const CSphString & b ) const$/;"	f	struct:CSphString
operator <	tests.cpp	/^	bool operator < ( const SortPayload_t & rhs ) const$/;"	f	struct:SortPayload_t
operator <	tests.cpp	/^inline bool operator < ( const CSphWordHit & a, const CSphWordHit & b )$/;"	f
operator =	searchd.cpp	/^	AgentConn_t & operator = ( const AgentDesc_t & rhs )$/;"	f	struct:AgentConn_t
operator =	searchd.cpp	/^	const SearchFailure_t & operator = ( const SearchFailure_t & r )$/;"	f	struct:SearchFailure_t
operator =	sphinx.cpp	/^	const CSphAutoArray & operator = ( const CSphAutoArray & )		{ assert(0); return *this; }$/;"	f	class:CSphAutoArray
operator =	sphinx.cpp	/^CSphQueryResultMeta & CSphQueryResultMeta::operator= ( const CSphQueryResultMeta & tMeta )$/;"	f	class:CSphQueryResultMeta
operator =	sphinx.cpp	/^const CSphLowercaser & CSphLowercaser::operator = ( const CSphLowercaser & rhs )$/;"	f	class:CSphLowercaser
operator =	sphinx.cpp	/^const CSphReader & CSphReader::operator = ( const CSphReader & rhs )$/;"	f	class:CSphReader
operator =	sphinx.h	/^	const CSphMatch & operator = ( const CSphMatch & )$/;"	f	class:CSphMatch
operator =	sphinxquery.h	/^	XQLimitSpec_t & operator = ( const XQLimitSpec_t& dLimit )$/;"	f	struct:XQLimitSpec_t
operator =	sphinxsearch.cpp	/^	const ExtNodeTFExt_fn & operator = ( const ExtNodeTFExt_fn & )$/;"	f	struct:ExtNodeTFExt_fn	file:
operator =	sphinxstd.h	/^	CSphRefcountedPtr<T> & operator = ( T * pPtr )$/;"	f	class:CSphRefcountedPtr
operator =	sphinxstd.h	/^	CSphRefcountedPtr<T> & operator = ( const CSphRefcountedPtr<T> & rhs )$/;"	f	class:CSphRefcountedPtr
operator =	sphinxstd.h	/^	CSphScopedPtr &	operator = ( T * pPtr )		{ SafeDelete ( m_pPtr ); m_pPtr = pPtr; return *this; }$/;"	f	class:CSphScopedPtr
operator =	sphinxstd.h	/^	const CSphOrderedHash<T,KEY,HASHFUNC,LENGTH> & operator = ( const CSphOrderedHash<T,KEY,HASHFUNC,LENGTH> & rhs )$/;"	f	class:CSphOrderedHash
operator =	sphinxstd.h	/^	const CSphString & operator = ( const CSphString & rhs )$/;"	f	struct:CSphString
operator =	sphinxstd.h	/^	const CSphStringBuilder & operator = ( const CSphStringBuilder & rhs )$/;"	f	class:CSphStringBuilder
operator =	sphinxstd.h	/^	const CSphVariant & operator = ( const CSphVariant & rhs )$/;"	f	struct:CSphVariant
operator =	sphinxstd.h	/^	const CSphVector<T> & operator = ( const CSphVector<T> & rhs )$/;"	f	class:CSphVector
operator =	sphinxstd.h	/^	const ISphNoncopyable &		operator = ( const ISphNoncopyable & ) { return *this; }$/;"	f	class:ISphNoncopyable
operator ==	searchd.cpp	/^	bool operator == ( const SearchFailure_t & r ) const$/;"	f	struct:SearchFailure_t
operator ==	sphinx.cpp	/^bool CSphFilterSettings::operator == ( const CSphFilterSettings & rhs ) const$/;"	f	class:CSphFilterSettings
operator ==	sphinx.h	/^	bool operator == ( const CSphColumnInfo & rhs ) const$/;"	f	struct:CSphColumnInfo
operator ==	sphinxexcerpt.cpp	/^	bool operator==( const DocQueryZonePair_t & b ) const { return m_iDoc==b.m_iDoc; }$/;"	f	struct:DocQueryZonePair_t
operator ==	sphinxsearch.cpp	/^	bool operator == ( const ZoneKey_t & rhs ) const$/;"	f	struct:ZoneKey_t
operator ==	sphinxsearch.h	/^	bool operator == ( const SphHitMark_t & rhs ) const$/;"	f	struct:SphHitMark_t
operator ==	sphinxsort.cpp	/^	inline bool operator == ( const SphGroupedValue_t & rhs ) const$/;"	f	struct:SphGroupedValue_t
operator ==	sphinxstd.h	/^	inline bool operator == ( const CSphString & t ) const$/;"	f	struct:CSphString
operator ==	sphinxstd.h	/^	inline bool operator == ( const char * t ) const$/;"	f	struct:CSphString
operator ==	sphinxstd.h	/^inline bool operator == ( const CSphSmallBitvec& dFirst, const CSphSmallBitvec& dSecond )$/;"	f
operator >	sphinxexcerpt.cpp	/^	bool operator>( const DocQueryZonePair_t & b ) const { return m_iDoc>b.m_iDoc; }$/;"	f	struct:DocQueryZonePair_t
operator T *	sphinx.cpp	/^	operator T * ()													{ return m_pData; }$/;"	f	class:CSphAutoArray
operator []	sphinxstd.h	/^	T & operator [] ( const KEY & tKey ) const$/;"	f	class:CSphOrderedHash
operator []	sphinxstd.h	/^	T & operator [] ( int iIndex ) const$/;"	f	class:CSphFixedVector
operator []	sphinxstd.h	/^	T & operator [] ( int iIndex )$/;"	f	class:CSphVector
operator []	sphinxstd.h	/^	const T & operator [] ( int iIndex ) const$/;"	f	class:CSphVector
operator []	sphinxstd.h	/^	inline const T & operator [] ( int64_t iIndex ) const$/;"	f	class:CSphSharedBuffer
operator delete	sphinxstd.cpp	/^void operator delete ( void * pPtr )						{ sphDebugDelete ( pPtr ); }$/;"	f
operator delete	sphinxstd.cpp	/^void operator delete ( void * pPtr )$/;"	f
operator delete []	sphinxstd.cpp	/^void operator delete [] ( void * pPtr )						{ sphDebugDelete ( pPtr ); }$/;"	f
operator delete []	sphinxstd.cpp	/^void operator delete [] ( void * pPtr )$/;"	f
operator new	sphinxstd.cpp	/^void * operator new ( size_t iSize, const char * sFile, int iLine )$/;"	f
operator new	sphinxstd.cpp	/^void * operator new ( size_t iSize, const char *, int )		{ return sphDebugNew ( iSize ); }$/;"	f
operator new []	sphinxstd.cpp	/^void * operator new [] ( size_t iSize, const char * sFile, int iLine )$/;"	f
operator new []	sphinxstd.cpp	/^void * operator new [] ( size_t iSize, const char *, int )	{ return sphDebugNew ( iSize ); }$/;"	f
operator |	sphinxstd.h	/^inline CSphSmallBitvec operator | ( const CSphSmallBitvec& dFirst, const CSphSmallBitvec& dSecond )$/;"	f
operator |=	sphinxstd.h	/^	CSphSmallBitvec& operator |= ( const CSphSmallBitvec& dSecond )$/;"	f	class:CSphSmallBitvec
opt_alias	sphinxql.y	/^opt_alias:$/;"	l
opt_alias	sphinxselect.y	/^opt_alias:$/;"	l
opt_as	sphinxql.y	/^opt_as:$/;"	l
opt_call_opts_list	sphinxql.y	/^opt_call_opts_list:$/;"	l
opt_column_list	sphinxql.y	/^opt_column_list:$/;"	l
opt_group_clause	sphinxql.y	/^opt_group_clause:$/;"	l
opt_group_order_clause	sphinxql.y	/^opt_group_order_clause:$/;"	l
opt_limit_clause	sphinxql.y	/^opt_limit_clause:$/;"	l
opt_option_clause	sphinxql.y	/^opt_option_clause:$/;"	l
opt_order_clause	sphinxql.y	/^opt_order_clause:$/;"	l
opt_scope	sphinxql.y	/^opt_scope:$/;"	l
opt_show_variables_where	sphinxql.y	/^opt_show_variables_where:$/;"	l
opt_where_clause	sphinxql.y	/^opt_where_clause:$/;"	l
option_clause	sphinxql.y	/^option_clause:$/;"	l
option_item	sphinxql.y	/^option_item:$/;"	l
option_list	sphinxql.y	/^option_list:$/;"	l
order_clause	sphinxql.y	/^order_clause:$/;"	l
order_item	sphinxql.y	/^order_item:$/;"	l
order_items_list	sphinxql.y	/^order_items_list:$/;"	l
orlist	sphinxquery.y	/^orlist:$/;"	l
orlistf	sphinxquery.y	/^orlistf:$/;"	l
pNode	yysphinxquery.c	/^	XQNode_t *		pNode;			\/\/ tree node$/;"	m	union:YYSTYPE	file:
pNode	yysphinxquery.h	/^	XQNode_t *		pNode;			\/\/ tree node$/;"	m	union:YYSTYPE
pWord	sphinxmetaphone.cpp	/^	BYTE *	pWord;$/;"	m	struct:CurrentWord_t	file:
paragraph	sphinxquery.y	/^paragraph:$/;"	l
pclose	sphinx.cpp	76;"	d	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
pgconfig	Makefile	/^pgconfig = $/;"	m
phrase	sphinxquery.y	/^phrase:$/;"	l
phrasetoken	sphinxquery.y	/^phrasetoken:$/;"	l
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/sphinx$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/sphinx$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/sphinx$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/sphinx$/;"	m
popen	sphinx.cpp	75;"	d	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
psdir	Makefile	/^psdir = ${docdir}$/;"	m
query	sphinxquery.y	/^query:$/;"	l
rawkeyword	sphinxquery.y	/^rawkeyword:$/;"	l
request	sphinxql.y	/^request:$/;"	l
rtrim	sphinxutils.cpp	/^static char * rtrim ( char * sLine )$/;"	f	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
search_DEPENDENCIES	Makefile	/^search_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
search_LDADD	Makefile	/^search_LDADD = $(LDADD)$/;"	m
search_OBJECTS	Makefile	/^search_OBJECTS = $(am_search_OBJECTS)$/;"	m
search_SOURCES	Makefile	/^search_SOURCES = search.cpp$/;"	m
searchd_DEPENDENCIES	Makefile	/^searchd_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
searchd_LDADD	Makefile	/^searchd_LDADD = $(LDADD)$/;"	m
searchd_OBJECTS	Makefile	/^searchd_OBJECTS = $(am_searchd_OBJECTS)$/;"	m
searchd_SOURCES	Makefile	/^searchd_SOURCES = searchd.cpp$/;"	m
select_atom	sphinxselect.y	/^select_atom :$/;"	l
select_expr	sphinxql.y	/^select_expr:$/;"	l
select_expr	sphinxselect.y	/^select_expr:$/;"	l
select_from	sphinxql.y	/^select_from:$/;"	l
select_item	sphinxql.y	/^select_item:$/;"	l
select_item	sphinxselect.y	/^select_item:$/;"	l
select_items_list	sphinxql.y	/^select_items_list:$/;"	l
select_list	sphinxselect.y	/^select_list:$/;"	l
select_sysvar	sphinxql.y	/^select_sysvar:$/;"	l
sentence	sphinxquery.y	/^sentence:$/;"	l
sequence	udfexample.c	/^DLLEXPORT sphinx_int64_t sequence ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error_flag )$/;"	f
sequence_deinit	udfexample.c	/^DLLEXPORT void sequence_deinit ( SPH_UDF_INIT * init )$/;"	f
sequence_init	udfexample.c	/^DLLEXPORT int sequence_init ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error_message )$/;"	f
set_global_stmt	sphinxql.y	/^set_global_stmt:$/;"	l
set_stmt	sphinxql.y	/^set_stmt:$/;"	l
set_string_value	sphinxql.y	/^set_string_value:$/;"	l
set_transaction	sphinxql.y	/^set_transaction:$/;"	l
set_value	sphinxql.y	/^set_value:$/;"	l
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
show_collation	sphinxql.y	/^show_collation:$/;"	l
show_stmt	sphinxql.y	/^show_stmt:$/;"	l
show_tables	sphinxql.y	/^show_tables:$/;"	l
show_variables	sphinxql.y	/^show_variables:$/;"	l
show_variables_where	sphinxql.y	/^show_variables_where:$/;"	l
show_variables_where_entry	sphinxql.y	/^show_variables_where_entry:$/;"	l
show_variables_where_list	sphinxql.y	/^show_variables_where_list:$/;"	l
show_what	sphinxql.y	/^show_what:$/;"	l
sigchld	searchd.cpp	/^void sigchld ( int )$/;"	f
sighup	searchd.cpp	/^void sighup ( int )$/;"	f
sigsegv	indexer.cpp	/^LONG WINAPI sigsegv ( EXCEPTION_POINTERS * pExc )$/;"	f
sigsegv	indexer.cpp	/^void sigsegv ( int sig )$/;"	f
sigterm	searchd.cpp	/^void sigterm ( int )$/;"	f
sigusr1	searchd.cpp	/^void sigusr1 ( int )$/;"	f
simple_set_value	sphinxql.y	/^simple_set_value:$/;"	l
snprintf	indexer.cpp	26;"	d	file:
snprintf	sphinx.cpp	77;"	d	file:
snprintf	sphinxstd.h	93;"	d
snprintf	udfexample.c	27;"	d	file:
socklen_t	searchd.cpp	635;"	d	file:
sp_item	sphinxquery.y	/^sp_item:$/;"	l
spelldump_DEPENDENCIES	Makefile	/^spelldump_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
spelldump_LDADD	Makefile	/^spelldump_LDADD = $(LDADD)$/;"	m
spelldump_OBJECTS	Makefile	/^spelldump_OBJECTS = $(am_spelldump_OBJECTS)$/;"	m
spelldump_SOURCES	Makefile	/^spelldump_SOURCES = spelldump.cpp$/;"	m
sphAddMva64	sphinx.cpp	/^static int sphAddMva64 ( CSphVector<DWORD> & dStorage, int64_t iVal )$/;"	f	file:
sphAllocBytes	sphinxstd.cpp	/^int64_t	sphAllocBytes ()$/;"	f
sphAllocBytes	sphinxstd.cpp	/^int64_t sphAllocBytes ()		{ return g_iCurBytes; }$/;"	f
sphAllocsCheck	sphinxstd.cpp	/^void sphAllocsCheck ()			{}$/;"	f
sphAllocsCheck	sphinxstd.cpp	/^void sphAllocsCheck ()$/;"	f
sphAllocsCount	sphinxstd.cpp	/^int sphAllocsCount ()			{ return g_iCurAllocs; }$/;"	f
sphAllocsCount	sphinxstd.cpp	/^int sphAllocsCount ()$/;"	f
sphAllocsDump	sphinxstd.cpp	/^void sphAllocsDump ( int iFile, int iSinceID )$/;"	f
sphAllocsDump	sphinxstd.cpp	/^void sphAllocsDump ( int, int )	{}$/;"	f
sphAllocsLastID	sphinxstd.cpp	/^int sphAllocsLastID ()			{ return g_iAllocsId; }$/;"	f
sphAllocsLastID	sphinxstd.cpp	/^int sphAllocsLastID ()$/;"	f
sphAllocsStats	sphinxstd.cpp	/^void sphAllocsStats ()$/;"	f
sphArenaInit	sphinx.cpp	/^const char * sphArenaInit ( int iMaxBytes )$/;"	f
sphAssert	sphinxstd.cpp	/^void sphAssert ( const char * sExpr, const char * sFile, int iLine )$/;"	f
sphBacktrace	sphinxutils.cpp	/^void sphBacktrace ( EXCEPTION_POINTERS * pExc, const char * sFile )$/;"	f
sphBacktrace	sphinxutils.cpp	/^void sphBacktrace ( int iFD, bool bSafe )$/;"	f
sphBinarySearch	sphinxstd.h	/^T * sphBinarySearch ( T * pStart, T * pEnd, T & tRef )$/;"	f
sphBinarySearch	sphinxstd.h	/^T * sphBinarySearch ( T * pStart, T * pEnd, const PRED & tPred, U tRef )$/;"	f
sphBitCount	sphinxstd.h	/^inline int sphBitCount ( DWORD n )$/;"	f
sphBuildExcerpt	sphinxexcerpt.cpp	/^char * sphBuildExcerpt ( ExcerptQuery_t & tOptions, const CSphIndex * pIndex, const CSphHTMLStripper * pStripper, const XQQuery_t & tExtQuery,$/;"	f
sphCRC32	sphinx.cpp	/^DWORD sphCRC32 ( const BYTE * pString )$/;"	f
sphCRC32	sphinx.cpp	/^DWORD sphCRC32 ( const BYTE * pString, int iLen )$/;"	f
sphCRC32	sphinx.cpp	/^DWORD sphCRC32 ( const BYTE * pString, int iLen, DWORD uPrevCRC )$/;"	f
sphCalcFileCRC32	sphinx.cpp	/^bool sphCalcFileCRC32 ( const char * szFilename, DWORD & uCRC32 )$/;"	f
sphCheckOptionsSPZ	searchd.cpp	/^bool sphCheckOptionsSPZ ( const ExcerptQuery_t & q, const CSphString & sPassageBoundaryMode, CSphString & sError )$/;"	f
sphCheckQueryHeight	sphinx.cpp	/^bool sphCheckQueryHeight ( const XQNode_t * pRoot, CSphString & sError )$/;"	f
sphCheckWordStats	sphinx.cpp	/^void sphCheckWordStats ( const SmallStringHash_T<CSphQueryResultMeta::WordStat_t> & hDst, const SmallStringHash_T<CSphQueryResultMeta::WordStat_t> & hSrc, const char * sIndex, CSphString & sWarning )$/;"	f
sphCheckpointCmp	sphinxint.h	/^int sphCheckpointCmp ( const char * sWord, int iLen, SphWordID_t iWordID, bool bWordDict, const CP & tCP )$/;"	f
sphCheckpointCmpStrictly	sphinxint.h	/^int sphCheckpointCmpStrictly ( const char * sWord, int iLen, SphWordID_t iWordID, bool bWordDict, const CP & tCP )$/;"	f
sphCollationFromName	searchd.cpp	/^static ESphCollation sphCollationFromName ( const CSphString & sName, CSphString * pError )$/;"	f	file:
sphCollationInit	sphinxsort.cpp	/^void sphCollationInit()$/;"	f
sphCollationToName	searchd.cpp	/^const char * sphCollationToName ( ESphCollation eColl )$/;"	f
sphConfDictionary	sphinxutils.cpp	/^void sphConfDictionary ( const CSphConfigSection & hIndex, CSphDictSettings & tSettings )$/;"	f
sphConfIndex	sphinxutils.cpp	/^bool sphConfIndex ( const CSphConfigSection & hIndex, CSphIndexSettings & tSettings, CSphString & sError )$/;"	f
sphConfTokenizer	sphinxutils.cpp	/^bool sphConfTokenizer ( const CSphConfigSection & hIndex, CSphTokenizerSettings & tSettings, CSphString & sError )$/;"	f
sphCopyEncodedBase64	searchd.cpp	/^bool sphCopyEncodedBase64 ( QueryCopyState_t & tEnc )$/;"	f
sphCopySphinxQL	searchd.cpp	/^static bool sphCopySphinxQL ( QueryCopyState_t & tState )$/;"	f	file:
sphCpuTimer	searchd.cpp	/^int64_t sphCpuTimer ()$/;"	f
sphCreateDictionaryCRC	sphinx.cpp	/^CSphDict * sphCreateDictionaryCRC ( const CSphDictSettings & tSettings, ISphTokenizer * pTokenizer, CSphString & sError, const char * sIndex )$/;"	f
sphCreateDictionaryKeywords	sphinx.cpp	/^CSphDict * sphCreateDictionaryKeywords ( const CSphDictSettings & tSettings, ISphTokenizer * pTokenizer, CSphString & sError, const char * sIndex )$/;"	f
sphCreateFilter	sphinxfilter.cpp	/^ISphFilter * sphCreateFilter ( const CSphFilterSettings & tSettings, const CSphSchema & tSchema, const DWORD * pMvaPool, CSphString & sError )$/;"	f
sphCreateGrouperString	sphinxsort.cpp	/^CSphGrouper * sphCreateGrouperString ( const CSphAttrLocator & tLoc, ESphCollation eCollation )$/;"	f
sphCreateIndexPhrase	sphinx.cpp	/^CSphIndex * sphCreateIndexPhrase ( const char* szIndexName, const char * sFilename )$/;"	f
sphCreateInetSocket	searchd.cpp	/^int sphCreateInetSocket ( DWORD uAddr, int iPort )$/;"	f
sphCreateQueue	sphinxsort.cpp	/^ISphMatchSorter * sphCreateQueue ( const CSphQuery * pQuery, const CSphSchema & tSchema,$/;"	f
sphCreateRanker	sphinxsearch.cpp	/^ISphRanker * sphCreateRanker ( const XQQuery_t & tXQ, const CSphQuery * pQuery, CSphQueryResult * pResult, const ISphQwordSetup & tTermSetup, const CSphQueryContext & tCtx )$/;"	f
sphCreateRtKeywordsDictionaryWrapper	sphinx.cpp	/^ISphRtDictWraper * sphCreateRtKeywordsDictionaryWrapper ( CSphDict * pBase )$/;"	f
sphCreateSBCSTokenizer	sphinx.cpp	/^ISphTokenizer * sphCreateSBCSTokenizer ()$/;"	f
sphCreateSorter1st	sphinxsort.cpp	/^static ISphMatchSorter * sphCreateSorter1st ( ESphSortFunc eMatchFunc, ESphSortFunc eGroupFunc, const CSphQuery * pQuery, const CSphGroupSorterSettings & tSettings )$/;"	f	file:
sphCreateSorter2nd	sphinxsort.cpp	/^static ISphMatchSorter * sphCreateSorter2nd ( ESphSortFunc eGroupFunc, const ISphMatchComparator * pComp, const CSphQuery * pQuery, const CSphGroupSorterSettings & tSettings )$/;"	f	file:
sphCreateSorter3rd	sphinxsort.cpp	/^static ISphMatchSorter * sphCreateSorter3rd ( const ISphMatchComparator * pComp, const CSphQuery * pQuery, const CSphGroupSorterSettings & tSettings )$/;"	f	file:
sphCreateSourceXmlpipe2	sphinx.cpp	/^CSphSource * sphCreateSourceXmlpipe2 ( const CSphConfigSection * pSource, FILE * pPipe, BYTE * dInitialBuf, int iBufLen, const char * szSourceName, int iMaxFieldLen )$/;"	f
sphCreateUTF8NgramTokenizer	sphinx.cpp	/^ISphTokenizer * sphCreateUTF8NgramTokenizer ()$/;"	f
sphCreateUTF8Tokenizer	sphinx.cpp	/^ISphTokenizer * sphCreateUTF8Tokenizer ()$/;"	f
sphCreateUnixSocket	searchd.cpp	/^int sphCreateUnixSocket ( const char * sPath )$/;"	f
sphDW2F	sphinxstd.h	/^inline float sphDW2F ( DWORD d )	{ union { float f; DWORD d; } u; u.d = d; return u.f; }$/;"	f
sphDebugDelete	sphinxstd.cpp	/^void sphDebugDelete ( void * pPtr )$/;"	f
sphDebugDelete	sphinxstd.cpp	/^void sphDebugDelete ( void * pPtr, bool bArray )$/;"	f
sphDebugNew	sphinxstd.cpp	/^void * sphDebugNew ( size_t iSize )$/;"	f
sphDebugNew	sphinxstd.cpp	/^void * sphDebugNew ( size_t iSize, const char * sFile, int iLine, bool bArray )$/;"	f
sphDetectXMLPipe	sphinx.cpp	/^FILE * sphDetectXMLPipe ( const char * szCommand, BYTE * dBuf, int & iBufSize, int iMaxBufSize, bool & bUsePipe2 )$/;"	f
sphDictCmp	sphinx.cpp	/^int sphDictCmp ( const char * pStr1, int iLen1, const char * pStr2, int iLen2 )$/;"	f
sphDictCmpStrictly	sphinx.cpp	/^int sphDictCmpStrictly ( const char * pStr1, int iLen1, const char * pStr2, int iLen2 )$/;"	f
sphDoclistHintPack	sphinx.cpp	/^BYTE sphDoclistHintPack ( SphOffset_t iDocs, SphOffset_t iLen )$/;"	f
sphDoneIOStats	sphinx.cpp	/^void sphDoneIOStats ()$/;"	f
sphDumpAttr	sphinx.cpp	/^static CSphString sphDumpAttr ( const CSphColumnInfo & tAttr )$/;"	f	file:
sphExpandXQNode	sphinx.cpp	/^XQNode_t * sphExpandXQNode ( XQNode_t * pNode, ExpansionContext_t & tCtx )$/;"	f
sphExprParse	sphinxexpr.cpp	/^ISphExpr * sphExprParse ( const char * sExpr, const CSphSchema & tSchema, ESphAttr * pAttrType, bool * pUsesWeight, CSphString & sError, CSphSchema * pExtra, ISphExprHook * pHook )$/;"	f
sphF2DW	sphinxstd.h	/^inline DWORD sphF2DW ( float f )	{ union { float f; DWORD d; } u; u.f = f; return u.d; }$/;"	f
sphFDSet	searchd.cpp	/^void sphFDSet ( int fd, fd_set * fdset )$/;"	f
sphFDSet	searchd.cpp	/^void sphFDSet ( int fd, fd_set * set )$/;"	f
sphFNV64	sphinx.cpp	/^uint64_t sphFNV64 ( const BYTE * s )$/;"	f
sphFNV64	sphinx.cpp	/^uint64_t sphFNV64 ( const BYTE * s, int iLen, uint64_t uPrev )$/;"	f
sphFatal	searchd.cpp	/^void sphFatal ( const char * sFmt, ... )$/;"	f
sphFixupIndexSettings	sphinxutils.cpp	/^bool sphFixupIndexSettings ( CSphIndex * pIndex, const CSphConfigSection & hIndex, CSphString & sError )$/;"	f
sphFlattenQueue	sphinxsort.cpp	/^void sphFlattenQueue ( ISphMatchSorter * pQueue, CSphQueryResult * pResult, int iTag )$/;"	f
sphFormatCurrentTime	searchd.cpp	/^int sphFormatCurrentTime ( char * sTimeBuf, int iBufLen )$/;"	f
sphFormatIP	searchd.cpp	/^char * sphFormatIP ( char * sBuffer, int iBufferSize, DWORD uAddress )$/;"	f
sphGetAddress	searchd.cpp	/^DWORD sphGetAddress ( const char * sHost, bool bFatal=false )$/;"	f
sphGetPassageBoundary	searchd.cpp	/^ESphSpz sphGetPassageBoundary ( const CSphString & sPassageBoundaryMode )$/;"	f
sphGetRowAttr	sphinx.h	/^inline SphAttr_t sphGetRowAttr ( const CSphRowitem * pRow, const CSphAttrLocator & tLoc )$/;"	f
sphGroupMatch	sphinx.cpp	/^inline bool sphGroupMatch ( SphAttr_t iGroup, const SphAttr_t * pGroups, int iGroups )$/;"	f
sphHasExpressions	sphinxsort.cpp	/^bool sphHasExpressions ( const CSphQuery & tQuery, const CSphSchema & tSchema )$/;"	f
sphHeapSort	sphinxstd.h	/^void sphHeapSort ( T * pData, int iCount, U COMP, V ACC )$/;"	f
sphInfo	sphinxutils.cpp	/^void sphInfo ( const char * sFmt, ... )$/;"	f
sphInitIOStats	sphinx.cpp	/^bool sphInitIOStats ()$/;"	f
sphInterruptNow	sphinxsearch.cpp	/^void sphInterruptNow()$/;"	f
sphIsAlpha	sphinxutils.h	/^inline int sphIsAlpha ( int c )$/;"	f
sphIsAttr	sphinx.h	/^inline int sphIsAttr ( int c )$/;"	f
sphIsModifier	sphinxutils.h	/^inline bool sphIsModifier ( int iSymbol )$/;"	f
sphIsReadable	sphinx.cpp	/^bool sphIsReadable ( const char * sPath, CSphString * pError )$/;"	f
sphIsSortStringInternal	sphinxsort.cpp	/^bool sphIsSortStringInternal ( const char * sColumnName )$/;"	f
sphIsSpace	sphinxutils.h	/^inline bool sphIsSpace ( int iCode )$/;"	f
sphIsTag	sphinx.cpp	/^static inline int sphIsTag ( int c )$/;"	f	file:
sphIsTagStart	sphinx.cpp	/^static inline int sphIsTagStart ( int c )$/;"	f	file:
sphJoinFilters	sphinxfilter.cpp	/^ISphFilter * sphJoinFilters ( ISphFilter * pA, ISphFilter * pB )$/;"	f
sphLoadConfig	sphinxutils.cpp	/^const char * sphLoadConfig ( const char * sOptConfig, bool bQuiet, CSphConfigParser & cp )$/;"	f
sphLockEx	sphinx.cpp	/^bool sphLockEx ( int iFile, bool bWait )$/;"	f
sphLockUn	sphinx.cpp	/^void sphLockUn ( int iFile )$/;"	f
sphLog	searchd.cpp	/^void sphLog ( ESphLogLevel eLevel, const char * sFmt, va_list ap )$/;"	f
sphLog2	sphinxstd.h	/^inline int		sphLog2 ( uint64_t iValue )$/;"	f
sphLogDebug	sphinxutils.cpp	/^void sphLogDebug ( const char * sFmt, ... )$/;"	f
sphLogDebugv	sphinxutils.cpp	/^void sphLogDebugv ( const char * sFmt, ... )$/;"	f
sphLogDebugvv	sphinxutils.cpp	/^void sphLogDebugvv ( const char * sFmt, ... )$/;"	f
sphLogEntry	searchd.cpp	/^void sphLogEntry ( ESphLogLevel eLevel, char * sBuf, char * sTtyBuf )$/;"	f
sphLogFatal	sphinxutils.cpp	/^void sphLogFatal ( const char * sFmt, ... )$/;"	f
sphMarkCommonSubtrees	sphinxquery.cpp	/^int sphMarkCommonSubtrees ( int iXQ, const XQQuery_t * pXQ )$/;"	f
sphMemStatDone	sphinxstd.cpp	/^void sphMemStatDone () {}$/;"	f
sphMemStatDump	sphinxstd.cpp	/^void sphMemStatDump ( int ) {}$/;"	f
sphMemStatInit	sphinxstd.cpp	/^void sphMemStatInit () {}$/;"	f
sphMemberLess	sphinxstd.h	/^sphMemberLess ( T C::* pMember )$/;"	f
sphMicroTimer	sphinx.cpp	/^int64_t sphMicroTimer()$/;"	f
sphPackAttrLocator	sphinxexpr.cpp	/^static uint64_t sphPackAttrLocator ( const CSphAttrLocator & tLoc, int iLocator )$/;"	f	file:
sphPackStrlen	sphinx.h	/^inline int sphPackStrlen ( BYTE * pRow, int iLen )$/;"	f
sphPackZone	sphinxexcerpt.cpp	/^uint64_t sphPackZone ( DWORD uPosition, int iSiblingIndex, int iZoneType )$/;"	f
sphParseCharset	sphinx.cpp	/^bool sphParseCharset ( const char * sCharset, CSphVector<CSphRemapRange> & dRemaps )$/;"	f
sphParseExtendedQuery	sphinxquery.cpp	/^bool sphParseExtendedQuery ( XQQuery_t & tParsed, const char * sQuery, const ISphTokenizer * pTokenizer, const CSphSchema * pSchema, CSphDict * pDict, int iStopwordStep )$/;"	f
sphParseSortClause	sphinxsort.cpp	/^static ESortClauseParseResult sphParseSortClause ( const CSphQuery * pQuery, const char * sClause, const CSphSchema & tSchema,$/;"	f	file:
sphPoll	searchd.cpp	/^int sphPoll ( int iSock, int64_t tmTimeout, bool bWrite=false )$/;"	f
sphPread	sphinx.cpp	/^int sphPread ( int iFD, void * pBuf, int iBytes, SphOffset_t iOffset )$/;"	f
sphProfilerAdjust	sphinx.cpp	/^static void sphProfilerAdjust ( int iTimer )$/;"	f	file:
sphProfilerDone	sphinx.cpp	/^void sphProfilerDone ()$/;"	f
sphProfilerInit	sphinx.cpp	/^void sphProfilerInit ()$/;"	f
sphProfilerPop	sphinx.cpp	/^void sphProfilerPop ( ESphTimer eTimer )$/;"	f
sphProfilerPush	sphinx.cpp	/^void sphProfilerPush ( ESphTimer eTimer )$/;"	f
sphProfilerShow	sphinx.cpp	/^void sphProfilerShow ( int iTimer=0, int iLevel=0 )$/;"	f
sphQueryHeightCalc	sphinx.cpp	/^static int sphQueryHeightCalc ( const XQNode_t * pNode )$/;"	f	file:
sphRead	sphinx.cpp	/^static size_t sphRead ( int iFD, void * pBuf, size_t iCount )$/;"	f	file:
sphReadThrottled	sphinx.cpp	/^size_t sphReadThrottled ( int iFD, void * pBuf, size_t iCount )$/;"	f
sphSafeInfo	sphinxutils.cpp	/^void sphSafeInfo ( int iFD, const char * sFmt, ... )$/;"	f
sphSearchCheckpoint	sphinxint.h	/^const CP * sphSearchCheckpoint ( const char * sWord, int iWordLen, SphWordID_t iWordID$/;"	f
sphSeek	indextool.cpp	306;"	d	file:
sphSeek	indextool.cpp	308;"	d	file:
sphSeek	sphinx.cpp	78;"	d	file:
sphSeek	sphinx.cpp	93;"	d	file:
sphSetDebugCheck	sphinx.cpp	/^void sphSetDebugCheck ()$/;"	f
sphSetLogger	sphinxutils.cpp	/^void sphSetLogger ( SphLogger_fn fnLog )$/;"	f
sphSetProcessInfo	sphinx.cpp	/^void sphSetProcessInfo ( bool bHead )$/;"	f
sphSetQuiet	sphinx.cpp	/^void sphSetQuiet ( bool bQuiet )$/;"	f
sphSetReadBuffers	sphinx.cpp	/^void sphSetReadBuffers ( int iReadBuffer, int iReadUnhinted )$/;"	f
sphSetRowAttr	sphinx.h	/^inline void sphSetRowAttr ( CSphRowitem * pRow, const CSphAttrLocator & tLoc, SphAttr_t uValue )$/;"	f
sphSetSockNB	searchd.cpp	/^int sphSetSockNB ( int iSock )$/;"	f
sphSetThrottling	sphinx.cpp	/^void sphSetThrottling ( int iMaxIOps, int iMaxIOSize )$/;"	f
sphSetUnlinkOld	sphinxutils.cpp	/^void sphSetUnlinkOld ( bool bUnlink )$/;"	f
sphShutdownWordforms	sphinx.cpp	/^void sphShutdownWordforms ()$/;"	f
sphSiftDown	sphinxstd.h	/^void sphSiftDown ( T * pData, int iStart, int iEnd, U COMP, V ACC )$/;"	f
sphSleepMsec	sphinx.cpp	/^void sphSleepMsec ( int iMsec )$/;"	f
sphSockClose	searchd.cpp	59;"	d	file:
sphSockClose	searchd.cpp	82;"	d	file:
sphSockError	searchd.cpp	/^const char * sphSockError ( int iErr=0 )$/;"	f
sphSockGetErrno	searchd.cpp	/^int sphSockGetErrno ()$/;"	f
sphSockPeekErrno	searchd.cpp	/^int sphSockPeekErrno ()$/;"	f
sphSockRead	searchd.cpp	/^int sphSockRead ( int iSock, void * buf, int iLen, int iReadTimeout, bool bIntr )$/;"	f
sphSockRecv	searchd.cpp	57;"	d	file:
sphSockRecv	searchd.cpp	80;"	d	file:
sphSockSend	searchd.cpp	58;"	d	file:
sphSockSend	searchd.cpp	81;"	d	file:
sphSockSetErrno	searchd.cpp	/^void sphSockSetErrno ( int iErr )$/;"	f
sphSort	sphinxstd.h	/^void sphSort ( T * pData, int iCount )$/;"	f
sphSort	sphinxstd.h	/^void sphSort ( T * pData, int iCount, U COMP )$/;"	f
sphSort	sphinxstd.h	/^void sphSort ( T * pData, int iCount, U COMP, V ACC )$/;"	f
sphSortDocinfos	sphinx.cpp	/^void sphSortDocinfos ( DWORD * pBuf, int iCount, int iStride )$/;"	f
sphSortGetStringRemap	sphinxsort.cpp	/^bool sphSortGetStringRemap ( const CSphSchema & tSorterSchema, const CSphSchema & tIndexSchema, CSphVector<SphStringSorterRemap_t> & dAttrs )$/;"	f
sphSortSetupExpr	sphinxsort.cpp	/^ISphExpr * sphSortSetupExpr ( const CSphString & sName, const CSphSchema & tIndexSchema )$/;"	f
sphSplit	sphinxutils.h	/^inline void sphSplit ( CSphVector<CSphString> & dOut, const char * sIn )$/;"	f
sphSqr	sphinxexpr.cpp	/^static inline double sphSqr ( double v ) { return v * v; }$/;"	f	file:
sphSqr	sphinxsort.cpp	/^static inline double sphSqr ( double v )$/;"	f	file:
sphStrMacro	sphinx.cpp	/^char * sphStrMacro ( const char * sTemplate, const char * sMacro, SphDocID_t uValue )$/;"	f
sphStrncmp	sphinx.cpp	/^static bool sphStrncmp ( const char * sCheck, int iCheck, const char * sRef )$/;"	f	file:
sphThrottleSleep	sphinx.cpp	/^static inline void sphThrottleSleep ()$/;"	f	file:
sphToDocid	sphinx.cpp	1839;"	d	file:
sphToDocid	sphinx.cpp	1841;"	d	file:
sphToDword	sphinx.cpp	/^DWORD sphToDword ( const char * s )$/;"	f
sphToFloat	sphinx.cpp	/^float sphToFloat ( const char * s )$/;"	f
sphToInt64	sphinx.cpp	/^int64_t sphToInt64 ( const char * s )$/;"	f
sphToUint64	sphinx.cpp	/^uint64_t sphToUint64 ( const char * s )$/;"	f
sphTransformExtendedQuery	sphinx.cpp	/^void sphTransformExtendedQuery ( XQNode_t ** ppNode )$/;"	f
sphTrim	sphinx.cpp	/^static BYTE * sphTrim ( BYTE * s )$/;"	f	file:
sphTruncate	sphinx.cpp	/^static bool sphTruncate ( int iFD )$/;"	f	file:
sphTypeDirective	sphinxint.h	/^inline const char * sphTypeDirective ( ESphAttr eType )$/;"	f
sphTypeName	sphinxint.h	/^inline const char * sphTypeName ( ESphAttr eType )$/;"	f
sphUDFCreate	sphinxexpr.cpp	/^bool sphUDFCreate ( const char * szLib, const char * szFunc, ESphAttr eRetType, CSphString & sError )$/;"	f
sphUDFCreate	sphinxexpr.cpp	/^bool sphUDFCreate ( const char *, const char *, ESphAttr, CSphString & sError )$/;"	f
sphUDFDrop	sphinxexpr.cpp	/^bool sphUDFDrop ( const char * szFunc, CSphString & sError )$/;"	f
sphUDFDrop	sphinxexpr.cpp	/^bool sphUDFDrop ( const char *, CSphString & sError )$/;"	f
sphUDFInit	sphinxexpr.cpp	/^void sphUDFInit ( const char * )$/;"	f
sphUDFInit	sphinxexpr.cpp	/^void sphUDFInit ( const char * sUdfDir )$/;"	f
sphUTF8Decode	sphinxint.h	/^inline int sphUTF8Decode ( BYTE * & pBuf )$/;"	f
sphUTF8Encode	sphinxint.h	/^inline int sphUTF8Encode ( BYTE * pBuf, int iCode )$/;"	f
sphUTF8Len	sphinxint.h	/^inline int sphUTF8Len ( const char * pStr )$/;"	f
sphUTF8Len	sphinxint.h	/^inline int sphUTF8Len ( const char * pStr, int iMax )$/;"	f
sphUnalignedRead	sphinx.h	/^inline T sphUnalignedRead ( const T & tRef )$/;"	f
sphUnalignedRead	sphinx.h	/^template < typename T > inline T sphUnalignedRead ( const T & tRef )$/;"	f
sphUnalignedWrite	sphinx.h	/^template < typename T > void sphUnalignedWrite ( void * pPtr, const T & tVal )$/;"	f
sphUnalignedWrite	sphinx.h	/^void sphUnalignedWrite ( void * pPtr, const T & tVal )$/;"	f
sphUnlinkIndex	sphinxutils.cpp	/^void sphUnlinkIndex ( const char * sName, bool bForce )$/;"	f
sphUnpackAttrLocator	sphinxexpr.cpp	/^static void sphUnpackAttrLocator ( uint64_t uIndex, ExprNode_t * pNode )$/;"	f	file:
sphUnpackStr	sphinx.h	/^inline int sphUnpackStr ( const BYTE * pRow, const BYTE ** ppStr )$/;"	f
sphUnzipInt	sphinx.cpp	/^DWORD sphUnzipInt ( const BYTE * & pBuf )			{ SPH_UNZIP_IMPL ( DWORD, *pBuf++ ); }$/;"	f
sphUnzipOffset	sphinx.cpp	/^SphOffset_t sphUnzipOffset ( const BYTE * & pBuf )	{ SPH_UNZIP_IMPL ( SphOffset_t, *pBuf++ ); }$/;"	f
sphUnzipWordid	sphinx.cpp	6158;"	d	file:
sphUnzipWordid	sphinx.cpp	6160;"	d	file:
sphVSprintf	sphinxutils.cpp	/^static int sphVSprintf ( char * pOutput, const char * sFmt, va_list ap )$/;"	f	file:
sphWarn	sphinx.cpp	/^void sphWarn ( const char * sTemplate, ... )$/;"	f
sphWarning	sphinxutils.cpp	/^void sphWarning ( const char * sFmt, ... )$/;"	f
sphWrite	sphinxutils.cpp	/^bool sphWrite ( int iFD, const void * pBuf, size_t iSize )$/;"	f
sphWriteThrottled	sphinx.cpp	/^bool sphWriteThrottled ( int iFD, const void * pBuf, int64_t iCount, const char * sName, CSphString & sError )$/;"	f
sphinx_int64_t	sphinxudf.h	/^typedef __int64					sphinx_int64_t;$/;"	t
sphinx_int64_t	sphinxudf.h	/^typedef long long				sphinx_int64_t;$/;"	t
sphinx_udf_argtype	sphinxudf.h	/^enum sphinx_udf_argtype$/;"	g
sphinx_uint64_t	sphinxudf.h	/^typedef unsigned __int64		sphinx_uint64_t;$/;"	t
sphinx_uint64_t	sphinxudf.h	/^typedef unsigned long long		sphinx_uint64_t;$/;"	t
srcdir	Makefile	/^srcdir = .$/;"	m
st_sphinx_udf_args	sphinxudf.h	/^typedef struct st_sphinx_udf_args$/;"	s
st_sphinx_udf_init	sphinxudf.h	/^typedef struct st_sphinx_udf_init$/;"	s
start_transaction	sphinxql.y	/^start_transaction:$/;"	l
stat	searchd.cpp	61;"	d	file:
stat	sphinx.cpp	80;"	d	file:
statement	sphinxql.y	/^statement:$/;"	l
stem_cz	sphinxstemcz.cpp	/^void stem_cz ( BYTE * word )$/;"	f
stem_cz_init	sphinxstemcz.cpp	/^void stem_cz_init ()$/;"	f
stem_dmetaphone	sphinxmetaphone.cpp	/^void stem_dmetaphone ( BYTE * pWord, bool bUTF8 )$/;"	f
stem_en	sphinxstemen.cpp	/^void stem_en ( unsigned char * word, int len )$/;"	f
stem_en_doubles	sphinxstemen.cpp	/^static unsigned char stem_en_doubles[] = "bdfgmnprt";$/;"	v	file:
stem_en_id	sphinxstemen.cpp	/^static inline int stem_en_id ( unsigned char l )$/;"	f	file:
stem_en_init	sphinxstemen.cpp	/^void stem_en_init ()$/;"	f
stem_en_ivwxy	sphinxstemen.cpp	/^static inline int stem_en_ivwxy ( unsigned char l )$/;"	f	file:
stem_ru_init	sphinxstemru.cpp	/^void stem_ru_init ()$/;"	f
stem_soundex	sphinxsoundex.cpp	/^void stem_soundex ( BYTE * pWord )$/;"	f
str_lengths	sphinxudf.h	/^	int *						str_lengths;	\/\/\/< string argument lengths$/;"	m	struct:st_sphinx_udf_args
strcasecmp	sphinxstd.h	91;"	d
strlwr	sphinx.cpp	/^char * strlwr ( char * s )$/;"	f
strncasecmp	sphinxstd.h	92;"	d
strtoint	udfexample.c	/^DLLEXPORT sphinx_int64_t strtoint ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error_flag )$/;"	f
strtoint_init	udfexample.c	/^DLLEXPORT int strtoint_init ( SPH_UDF_INIT * init, SPH_UDF_ARGS * args, char * error_message )$/;"	f
strtoll	sphinxstd.h	94;"	d
strtoull	sphinxstd.h	95;"	d
struct_stat	sphinx.cpp	83;"	d	file:
struct_stat	sphinx.cpp	85;"	d	file:
struct_stat	sphinx.cpp	95;"	d	file:
subdir	Makefile	/^subdir = src$/;"	m
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tDocCollector	sphinx.cpp	/^	explicit tDocCollector ( CSphVector<SphDocID_t> & dCollection )$/;"	f	class:tDocCollector
tDocCollector	sphinx.cpp	/^class tDocCollector : public tTester$/;"	c	file:
tFieldLimit	yysphinxquery.c	/^	} tFieldLimit;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::__anon2	file:
tFieldLimit	yysphinxquery.h	/^	} tFieldLimit;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::__anon15
tInt	yysphinxquery.c	/^	} tInt;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::__anon1	file:
tInt	yysphinxquery.h	/^	} tInt;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::__anon14
tTester	sphinx.cpp	/^class tTester : public ISphNoncopyable$/;"	c	file:
target_alias	Makefile	/^target_alias = $/;"	m
tests_DEPENDENCIES	Makefile	/^tests_DEPENDENCIES = $(am__DEPENDENCIES_2)$/;"	m
tests_LDADD	Makefile	/^tests_LDADD = $(LDADD)$/;"	m
tests_OBJECTS	Makefile	/^tests_OBJECTS = $(am_tests_OBJECTS)$/;"	m
tests_SOURCES	Makefile	/^tests_SOURCES = tests.cpp$/;"	m
tok_limiter	sphinxquery.y	/^tok_limiter:$/;"	l
top_build_prefix	Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
transact_op	sphinxql.y	/^transact_op:$/;"	l
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
trim	sphinxutils.cpp	/^static char * trim ( char * sLine )$/;"	f	file:
uALLBITS	sphinxstd.h	/^	static const DWORD uALLBITS = (DWORD)(~(0UL));$/;"	m	class:CSphSmallBitvec
udf_type	sphinxql.y	/^udf_type:$/;"	l
uint64_t	sphinxstd.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	sphinxstd.h	/^typedef unsigned long long uint64_t;$/;"	t
unput	llsphinxql.c	202;"	d	file:
update	sphinxql.y	/^update:$/;"	l
update_item	sphinxql.y	/^update_item:$/;"	l
update_items_list	sphinxql.y	/^update_items_list:$/;"	l
vowel_map	sphinxstemen.cpp	/^static unsigned char vowel_map[] =$/;"	v	file:
vsnprintf	sphinxstd.h	29;"	d
where_clause	sphinxql.y	/^where_clause:$/;"	l
where_expr	sphinxql.y	/^where_expr:$/;"	l
where_item	sphinxql.y	/^where_item:$/;"	l
xmlCharacters	sphinx.cpp	/^static void XMLCALL xmlCharacters ( void * user_data, const XML_Char * ch, int len )$/;"	f	file:
xmlEndElement	sphinx.cpp	/^static void XMLCALL xmlEndElement ( void * user_data, const XML_Char * name )$/;"	f	file:
xmlErrorHandler	sphinx.cpp	/^void xmlErrorHandler ( void * arg, const char * msg, xmlParserSeverities severity, xmlTextReaderLocatorPtr locator )$/;"	f
xmlReadBuffers	sphinx.cpp	/^int	xmlReadBuffers ( void * context, char * buffer, int len )$/;"	f
xmlStartElement	sphinx.cpp	/^static void XMLCALL xmlStartElement ( void * user_data, const XML_Char * name, const XML_Char ** attrs )$/;"	f	file:
xmlUnknownEncoding	sphinx.cpp	/^static int XMLCALL xmlUnknownEncoding ( void *, const XML_Char * name, XML_Encoding * info )$/;"	f	file:
xqDump	sphinxquery.cpp	/^static void xqDump ( XQNode_t * pNode, const CSphSchema & tSch, int iIndent )$/;"	f	file:
xqIndent	sphinxquery.cpp	/^static void xqIndent ( int iIndent )$/;"	f	file:
yy_accept	llsphinxql.c	/^static yyconst flex_int16_t yy_accept[378] =$/;"	v	file:
yy_at_bol	llsphinxql.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	llsphinxql.c	/^static yyconst flex_int16_t yy_base[388] =$/;"	v	file:
yy_bs_column	llsphinxql.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	llsphinxql.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	llsphinxql.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	llsphinxql.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	llsphinxql.c	/^    YY_BUFFER_STATE * yy_buffer_stack; \/**< Stack as an array. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_max	llsphinxql.c	/^    size_t yy_buffer_stack_max; \/**< capacity of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_top	llsphinxql.c	/^    size_t yy_buffer_stack_top; \/**< index of top of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_state	llsphinxql.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	llsphinxql.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	llsphinxql.c	/^    char *yy_c_buf_p;$/;"	m	struct:yyguts_t	file:
yy_ch_buf	llsphinxql.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	llsphinxql.c	/^static yyconst flex_int16_t yy_chk[846] =$/;"	v	file:
yy_create_buffer	llsphinxql.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)$/;"	f
yy_def	llsphinxql.c	/^static yyconst flex_int16_t yy_def[388] =$/;"	v	file:
yy_delete_buffer	llsphinxql.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
yy_did_buffer_switch_on_eof	llsphinxql.c	/^    int yy_did_buffer_switch_on_eof;$/;"	m	struct:yyguts_t	file:
yy_ec	llsphinxql.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	llsphinxql.c	/^static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)$/;"	f	file:
yy_fill_buffer	llsphinxql.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	llsphinxql.c	137;"	d	file:
yy_flex_debug_r	llsphinxql.c	/^    int yy_flex_debug_r;$/;"	m	struct:yyguts_t	file:
yy_flex_strlen	llsphinxql.c	/^static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)$/;"	f	file:
yy_flex_strncpy	llsphinxql.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)$/;"	f	file:
yy_flush_buffer	llsphinxql.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
yy_get_next_buffer	llsphinxql.c	/^static int yy_get_next_buffer (yyscan_t yyscanner)$/;"	f	file:
yy_get_previous_state	llsphinxql.c	/^    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)$/;"	f	file:
yy_hold_char	llsphinxql.c	/^    char yy_hold_char;$/;"	m	struct:yyguts_t	file:
yy_init	llsphinxql.c	/^    int yy_init;$/;"	m	struct:yyguts_t	file:
yy_init_buffer	llsphinxql.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)$/;"	f	file:
yy_init_globals	llsphinxql.c	/^static int yy_init_globals (yyscan_t yyscanner)$/;"	f	file:
yy_input_file	llsphinxql.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	llsphinxql.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	llsphinxql.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	llsphinxql.c	/^    char* yy_last_accepting_cpos;$/;"	m	struct:yyguts_t	file:
yy_last_accepting_state	llsphinxql.c	/^    yy_state_type yy_last_accepting_state;$/;"	m	struct:yyguts_t	file:
yy_load_buffer_state	llsphinxql.c	/^static void yy_load_buffer_state  (yyscan_t yyscanner)$/;"	f	file:
yy_meta	llsphinxql.c	/^static yyconst flex_int32_t yy_meta[66] =$/;"	v	file:
yy_more_flag	llsphinxql.c	/^    int yy_more_flag;$/;"	m	struct:yyguts_t	file:
yy_more_len	llsphinxql.c	/^    int yy_more_len;$/;"	m	struct:yyguts_t	file:
yy_n_chars	llsphinxql.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	llsphinxql.c	/^    int yy_n_chars;$/;"	m	struct:yyguts_t	file:
yy_new_buffer	llsphinxql.c	311;"	d	file:
yy_nxt	llsphinxql.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	llsphinxql.c	/^static yyconst flex_int16_t yy_nxt[846] =$/;"	v	file:
yy_reduce_print	yysphinxexpr.c	/^yy_reduce_print (int yyrule)$/;"	f	file:
yy_reduce_print	yysphinxql.c	/^yy_reduce_print (int yyrule)$/;"	f	file:
yy_reduce_print	yysphinxquery.c	/^yy_reduce_print (int yyrule)$/;"	f	file:
yy_reduce_print	yysphinxselect.c	/^yy_reduce_print (int yyrule)$/;"	f	file:
yy_scan_buffer	llsphinxql.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)$/;"	f
yy_scan_bytes	llsphinxql.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)$/;"	f
yy_scan_string	llsphinxql.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)$/;"	f
yy_set_bol	llsphinxql.c	323;"	d	file:
yy_set_interactive	llsphinxql.c	313;"	d	file:
yy_size_t	llsphinxql.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	yysphinxexpr.c	/^yy_stack_print (short *bottom, short *top)$/;"	f	file:
yy_stack_print	yysphinxql.c	/^yy_stack_print (short *bottom, short *top)$/;"	f	file:
yy_stack_print	yysphinxquery.c	/^yy_stack_print (short *bottom, short *top)$/;"	f	file:
yy_stack_print	yysphinxselect.c	/^yy_stack_print (short *bottom, short *top)$/;"	f	file:
yy_start	llsphinxql.c	/^    int yy_start;$/;"	m	struct:yyguts_t	file:
yy_start_stack	llsphinxql.c	/^    int *yy_start_stack;$/;"	m	struct:yyguts_t	file:
yy_start_stack_depth	llsphinxql.c	/^    int yy_start_stack_depth;$/;"	m	struct:yyguts_t	file:
yy_start_stack_ptr	llsphinxql.c	/^    int yy_start_stack_ptr;$/;"	m	struct:yyguts_t	file:
yy_state_type	llsphinxql.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	llsphinxql.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)$/;"	f
yy_trans_info	llsphinxql.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	llsphinxql.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)$/;"	f	file:
yy_verify	llsphinxql.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	llsphinxql.c	/^void *yyalloc (yy_size_t  size , yyscan_t yyscanner)$/;"	f
yyalloc	yysphinxexpr.c	/^union yyalloc$/;"	u	file:
yyalloc	yysphinxql.c	/^union yyalloc$/;"	u	file:
yyalloc	yysphinxquery.c	/^union yyalloc$/;"	u	file:
yyalloc	yysphinxselect.c	/^union yyalloc$/;"	u	file:
yycheck	yysphinxexpr.c	/^static const yysigned_char yycheck[] =$/;"	v	file:
yycheck	yysphinxql.c	/^static const short yycheck[] =$/;"	v	file:
yycheck	yysphinxquery.c	/^static const yysigned_char yycheck[] =$/;"	v	file:
yycheck	yysphinxselect.c	/^static const yysigned_char yycheck[] =$/;"	v	file:
yyclearin	yysphinxexpr.c	570;"	d	file:
yyclearin	yysphinxql.c	1093;"	d	file:
yyclearin	yysphinxquery.c	472;"	d	file:
yyclearin	yysphinxselect.c	564;"	d	file:
yycolumn	llsphinxql.c	136;"	d	file:
yyconst	llsphinxql.c	107;"	d	file:
yyconst	llsphinxql.c	109;"	d	file:
yydebug	yysphinxexpr.c	/^int yydebug;$/;"	v
yydebug	yysphinxql.c	/^int yydebug;$/;"	v
yydebug	yysphinxquery.c	/^int yydebug;$/;"	v
yydebug	yysphinxselect.c	/^int yydebug;$/;"	v
yydefact	yysphinxexpr.c	/^static const unsigned char yydefact[] =$/;"	v	file:
yydefact	yysphinxql.c	/^static const unsigned char yydefact[] =$/;"	v	file:
yydefact	yysphinxquery.c	/^static const unsigned char yydefact[] =$/;"	v	file:
yydefact	yysphinxselect.c	/^static const unsigned char yydefact[] =$/;"	v	file:
yydefgoto	yysphinxexpr.c	/^static const yysigned_char yydefgoto[] =$/;"	v	file:
yydefgoto	yysphinxql.c	/^static const short yydefgoto[] =$/;"	v	file:
yydefgoto	yysphinxquery.c	/^static const yysigned_char yydefgoto[] =$/;"	v	file:
yydefgoto	yysphinxselect.c	/^static const yysigned_char yydefgoto[] =$/;"	v	file:
yydestruct	yysphinxexpr.c	/^yydestruct (int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydestruct	yysphinxql.c	/^yydestruct (int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydestruct	yysphinxquery.c	/^yydestruct (int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydestruct	yysphinxselect.c	/^yydestruct (int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	llsphinxql.c	/^static void yyensure_buffer_stack (yyscan_t yyscanner)$/;"	f	file:
yyerrok	yysphinxexpr.c	569;"	d	file:
yyerrok	yysphinxql.c	1092;"	d	file:
yyerrok	yysphinxquery.c	471;"	d	file:
yyerrok	yysphinxselect.c	563;"	d	file:
yyerror	searchd.cpp	/^void yyerror ( SqlParser_c * pParser, const char * sMessage )$/;"	f
yyerror	sphinx.cpp	/^void yyerror ( SelectParser_t * pParser, const char * sMessage )	{ pParser->m_sParserError.SetSprintf ( "%s near '%s'", sMessage, pParser->m_pLastTokenStart ); }$/;"	f
yyerror	sphinxexpr.cpp	/^void yyerror ( ExprParser_t * pParser, const char * sMessage )$/;"	f
yyerror	sphinxquery.cpp	/^void yyerror ( XQParser_t * pParser, const char * sMessage )$/;"	f
yyextra	llsphinxql.c	132;"	d	file:
yyextra_r	llsphinxql.c	/^    YY_EXTRA_TYPE yyextra_r;$/;"	m	struct:yyguts_t	file:
yyfree	llsphinxql.c	/^void yyfree (void * ptr , yyscan_t yyscanner)$/;"	f
yyget_column	llsphinxql.c	/^int yyget_column  (yyscan_t yyscanner)$/;"	f
yyget_debug	llsphinxql.c	/^int yyget_debug  (yyscan_t yyscanner)$/;"	f
yyget_extra	llsphinxql.c	/^YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)$/;"	f
yyget_in	llsphinxql.c	/^FILE *yyget_in  (yyscan_t yyscanner)$/;"	f
yyget_leng	llsphinxql.c	/^int yyget_leng  (yyscan_t yyscanner)$/;"	f
yyget_lineno	llsphinxql.c	/^int yyget_lineno  (yyscan_t yyscanner)$/;"	f
yyget_out	llsphinxql.c	/^FILE *yyget_out  (yyscan_t yyscanner)$/;"	f
yyget_text	llsphinxql.c	/^char *yyget_text  (yyscan_t yyscanner)$/;"	f
yyguts_t	llsphinxql.c	/^struct yyguts_t$/;"	s	file:
yyin	llsphinxql.c	130;"	d	file:
yyin_r	llsphinxql.c	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yyinput	llsphinxql.c	/^    static int yyinput (yyscan_t yyscanner)$/;"	f	file:
yyleng	llsphinxql.c	133;"	d	file:
yyleng_r	llsphinxql.c	/^    int yyleng_r;$/;"	m	struct:yyguts_t	file:
yyless	llsphinxql.c	189;"	d	file:
yyless	llsphinxql.c	2356;"	d	file:
yyless	llsphinxql.c	2357;"	d	file:
yylex	searchd.cpp	/^int yylex ( YYSTYPE * lvalp, void * yyscanner, SqlParser_c * pParser )$/;"	f
yylex	sphinx.cpp	/^int yylex ( YYSTYPE * lvalp, SelectParser_t * pParser )				{ return pParser->GetToken ( lvalp );}$/;"	f
yylex	sphinxexpr.cpp	/^int yylex ( YYSTYPE * lvalp, ExprParser_t * pParser )$/;"	f
yylex	sphinxquery.cpp	/^int yylex ( YYSTYPE * lvalp, XQParser_t * pParser )$/;"	f
yylex_destroy	llsphinxql.c	/^int yylex_destroy  (yyscan_t yyscanner)$/;"	f
yylex_init	llsphinxql.c	/^int yylex_init(yyscan_t* ptr_yy_globals)$/;"	f
yylex_init_extra	llsphinxql.c	/^int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )$/;"	f
yylex_unhold	llsphinxql.c	/^void yylex_unhold ( yyscan_t yyscanner )$/;"	f
yylineno	llsphinxql.c	135;"	d	file:
yylineno_r	llsphinxql.c	/^    int yylineno_r;$/;"	m	struct:yyguts_t	file:
yymore	llsphinxql.c	748;"	d	file:
yyout	llsphinxql.c	131;"	d	file:
yyout_r	llsphinxql.c	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yypact	yysphinxexpr.c	/^static const short yypact[] =$/;"	v	file:
yypact	yysphinxql.c	/^static const short yypact[] =$/;"	v	file:
yypact	yysphinxquery.c	/^static const yysigned_char yypact[] =$/;"	v	file:
yypact	yysphinxselect.c	/^static const short yypact[] =$/;"	v	file:
yyparse	yysphinxexpr.c	/^int yyparse (void *YYPARSE_PARAM)$/;"	f
yyparse	yysphinxql.c	/^int yyparse (void *YYPARSE_PARAM)$/;"	f
yyparse	yysphinxquery.c	/^int yyparse (void *YYPARSE_PARAM)$/;"	f
yyparse	yysphinxselect.c	/^int yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	yysphinxexpr.c	/^static const yysigned_char yypgoto[] =$/;"	v	file:
yypgoto	yysphinxql.c	/^static const short yypgoto[] =$/;"	v	file:
yypgoto	yysphinxquery.c	/^static const yysigned_char yypgoto[] =$/;"	v	file:
yypgoto	yysphinxselect.c	/^static const yysigned_char yypgoto[] =$/;"	v	file:
yypop_buffer_state	llsphinxql.c	/^void yypop_buffer_state (yyscan_t yyscanner)$/;"	f
yyprhs	yysphinxexpr.c	/^static const unsigned char yyprhs[] =$/;"	v	file:
yyprhs	yysphinxql.c	/^static const unsigned short yyprhs[] =$/;"	v	file:
yyprhs	yysphinxquery.c	/^static const unsigned char yyprhs[] =$/;"	v	file:
yyprhs	yysphinxselect.c	/^static const unsigned char yyprhs[] =$/;"	v	file:
yypush_buffer_state	llsphinxql.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)$/;"	f
yyr1	yysphinxexpr.c	/^static const unsigned char yyr1[] =$/;"	v	file:
yyr1	yysphinxql.c	/^static const unsigned char yyr1[] =$/;"	v	file:
yyr1	yysphinxquery.c	/^static const unsigned char yyr1[] =$/;"	v	file:
yyr1	yysphinxselect.c	/^static const unsigned char yyr1[] =$/;"	v	file:
yyr2	yysphinxexpr.c	/^static const unsigned char yyr2[] =$/;"	v	file:
yyr2	yysphinxql.c	/^static const unsigned char yyr2[] =$/;"	v	file:
yyr2	yysphinxquery.c	/^static const unsigned char yyr2[] =$/;"	v	file:
yyr2	yysphinxselect.c	/^static const unsigned char yyr2[] =$/;"	v	file:
yyrealloc	llsphinxql.c	/^void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)$/;"	f
yyrestart	llsphinxql.c	/^    void yyrestart  (FILE * input_file , yyscan_t yyscanner)$/;"	f
yyrhs	yysphinxexpr.c	/^static const yysigned_char yyrhs[] =$/;"	v	file:
yyrhs	yysphinxql.c	/^static const short yyrhs[] =$/;"	v	file:
yyrhs	yysphinxquery.c	/^static const yysigned_char yyrhs[] =$/;"	v	file:
yyrhs	yysphinxselect.c	/^static const yysigned_char yyrhs[] =$/;"	v	file:
yyrline	yysphinxexpr.c	/^static const unsigned char yyrline[] =$/;"	v	file:
yyrline	yysphinxql.c	/^static const unsigned short yyrline[] =$/;"	v	file:
yyrline	yysphinxquery.c	/^static const unsigned char yyrline[] =$/;"	v	file:
yyrline	yysphinxselect.c	/^static const unsigned char yyrline[] =$/;"	v	file:
yyscan_t	llsphinxql.c	/^typedef void* yyscan_t;$/;"	t	file:
yyset_column	llsphinxql.c	/^void yyset_column (int  column_no , yyscan_t yyscanner)$/;"	f
yyset_debug	llsphinxql.c	/^void yyset_debug (int  bdebug , yyscan_t yyscanner)$/;"	f
yyset_extra	llsphinxql.c	/^void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)$/;"	f
yyset_in	llsphinxql.c	/^void yyset_in (FILE *  in_str , yyscan_t yyscanner)$/;"	f
yyset_lineno	llsphinxql.c	/^void yyset_lineno (int  line_number , yyscan_t yyscanner)$/;"	f
yyset_out	llsphinxql.c	/^void yyset_out (FILE *  out_str , yyscan_t yyscanner)$/;"	f
yysigned_char	yysphinxexpr.c	/^   typedef short yysigned_char;$/;"	t	file:
yysigned_char	yysphinxexpr.c	/^   typedef signed char yysigned_char;$/;"	t	file:
yysigned_char	yysphinxql.c	/^   typedef short yysigned_char;$/;"	t	file:
yysigned_char	yysphinxql.c	/^   typedef signed char yysigned_char;$/;"	t	file:
yysigned_char	yysphinxquery.c	/^   typedef short yysigned_char;$/;"	t	file:
yysigned_char	yysphinxquery.c	/^   typedef signed char yysigned_char;$/;"	t	file:
yysigned_char	yysphinxselect.c	/^   typedef short yysigned_char;$/;"	t	file:
yysigned_char	yysphinxselect.c	/^   typedef signed char yysigned_char;$/;"	t	file:
yyss	yysphinxexpr.c	/^  short yyss;$/;"	m	union:yyalloc	file:
yyss	yysphinxql.c	/^  short yyss;$/;"	m	union:yyalloc	file:
yyss	yysphinxquery.c	/^  short yyss;$/;"	m	union:yyalloc	file:
yyss	yysphinxselect.c	/^  short yyss;$/;"	m	union:yyalloc	file:
yystos	yysphinxexpr.c	/^static const unsigned char yystos[] =$/;"	v	file:
yystos	yysphinxql.c	/^static const unsigned char yystos[] =$/;"	v	file:
yystos	yysphinxquery.c	/^static const unsigned char yystos[] =$/;"	v	file:
yystos	yysphinxselect.c	/^static const unsigned char yystos[] =$/;"	v	file:
yystpcpy	yysphinxexpr.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	yysphinxexpr.c	774;"	d	file:
yystpcpy	yysphinxql.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	yysphinxql.c	1297;"	d	file:
yystpcpy	yysphinxquery.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	yysphinxquery.c	676;"	d	file:
yystpcpy	yysphinxselect.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	yysphinxselect.c	768;"	d	file:
yystrlen	yysphinxexpr.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	yysphinxexpr.c	751;"	d	file:
yystrlen	yysphinxql.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	yysphinxql.c	1274;"	d	file:
yystrlen	yysphinxquery.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	yysphinxquery.c	653;"	d	file:
yystrlen	yysphinxselect.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	yysphinxselect.c	745;"	d	file:
yystype	yysphinxexpr.c	155;"	d	file:
yystype	yysphinxexpr.h	115;"	d
yystype	yysphinxql.c	269;"	d	file:
yystype	yysphinxql.h	218;"	d
yystype	yysphinxquery.c	117;"	d	file:
yystype	yysphinxquery.h	72;"	d
yystype	yysphinxselect.c	128;"	d	file:
yystype	yysphinxselect.h	82;"	d
yysymprint	yysphinxexpr.c	/^yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yysymprint	yysphinxql.c	/^yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yysymprint	yysphinxquery.c	/^yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yysymprint	yysphinxselect.c	/^yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yytable	yysphinxexpr.c	/^static const unsigned char yytable[] =$/;"	v	file:
yytable	yysphinxql.c	/^static const short yytable[] =$/;"	v	file:
yytable	yysphinxquery.c	/^static const yysigned_char yytable[] =$/;"	v	file:
yytable	yysphinxselect.c	/^static const unsigned char yytable[] =$/;"	v	file:
yyterminate	llsphinxql.c	946;"	d	file:
yytext	llsphinxql.c	134;"	d	file:
yytext_ptr	llsphinxql.c	344;"	d	file:
yytext_r	llsphinxql.c	/^    char *yytext_r;$/;"	m	struct:yyguts_t	file:
yytname	yysphinxexpr.c	/^static const char *const yytname[] =$/;"	v	file:
yytname	yysphinxql.c	/^static const char *const yytname[] =$/;"	v	file:
yytname	yysphinxquery.c	/^static const char *const yytname[] =$/;"	v	file:
yytname	yysphinxselect.c	/^static const char *const yytname[] =$/;"	v	file:
yytokentype	yysphinxexpr.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	yysphinxexpr.h	/^   enum yytokentype {$/;"	g
yytokentype	yysphinxql.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	yysphinxql.h	/^   enum yytokentype {$/;"	g
yytokentype	yysphinxquery.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	yysphinxquery.h	/^   enum yytokentype {$/;"	g
yytokentype	yysphinxselect.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	yysphinxselect.h	/^   enum yytokentype {$/;"	g
yytoknum	yysphinxexpr.c	/^static const unsigned short yytoknum[] =$/;"	v	file:
yytoknum	yysphinxql.c	/^static const unsigned short yytoknum[] =$/;"	v	file:
yytoknum	yysphinxquery.c	/^static const unsigned short yytoknum[] =$/;"	v	file:
yytoknum	yysphinxselect.c	/^static const unsigned short yytoknum[] =$/;"	v	file:
yytranslate	yysphinxexpr.c	/^static const unsigned char yytranslate[] =$/;"	v	file:
yytranslate	yysphinxql.c	/^static const unsigned char yytranslate[] =$/;"	v	file:
yytranslate	yysphinxquery.c	/^static const unsigned char yytranslate[] =$/;"	v	file:
yytranslate	yysphinxselect.c	/^static const unsigned char yytranslate[] =$/;"	v	file:
yyvs	yysphinxexpr.c	/^  YYSTYPE yyvs;$/;"	m	union:yyalloc	file:
yyvs	yysphinxql.c	/^  YYSTYPE yyvs;$/;"	m	union:yyalloc	file:
yyvs	yysphinxquery.c	/^  YYSTYPE yyvs;$/;"	m	union:yyalloc	file:
yyvs	yysphinxselect.c	/^  YYSTYPE yyvs;$/;"	m	union:yyalloc	file:
yywrap	llsphinxql.c	337;"	d	file:
~AgentConn_t	searchd.cpp	/^	~AgentConn_t ()$/;"	f	struct:AgentConn_t
~CRtDictKeywords	sphinx.cpp	/^	virtual ~CRtDictKeywords() {}$/;"	f	class:CRtDictKeywords
~CSphArena	sphinx.cpp	/^CSphArena::~CSphArena ()$/;"	f	class:CSphArena
~CSphAutoArray	sphinx.cpp	/^				~CSphAutoArray ()				{ Reset (); }$/;"	f	class:CSphAutoArray
~CSphAutofile	sphinx.cpp	/^CSphAutofile::~CSphAutofile ()$/;"	f	class:CSphAutofile
~CSphAutoreader	sphinx.cpp	/^CSphAutoreader::~CSphAutoreader ()$/;"	f	class:CSphAutoreader
~CSphBin	sphinx.cpp	/^CSphBin::~CSphBin ()$/;"	f	class:CSphBin
~CSphBitvec	sphinxstd.h	/^	~CSphBitvec ()$/;"	f	class:CSphBitvec
~CSphDict	sphinx.h	/^	virtual				~CSphDict () {}$/;"	f	struct:CSphDict
~CSphDictCRCTraits	sphinx.cpp	/^CSphDictCRCTraits::~CSphDictCRCTraits ()$/;"	f	class:CSphDictCRCTraits
~CSphDictKeywords	sphinx.cpp	/^CSphDictKeywords::~CSphDictKeywords ()$/;"	f	class:CSphDictKeywords
~CSphEasyTimer	sphinx.cpp	/^	~CSphEasyTimer ()$/;"	f	class:CSphEasyTimer
~CSphFixedVector	sphinxstd.h	/^	~CSphFixedVector ()$/;"	f	class:CSphFixedVector
~CSphGrouper	sphinxsort.cpp	/^	virtual					~CSphGrouper () {}$/;"	f	class:CSphGrouper
~CSphHitMarker	sphinxsearch.cpp	/^CSphHitMarker::~CSphHitMarker ()$/;"	f	class:CSphHitMarker
~CSphHitQueue	sphinx.cpp	/^	~CSphHitQueue ()$/;"	f	struct:CSphHitQueue
~CSphIOStats	sphinx.cpp	/^CSphIOStats::~CSphIOStats ()$/;"	f	class:CSphIOStats
~CSphIndex	sphinx.cpp	/^CSphIndex::~CSphIndex ()$/;"	f	class:CSphIndex
~CSphIndex_VLN	sphinx.cpp	/^CSphIndex_VLN::~CSphIndex_VLN ()$/;"	f	class:CSphIndex_VLN
~CSphKBufferGroupSorter	sphinxsort.cpp	/^	~CSphKBufferGroupSorter ()$/;"	f	class:CSphKBufferGroupSorter
~CSphLowercaser	sphinx.cpp	/^CSphLowercaser::~CSphLowercaser ()$/;"	f	class:CSphLowercaser
~CSphMTFHash	indexer.cpp	/^	~CSphMTFHash ()$/;"	f	class:CSphMTFHash
~CSphMatch	sphinx.h	/^	~CSphMatch ()$/;"	f	class:CSphMatch
~CSphMatchQueueTraits	sphinxsort.cpp	/^	~CSphMatchQueueTraits ()$/;"	f	class:CSphMatchQueueTraits
~CSphMutex	sphinxstd.h	/^	~CSphMutex () { assert ( !m_bInitialized ); }$/;"	f	class:CSphMutex
~CSphOrderedHash	sphinxstd.h	/^	~CSphOrderedHash ()$/;"	f	class:CSphOrderedHash
~CSphQuery	sphinx.cpp	/^CSphQuery::~CSphQuery ()$/;"	f	class:CSphQuery
~CSphQueryContext	sphinx.cpp	/^CSphQueryContext::~CSphQueryContext ()$/;"	f	class:CSphQueryContext
~CSphQueryNodeCache	sphinxsearch.cpp	/^CSphQueryNodeCache::~CSphQueryNodeCache ()$/;"	f	class:CSphQueryNodeCache
~CSphQueryResult	sphinx.cpp	/^CSphQueryResult::~CSphQueryResult ()$/;"	f	class:CSphQueryResult
~CSphQueryResultMeta	sphinx.h	/^	virtual					~CSphQueryResultMeta () {}						\/\/\/< dtor$/;"	f	class:CSphQueryResultMeta
~CSphQueue	sphinx.cpp	/^	virtual ~CSphQueue ()$/;"	f	class:CSphQueue
~CSphReader	sphinx.cpp	/^CSphReader::~CSphReader ()$/;"	f	class:CSphReader
~CSphRefcountedPtr	sphinxstd.h	/^					~CSphRefcountedPtr ()			{ if ( m_pPtr ) m_pPtr->Release(); }$/;"	f	class:CSphRefcountedPtr
~CSphRwlock	sphinxstd.h	/^	~CSphRwlock () {}$/;"	f	class:CSphRwlock
~CSphSchemaMT	searchd.cpp	/^	~CSphSchemaMT()$/;"	f	class:CSphSchemaMT
~CSphScopedLock	sphinxstd.h	/^	~CSphScopedLock ()$/;"	f	class:CSphScopedLock
~CSphScopedPtr	sphinxstd.h	/^					~CSphScopedPtr ()			{ SafeDelete ( m_pPtr ); }$/;"	f	class:CSphScopedPtr
~CSphSharedBuffer	sphinxstd.h	/^	~CSphSharedBuffer ()$/;"	f	class:CSphSharedBuffer
~CSphSource	sphinx.cpp	/^CSphSource::~CSphSource()$/;"	f	class:CSphSource
~CSphSource_Document	sphinx.h	/^	virtual					~CSphSource_Document () { SafeDeleteArray ( m_pReadFileBuffer ); }$/;"	f	class:CSphSource_Document
~CSphSource_SQL	sphinx.h	/^	virtual				~CSphSource_SQL () {}$/;"	f	struct:CSphSource_SQL
~CSphSource_XMLPipe	sphinx.cpp	/^CSphSource_XMLPipe::~CSphSource_XMLPipe ()$/;"	f	class:CSphSource_XMLPipe
~CSphSource_XMLPipe2	sphinx.cpp	/^CSphSource_XMLPipe2::~CSphSource_XMLPipe2 ()$/;"	f	class:CSphSource_XMLPipe2
~CSphStaticMutex	sphinxstd.h	/^	~CSphStaticMutex()$/;"	f	class:CSphStaticMutex
~CSphString	sphinxstd.h	/^	virtual ~CSphString ()$/;"	f	struct:CSphString
~CSphStringBuilder	sphinxstd.h	/^	~CSphStringBuilder ()$/;"	f	class:CSphStringBuilder
~CSphTokenizer_Filter	sphinx.cpp	/^CSphTokenizer_Filter::~CSphTokenizer_Filter ()$/;"	f	class:CSphTokenizer_Filter
~CSphVariant	sphinxstd.h	/^	virtual ~CSphVariant ()$/;"	f	struct:CSphVariant
~CSphVector	sphinxstd.h	/^	~CSphVector ()$/;"	f	class:CSphVector
~CSphWriter	sphinx.cpp	/^CSphWriter::~CSphWriter ()$/;"	f	class:CSphWriter
~CWordlist	sphinx.cpp	/^CWordlist::~CWordlist ()$/;"	f	class:CWordlist
~DeleteOnFail	sphinx.cpp	/^	inline ~DeleteOnFail()$/;"	f	class:DeleteOnFail
~DiskIndexQwordSetup_c	sphinx.cpp	/^	virtual ~DiskIndexQwordSetup_c()$/;"	f	class:DiskIndexQwordSetup_c
~ExcerptGen_c	sphinxexcerpt.cpp	/^							~ExcerptGen_c () {}$/;"	f	class:ExcerptGen_c
~ExprParser_t	sphinxexpr.cpp	/^ExprParser_t::~ExprParser_t ()$/;"	f	class:ExprParser_t
~Expr_ArgVsSet_c	sphinxexpr.cpp	/^	~Expr_ArgVsSet_c () { SafeRelease ( m_pArg ); }$/;"	f	class:Expr_ArgVsSet_c
~Expr_Arglist_c	sphinxexpr.cpp	/^	~Expr_Arglist_c ()$/;"	f	struct:Expr_Arglist_c
~Expr_GeodistConst_c	sphinxexpr.cpp	/^	~Expr_GeodistConst_c ()$/;"	f	class:Expr_GeodistConst_c
~Expr_Geodist_c	sphinxexpr.cpp	/^	~Expr_Geodist_c ()$/;"	f	class:Expr_Geodist_c
~Expr_InUservar_c	sphinxexpr.cpp	/^	~Expr_InUservar_c()$/;"	f	class:Expr_InUservar_c
~Expr_MVAIn_c	sphinxexpr.cpp	/^	~Expr_MVAIn_c()$/;"	f	class:Expr_MVAIn_c
~Expr_Udf_c	sphinxexpr.cpp	/^	~Expr_Udf_c ()$/;"	f	class:Expr_Udf_c
~Expr_Unary_c	sphinxexpr.cpp	/^	~Expr_Unary_c() { SafeRelease ( m_pFirst ); }$/;"	f	struct:Expr_Unary_c
~ExtNWayT	sphinxsearch.cpp	/^ExtNWayT::~ExtNWayT ()$/;"	f	class:ExtNWayT
~ExtNodeCached_t	sphinxsearch.cpp	/^	virtual ~ExtNodeCached_t ()$/;"	f	class:ExtNodeCached_t
~ExtNode_i	sphinxsearch.cpp	/^	virtual						~ExtNode_i () { SafeDeleteArray ( m_pDocinfo ); }$/;"	f	class:ExtNode_i
~ExtOrder_c	sphinxsearch.cpp	/^ExtOrder_c::~ExtOrder_c ()$/;"	f	class:ExtOrder_c
~ExtQuorum_c	sphinxsearch.cpp	/^ExtQuorum_c::~ExtQuorum_c ()$/;"	f	class:ExtQuorum_c
~ExtRanker_c	sphinxsearch.cpp	/^ExtRanker_c::~ExtRanker_c ()$/;"	f	class:ExtRanker_c
~ExtTerm_c	sphinxsearch.cpp	/^								~ExtTerm_c ()$/;"	f	class:ExtTerm_c
~ExtTwofer_c	sphinxsearch.cpp	/^ExtTwofer_c::~ExtTwofer_c ()$/;"	f	class:ExtTwofer_c
~ExtUnit_c	sphinxsearch.cpp	/^ExtUnit_c::~ExtUnit_c ()$/;"	f	class:ExtUnit_c
~Filter_And	sphinxfilter.cpp	/^	~Filter_And ()$/;"	f	struct:Filter_And
~Filter_Not	sphinxfilter.cpp	/^	~Filter_Not ()$/;"	f	struct:Filter_Not
~HighlightPlain_c	sphinxexcerpt.cpp	/^	virtual ~HighlightPlain_c () {}$/;"	f	class:HighlightPlain_c
~HighlightQuery_c	sphinxexcerpt.cpp	/^	virtual ~HighlightQuery_c () {}$/;"	f	class:HighlightQuery_c
~HitCollector_c	sphinxexcerpt.cpp	/^	virtual ~HitCollector_c () {}$/;"	f	class:HitCollector_c
~IAggrFunc	sphinxsort.cpp	/^	virtual			~IAggrFunc() {}$/;"	f	class:IAggrFunc
~IReplyParser_t	searchd.cpp	/^	virtual ~IReplyParser_t () {} \/\/ to avoid gcc4 warns$/;"	f	struct:IReplyParser_t
~IRequestBuilder_t	searchd.cpp	/^	virtual ~IRequestBuilder_t () {} \/\/ to avoid gcc4 warns$/;"	f	struct:IRequestBuilder_t
~ISphBinlog	sphinxint.h	/^	virtual				~ISphBinlog () {}$/;"	f	class:ISphBinlog
~ISphExprHook	sphinxexpr.h	/^	virtual ~ISphExprHook () {}$/;"	f	struct:ISphExprHook
~ISphFilter	sphinxfilter.h	/^	virtual ~ISphFilter () {}$/;"	f	struct:ISphFilter
~ISphMatchComparator	sphinxsort.cpp	/^	virtual ~ISphMatchComparator () {}$/;"	f	struct:ISphMatchComparator
~ISphMatchSorter	sphinx.h	/^	virtual				~ISphMatchSorter () {}$/;"	f	class:ISphMatchSorter
~ISphQword	sphinxsearch.h	/^	virtual ~ISphQword () {}$/;"	f	class:ISphQword
~ISphQwordSetup	sphinxsearch.h	/^	virtual ~ISphQwordSetup () {}$/;"	f	class:ISphQwordSetup
~ISphRanker	sphinxsearch.h	/^	virtual						~ISphRanker () {}$/;"	f	class:ISphRanker
~ISphRefcounted	sphinxstd.h	/^	virtual			~ISphRefcounted () {}$/;"	f	struct:ISphRefcounted
~ISphRefcountedMT	sphinxstd.h	/^	virtual ~ISphRefcountedMT ()$/;"	f	struct:ISphRefcountedMT
~ISphTokenizer	sphinx.h	/^	virtual							~ISphTokenizer () {}$/;"	f	class:ISphTokenizer
~ISphWordlist	sphinxint.h	/^	virtual ~ISphWordlist () {}$/;"	f	class:ISphWordlist
~ISphZoneCheck	sphinxint.h	/^	virtual ~ISphZoneCheck () {}$/;"	f	class:ISphZoneCheck
~IndexHashIterator_c	searchd.cpp	/^IndexHashIterator_c::~IndexHashIterator_c ()$/;"	f	class:IndexHashIterator_c
~IndexHash_c	searchd.cpp	/^IndexHash_c::~IndexHash_c()$/;"	f	class:IndexHash_c
~InputBuffer_c	searchd.cpp	/^	virtual			~InputBuffer_c () {}$/;"	f	class:InputBuffer_c
~MemTracker_c	sphinxint.h	/^	~MemTracker_c ()$/;"	f	struct:MemTracker_c
~NetInputBuffer_c	searchd.cpp	/^NetInputBuffer_c::~NetInputBuffer_c ()$/;"	f	class:NetInputBuffer_c
~PipeReader_t	searchd.cpp	/^	~PipeReader_t ()$/;"	f	struct:PipeReader_t
~RankerState_Expr_fn	sphinxsearch.cpp	/^RankerState_Expr_fn::~RankerState_Expr_fn ()$/;"	f	class:RankerState_Expr_fn
~SearchHandler_c	searchd.cpp	/^SearchHandler_c::~SearchHandler_c ()$/;"	f	class:SearchHandler_c
~ServedDesc_t	searchd.cpp	/^ServedDesc_t::~ServedDesc_t ()$/;"	f	class:ServedDesc_t
~ServedIndex_t	searchd.cpp	/^ServedIndex_t::~ServedIndex_t ()$/;"	f	class:ServedIndex_t
~SnippetsFastQwordSetup_c	sphinxexcerpt.cpp	/^	virtual ~SnippetsFastQwordSetup_c () {}$/;"	f	class:SnippetsFastQwordSetup_c
~SnippetsFastQword_c	sphinxexcerpt.cpp	/^	virtual ~SnippetsFastQword_c () {}$/;"	f	class:SnippetsFastQword_c
~SortClauseTokenizer_t	sphinxsort.cpp	/^	~SortClauseTokenizer_t ()$/;"	f	class:SortClauseTokenizer_t
~SqlRowBuffer_c	searchd.cpp	/^	~SqlRowBuffer_c ()$/;"	f	class:SqlRowBuffer_c
~StaticThreadsOnlyMutex_t	searchd.cpp	/^StaticThreadsOnlyMutex_t::~StaticThreadsOnlyMutex_t ()$/;"	f	class:StaticThreadsOnlyMutex_t
~TokenFunctorTraits_c	sphinxexcerpt.cpp	/^	~TokenFunctorTraits_c () {}$/;"	f	class:TokenFunctorTraits_c
~UdfCall_t	sphinxexpr.cpp	/^UdfCall_t::~UdfCall_t ()$/;"	f	class:UdfCall_t
~UnlockOnDestroy	searchd.cpp	/^	inline ~UnlockOnDestroy()$/;"	f	class:UnlockOnDestroy
~WordformContainer_t	sphinx.cpp	/^WordformContainer_t::~WordformContainer_t ()$/;"	f	class:WordformContainer_t
~XQNode_t	sphinxquery.h	/^	~XQNode_t ()$/;"	f	struct:XQNode_t
~XQParser_t	sphinxquery.cpp	/^XQParser_t::~XQParser_t ()$/;"	f	class:XQParser_t
~XQQuery_t	sphinxquery.h	/^	~XQQuery_t ()$/;"	f	struct:XQQuery_t
~tTester	sphinx.cpp	/^	virtual ~tTester() {}$/;"	f	class:tTester
